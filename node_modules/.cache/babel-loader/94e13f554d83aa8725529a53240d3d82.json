{"ast":null,"code":"'use strict';\n\nvar find = require('property-information/find');\n\nvar normalize = require('property-information/normalize');\n\nvar parseSelector = require('hast-util-parse-selector');\n\nvar spaces = require('space-separated-tokens').parse;\n\nvar commas = require('comma-separated-tokens').parse;\n\nmodule.exports = factory;\nvar own = {}.hasOwnProperty;\n\nfunction factory(schema, defaultTagName, caseSensitive) {\n  var adjust = caseSensitive ? createAdjustMap(caseSensitive) : null;\n  return h; // Hyperscript compatible DSL for creating virtual hast trees.\n\n  function h(selector, properties) {\n    var node = parseSelector(selector, defaultTagName);\n    var children = Array.prototype.slice.call(arguments, 2);\n    var name = node.tagName.toLowerCase();\n    var property;\n    node.tagName = adjust && own.call(adjust, name) ? adjust[name] : name;\n\n    if (properties && isChildren(properties, node)) {\n      children.unshift(properties);\n      properties = null;\n    }\n\n    if (properties) {\n      for (property in properties) {\n        addProperty(node.properties, property, properties[property]);\n      }\n    }\n\n    addChild(node.children, children);\n\n    if (node.tagName === 'template') {\n      node.content = {\n        type: 'root',\n        children: node.children\n      };\n      node.children = [];\n    }\n\n    return node;\n  }\n\n  function addProperty(properties, key, value) {\n    var info;\n    var property;\n    var result; // Ignore nullish and NaN values.\n\n    if (value === null || value === undefined || value !== value) {\n      return;\n    }\n\n    info = find(schema, key);\n    property = info.property;\n    result = value; // Handle list values.\n\n    if (typeof result === 'string') {\n      if (info.spaceSeparated) {\n        result = spaces(result);\n      } else if (info.commaSeparated) {\n        result = commas(result);\n      } else if (info.commaOrSpaceSeparated) {\n        result = spaces(commas(result).join(' '));\n      }\n    } // Accept `object` on style.\n\n\n    if (property === 'style' && typeof value !== 'string') {\n      result = style(result);\n    } // Class-names (which can be added both on the `selector` and here).\n\n\n    if (property === 'className' && properties.className) {\n      result = properties.className.concat(result);\n    }\n\n    properties[property] = parsePrimitives(info, property, result);\n  }\n}\n\nfunction isChildren(value, node) {\n  return typeof value === 'string' || 'length' in value || isNode(node.tagName, value);\n}\n\nfunction isNode(tagName, value) {\n  var type = value.type;\n\n  if (tagName === 'input' || !type || typeof type !== 'string') {\n    return false;\n  }\n\n  if (typeof value.children === 'object' && 'length' in value.children) {\n    return true;\n  }\n\n  type = type.toLowerCase();\n\n  if (tagName === 'button') {\n    return type !== 'menu' && type !== 'submit' && type !== 'reset' && type !== 'button';\n  }\n\n  return 'value' in value;\n}\n\nfunction addChild(nodes, value) {\n  var index;\n  var length;\n\n  if (typeof value === 'string' || typeof value === 'number') {\n    nodes.push({\n      type: 'text',\n      value: String(value)\n    });\n    return;\n  }\n\n  if (typeof value === 'object' && 'length' in value) {\n    index = -1;\n    length = value.length;\n\n    while (++index < length) {\n      addChild(nodes, value[index]);\n    }\n\n    return;\n  }\n\n  if (typeof value !== 'object' || !('type' in value)) {\n    throw new Error('Expected node, nodes, or string, got `' + value + '`');\n  }\n\n  nodes.push(value);\n} // Parse a (list of) primitives.\n\n\nfunction parsePrimitives(info, name, value) {\n  var index;\n  var length;\n  var result;\n\n  if (typeof value !== 'object' || !('length' in value)) {\n    return parsePrimitive(info, name, value);\n  }\n\n  length = value.length;\n  index = -1;\n  result = [];\n\n  while (++index < length) {\n    result[index] = parsePrimitive(info, name, value[index]);\n  }\n\n  return result;\n} // Parse a single primitives.\n\n\nfunction parsePrimitive(info, name, value) {\n  var result = value;\n\n  if (info.number || info.positiveNumber) {\n    if (!isNaN(result) && result !== '') {\n      result = Number(result);\n    }\n  } else if (info.boolean || info.overloadedBoolean) {\n    // Accept `boolean` and `string`.\n    if (typeof result === 'string' && (result === '' || normalize(value) === normalize(name))) {\n      result = true;\n    }\n  }\n\n  return result;\n}\n\nfunction style(value) {\n  var result = [];\n  var key;\n\n  for (key in value) {\n    result.push([key, value[key]].join(': '));\n  }\n\n  return result.join('; ');\n}\n\nfunction createAdjustMap(values) {\n  var length = values.length;\n  var index = -1;\n  var result = {};\n  var value;\n\n  while (++index < length) {\n    value = values[index];\n    result[value.toLowerCase()] = value;\n  }\n\n  return result;\n}","map":{"version":3,"names":["find","require","normalize","parseSelector","spaces","parse","commas","module","exports","factory","own","hasOwnProperty","schema","defaultTagName","caseSensitive","adjust","createAdjustMap","h","selector","properties","node","children","Array","prototype","slice","call","arguments","name","tagName","toLowerCase","property","isChildren","unshift","addProperty","addChild","content","type","key","value","info","result","undefined","spaceSeparated","commaSeparated","commaOrSpaceSeparated","join","style","className","concat","parsePrimitives","isNode","nodes","index","length","push","String","Error","parsePrimitive","number","positiveNumber","isNaN","Number","boolean","overloadedBoolean","values"],"sources":["C:/Users/ayeh8/Documents/Plant-Buddy/node_modules/hastscript/factory.js"],"sourcesContent":["'use strict'\r\n\r\nvar find = require('property-information/find')\r\nvar normalize = require('property-information/normalize')\r\nvar parseSelector = require('hast-util-parse-selector')\r\nvar spaces = require('space-separated-tokens').parse\r\nvar commas = require('comma-separated-tokens').parse\r\n\r\nmodule.exports = factory\r\n\r\nvar own = {}.hasOwnProperty\r\n\r\nfunction factory(schema, defaultTagName, caseSensitive) {\r\n  var adjust = caseSensitive ? createAdjustMap(caseSensitive) : null\r\n\r\n  return h\r\n\r\n  // Hyperscript compatible DSL for creating virtual hast trees.\r\n  function h(selector, properties) {\r\n    var node = parseSelector(selector, defaultTagName)\r\n    var children = Array.prototype.slice.call(arguments, 2)\r\n    var name = node.tagName.toLowerCase()\r\n    var property\r\n\r\n    node.tagName = adjust && own.call(adjust, name) ? adjust[name] : name\r\n\r\n    if (properties && isChildren(properties, node)) {\r\n      children.unshift(properties)\r\n      properties = null\r\n    }\r\n\r\n    if (properties) {\r\n      for (property in properties) {\r\n        addProperty(node.properties, property, properties[property])\r\n      }\r\n    }\r\n\r\n    addChild(node.children, children)\r\n\r\n    if (node.tagName === 'template') {\r\n      node.content = {type: 'root', children: node.children}\r\n      node.children = []\r\n    }\r\n\r\n    return node\r\n  }\r\n\r\n  function addProperty(properties, key, value) {\r\n    var info\r\n    var property\r\n    var result\r\n\r\n    // Ignore nullish and NaN values.\r\n    if (value === null || value === undefined || value !== value) {\r\n      return\r\n    }\r\n\r\n    info = find(schema, key)\r\n    property = info.property\r\n    result = value\r\n\r\n    // Handle list values.\r\n    if (typeof result === 'string') {\r\n      if (info.spaceSeparated) {\r\n        result = spaces(result)\r\n      } else if (info.commaSeparated) {\r\n        result = commas(result)\r\n      } else if (info.commaOrSpaceSeparated) {\r\n        result = spaces(commas(result).join(' '))\r\n      }\r\n    }\r\n\r\n    // Accept `object` on style.\r\n    if (property === 'style' && typeof value !== 'string') {\r\n      result = style(result)\r\n    }\r\n\r\n    // Class-names (which can be added both on the `selector` and here).\r\n    if (property === 'className' && properties.className) {\r\n      result = properties.className.concat(result)\r\n    }\r\n\r\n    properties[property] = parsePrimitives(info, property, result)\r\n  }\r\n}\r\n\r\nfunction isChildren(value, node) {\r\n  return (\r\n    typeof value === 'string' ||\r\n    'length' in value ||\r\n    isNode(node.tagName, value)\r\n  )\r\n}\r\n\r\nfunction isNode(tagName, value) {\r\n  var type = value.type\r\n\r\n  if (tagName === 'input' || !type || typeof type !== 'string') {\r\n    return false\r\n  }\r\n\r\n  if (typeof value.children === 'object' && 'length' in value.children) {\r\n    return true\r\n  }\r\n\r\n  type = type.toLowerCase()\r\n\r\n  if (tagName === 'button') {\r\n    return (\r\n      type !== 'menu' &&\r\n      type !== 'submit' &&\r\n      type !== 'reset' &&\r\n      type !== 'button'\r\n    )\r\n  }\r\n\r\n  return 'value' in value\r\n}\r\n\r\nfunction addChild(nodes, value) {\r\n  var index\r\n  var length\r\n\r\n  if (typeof value === 'string' || typeof value === 'number') {\r\n    nodes.push({type: 'text', value: String(value)})\r\n    return\r\n  }\r\n\r\n  if (typeof value === 'object' && 'length' in value) {\r\n    index = -1\r\n    length = value.length\r\n\r\n    while (++index < length) {\r\n      addChild(nodes, value[index])\r\n    }\r\n\r\n    return\r\n  }\r\n\r\n  if (typeof value !== 'object' || !('type' in value)) {\r\n    throw new Error('Expected node, nodes, or string, got `' + value + '`')\r\n  }\r\n\r\n  nodes.push(value)\r\n}\r\n\r\n// Parse a (list of) primitives.\r\nfunction parsePrimitives(info, name, value) {\r\n  var index\r\n  var length\r\n  var result\r\n\r\n  if (typeof value !== 'object' || !('length' in value)) {\r\n    return parsePrimitive(info, name, value)\r\n  }\r\n\r\n  length = value.length\r\n  index = -1\r\n  result = []\r\n\r\n  while (++index < length) {\r\n    result[index] = parsePrimitive(info, name, value[index])\r\n  }\r\n\r\n  return result\r\n}\r\n\r\n// Parse a single primitives.\r\nfunction parsePrimitive(info, name, value) {\r\n  var result = value\r\n\r\n  if (info.number || info.positiveNumber) {\r\n    if (!isNaN(result) && result !== '') {\r\n      result = Number(result)\r\n    }\r\n  } else if (info.boolean || info.overloadedBoolean) {\r\n    // Accept `boolean` and `string`.\r\n    if (\r\n      typeof result === 'string' &&\r\n      (result === '' || normalize(value) === normalize(name))\r\n    ) {\r\n      result = true\r\n    }\r\n  }\r\n\r\n  return result\r\n}\r\n\r\nfunction style(value) {\r\n  var result = []\r\n  var key\r\n\r\n  for (key in value) {\r\n    result.push([key, value[key]].join(': '))\r\n  }\r\n\r\n  return result.join('; ')\r\n}\r\n\r\nfunction createAdjustMap(values) {\r\n  var length = values.length\r\n  var index = -1\r\n  var result = {}\r\n  var value\r\n\r\n  while (++index < length) {\r\n    value = values[index]\r\n    result[value.toLowerCase()] = value\r\n  }\r\n\r\n  return result\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}