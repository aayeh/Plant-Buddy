{"ast":null,"code":"'use strict';\n\nvar refractorCpp = require('./cpp.js');\n\nmodule.exports = chaiscript;\nchaiscript.displayName = 'chaiscript';\nchaiscript.aliases = [];\n\nfunction chaiscript(Prism) {\n  Prism.register(refractorCpp);\n  Prism.languages.chaiscript = Prism.languages.extend('clike', {\n    string: {\n      pattern: /(^|[^\\\\])'(?:[^'\\\\]|\\\\[\\s\\S])*'/,\n      lookbehind: true,\n      greedy: true\n    },\n    'class-name': [{\n      // e.g. class Rectangle { ... }\n      pattern: /(\\bclass\\s+)\\w+/,\n      lookbehind: true\n    }, {\n      // e.g. attr Rectangle::height, def Rectangle::area() { ... }\n      pattern: /(\\b(?:attr|def)\\s+)\\w+(?=\\s*::)/,\n      lookbehind: true\n    }],\n    keyword: /\\b(?:attr|auto|break|case|catch|class|continue|def|default|else|finally|for|fun|global|if|return|switch|this|try|var|while)\\b/,\n    number: [Prism.languages.cpp.number, /\\b(?:Infinity|NaN)\\b/],\n    operator: />>=?|<<=?|\\|\\||&&|:[:=]?|--|\\+\\+|[=!<>+\\-*/%|&^]=?|[?~]|`[^`\\r\\n]{1,4}`/\n  });\n  Prism.languages.insertBefore('chaiscript', 'operator', {\n    'parameter-type': {\n      // e.g. def foo(int x, Vector y) {...}\n      pattern: /([,(]\\s*)\\w+(?=\\s+\\w)/,\n      lookbehind: true,\n      alias: 'class-name'\n    }\n  });\n  Prism.languages.insertBefore('chaiscript', 'string', {\n    'string-interpolation': {\n      pattern: /(^|[^\\\\])\"(?:[^\"$\\\\]|\\\\[\\s\\S]|\\$(?!\\{)|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})*\\})*\"/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})*\\}/,\n          lookbehind: true,\n          inside: {\n            'interpolation-expression': {\n              pattern: /(^\\$\\{)[\\s\\S]+(?=\\}$)/,\n              lookbehind: true,\n              inside: Prism.languages.chaiscript\n            },\n            'interpolation-punctuation': {\n              pattern: /^\\$\\{|\\}$/,\n              alias: 'punctuation'\n            }\n          }\n        },\n        string: /[\\s\\S]+/\n      }\n    }\n  });\n}","map":{"version":3,"names":["refractorCpp","require","module","exports","chaiscript","displayName","aliases","Prism","register","languages","extend","string","pattern","lookbehind","greedy","keyword","number","cpp","operator","insertBefore","alias","inside","interpolation"],"sources":["/Users/aaronyeh/Downloads/Plant Buddy/node_modules/refractor/lang/chaiscript.js"],"sourcesContent":["'use strict'\nvar refractorCpp = require('./cpp.js')\nmodule.exports = chaiscript\nchaiscript.displayName = 'chaiscript'\nchaiscript.aliases = []\nfunction chaiscript(Prism) {\n  Prism.register(refractorCpp)\n  Prism.languages.chaiscript = Prism.languages.extend('clike', {\n    string: {\n      pattern: /(^|[^\\\\])'(?:[^'\\\\]|\\\\[\\s\\S])*'/,\n      lookbehind: true,\n      greedy: true\n    },\n    'class-name': [\n      {\n        // e.g. class Rectangle { ... }\n        pattern: /(\\bclass\\s+)\\w+/,\n        lookbehind: true\n      },\n      {\n        // e.g. attr Rectangle::height, def Rectangle::area() { ... }\n        pattern: /(\\b(?:attr|def)\\s+)\\w+(?=\\s*::)/,\n        lookbehind: true\n      }\n    ],\n    keyword:\n      /\\b(?:attr|auto|break|case|catch|class|continue|def|default|else|finally|for|fun|global|if|return|switch|this|try|var|while)\\b/,\n    number: [Prism.languages.cpp.number, /\\b(?:Infinity|NaN)\\b/],\n    operator:\n      />>=?|<<=?|\\|\\||&&|:[:=]?|--|\\+\\+|[=!<>+\\-*/%|&^]=?|[?~]|`[^`\\r\\n]{1,4}`/\n  })\n  Prism.languages.insertBefore('chaiscript', 'operator', {\n    'parameter-type': {\n      // e.g. def foo(int x, Vector y) {...}\n      pattern: /([,(]\\s*)\\w+(?=\\s+\\w)/,\n      lookbehind: true,\n      alias: 'class-name'\n    }\n  })\n  Prism.languages.insertBefore('chaiscript', 'string', {\n    'string-interpolation': {\n      pattern:\n        /(^|[^\\\\])\"(?:[^\"$\\\\]|\\\\[\\s\\S]|\\$(?!\\{)|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})*\\})*\"/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern:\n            /((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})*\\}/,\n          lookbehind: true,\n          inside: {\n            'interpolation-expression': {\n              pattern: /(^\\$\\{)[\\s\\S]+(?=\\}$)/,\n              lookbehind: true,\n              inside: Prism.languages.chaiscript\n            },\n            'interpolation-punctuation': {\n              pattern: /^\\$\\{|\\}$/,\n              alias: 'punctuation'\n            }\n          }\n        },\n        string: /[\\s\\S]+/\n      }\n    }\n  })\n}\n"],"mappings":"AAAA;;AACA,IAAIA,YAAY,GAAGC,OAAO,CAAC,UAAD,CAA1B;;AACAC,MAAM,CAACC,OAAP,GAAiBC,UAAjB;AACAA,UAAU,CAACC,WAAX,GAAyB,YAAzB;AACAD,UAAU,CAACE,OAAX,GAAqB,EAArB;;AACA,SAASF,UAAT,CAAoBG,KAApB,EAA2B;EACzBA,KAAK,CAACC,QAAN,CAAeR,YAAf;EACAO,KAAK,CAACE,SAAN,CAAgBL,UAAhB,GAA6BG,KAAK,CAACE,SAAN,CAAgBC,MAAhB,CAAuB,OAAvB,EAAgC;IAC3DC,MAAM,EAAE;MACNC,OAAO,EAAE,iCADH;MAENC,UAAU,EAAE,IAFN;MAGNC,MAAM,EAAE;IAHF,CADmD;IAM3D,cAAc,CACZ;MACE;MACAF,OAAO,EAAE,iBAFX;MAGEC,UAAU,EAAE;IAHd,CADY,EAMZ;MACE;MACAD,OAAO,EAAE,iCAFX;MAGEC,UAAU,EAAE;IAHd,CANY,CAN6C;IAkB3DE,OAAO,EACL,+HAnByD;IAoB3DC,MAAM,EAAE,CAACT,KAAK,CAACE,SAAN,CAAgBQ,GAAhB,CAAoBD,MAArB,EAA6B,sBAA7B,CApBmD;IAqB3DE,QAAQ,EACN;EAtByD,CAAhC,CAA7B;EAwBAX,KAAK,CAACE,SAAN,CAAgBU,YAAhB,CAA6B,YAA7B,EAA2C,UAA3C,EAAuD;IACrD,kBAAkB;MAChB;MACAP,OAAO,EAAE,uBAFO;MAGhBC,UAAU,EAAE,IAHI;MAIhBO,KAAK,EAAE;IAJS;EADmC,CAAvD;EAQAb,KAAK,CAACE,SAAN,CAAgBU,YAAhB,CAA6B,YAA7B,EAA2C,QAA3C,EAAqD;IACnD,wBAAwB;MACtBP,OAAO,EACL,sFAFoB;MAGtBC,UAAU,EAAE,IAHU;MAItBC,MAAM,EAAE,IAJc;MAKtBO,MAAM,EAAE;QACNC,aAAa,EAAE;UACbV,OAAO,EACL,mEAFW;UAGbC,UAAU,EAAE,IAHC;UAIbQ,MAAM,EAAE;YACN,4BAA4B;cAC1BT,OAAO,EAAE,uBADiB;cAE1BC,UAAU,EAAE,IAFc;cAG1BQ,MAAM,EAAEd,KAAK,CAACE,SAAN,CAAgBL;YAHE,CADtB;YAMN,6BAA6B;cAC3BQ,OAAO,EAAE,WADkB;cAE3BQ,KAAK,EAAE;YAFoB;UANvB;QAJK,CADT;QAiBNT,MAAM,EAAE;MAjBF;IALc;EAD2B,CAArD;AA2BD"},"metadata":{},"sourceType":"script"}