{"ast":null,"code":"'use strict';\n\nmodule.exports = parser;\nparser.displayName = 'parser';\nparser.aliases = [];\n\nfunction parser(Prism) {\n  ;\n\n  (function (Prism) {\n    var parser = Prism.languages.parser = Prism.languages.extend('markup', {\n      keyword: {\n        pattern: /(^|[^^])(?:\\^(?:case|eval|for|if|switch|throw)\\b|@(?:BASE|CLASS|GET(?:_DEFAULT)?|OPTIONS|SET_DEFAULT|USE)\\b)/,\n        lookbehind: true\n      },\n      variable: {\n        pattern: /(^|[^^])\\B\\$(?:\\w+|(?=[.{]))(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\.|:+/\n        }\n      },\n      function: {\n        pattern: /(^|[^^])\\B[@^]\\w+(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,\n        lookbehind: true,\n        inside: {\n          keyword: {\n            pattern: /(^@)(?:GET_|SET_)/,\n            lookbehind: true\n          },\n          punctuation: /\\.|:+/\n        }\n      },\n      escape: {\n        pattern: /\\^(?:[$^;@()\\[\\]{}\"':]|#[a-f\\d]*)/i,\n        alias: 'builtin'\n      },\n      punctuation: /[\\[\\](){};]/\n    });\n    parser = Prism.languages.insertBefore('parser', 'keyword', {\n      'parser-comment': {\n        pattern: /(\\s)#.*/,\n        lookbehind: true,\n        alias: 'comment'\n      },\n      expression: {\n        // Allow for 3 levels of depth\n        pattern: /(^|[^^])\\((?:[^()]|\\((?:[^()]|\\((?:[^()])*\\))*\\))*\\)/,\n        greedy: true,\n        lookbehind: true,\n        inside: {\n          string: {\n            pattern: /(^|[^^])([\"'])(?:(?!\\2)[^^]|\\^[\\s\\S])*\\2/,\n            lookbehind: true\n          },\n          keyword: parser.keyword,\n          variable: parser.variable,\n          function: parser.function,\n          boolean: /\\b(?:false|true)\\b/,\n          number: /\\b(?:0x[a-f\\d]+|\\d+(?:\\.\\d*)?(?:e[+-]?\\d+)?)\\b/i,\n          escape: parser.escape,\n          operator: /[~+*\\/\\\\%]|!(?:\\|\\|?|=)?|&&?|\\|\\|?|==|<[<=]?|>[>=]?|-[fd]?|\\b(?:def|eq|ge|gt|in|is|le|lt|ne)\\b/,\n          punctuation: parser.punctuation\n        }\n      }\n    });\n    Prism.languages.insertBefore('inside', 'punctuation', {\n      expression: parser.expression,\n      keyword: parser.keyword,\n      variable: parser.variable,\n      function: parser.function,\n      escape: parser.escape,\n      'parser-punctuation': {\n        pattern: parser.punctuation,\n        alias: 'punctuation'\n      }\n    }, parser['tag'].inside['attr-value']);\n  })(Prism);\n}","map":{"version":3,"names":["module","exports","parser","displayName","aliases","Prism","languages","extend","keyword","pattern","lookbehind","variable","inside","punctuation","function","escape","alias","insertBefore","expression","greedy","string","boolean","number","operator"],"sources":["C:/Users/ayeh8/Documents/Plant-Buddy/node_modules/refractor/lang/parser.js"],"sourcesContent":["'use strict'\r\n\r\nmodule.exports = parser\r\nparser.displayName = 'parser'\r\nparser.aliases = []\r\nfunction parser(Prism) {\r\n  ;(function (Prism) {\r\n    var parser = (Prism.languages.parser = Prism.languages.extend('markup', {\r\n      keyword: {\r\n        pattern:\r\n          /(^|[^^])(?:\\^(?:case|eval|for|if|switch|throw)\\b|@(?:BASE|CLASS|GET(?:_DEFAULT)?|OPTIONS|SET_DEFAULT|USE)\\b)/,\r\n        lookbehind: true\r\n      },\r\n      variable: {\r\n        pattern: /(^|[^^])\\B\\$(?:\\w+|(?=[.{]))(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,\r\n        lookbehind: true,\r\n        inside: {\r\n          punctuation: /\\.|:+/\r\n        }\r\n      },\r\n      function: {\r\n        pattern: /(^|[^^])\\B[@^]\\w+(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,\r\n        lookbehind: true,\r\n        inside: {\r\n          keyword: {\r\n            pattern: /(^@)(?:GET_|SET_)/,\r\n            lookbehind: true\r\n          },\r\n          punctuation: /\\.|:+/\r\n        }\r\n      },\r\n      escape: {\r\n        pattern: /\\^(?:[$^;@()\\[\\]{}\"':]|#[a-f\\d]*)/i,\r\n        alias: 'builtin'\r\n      },\r\n      punctuation: /[\\[\\](){};]/\r\n    }))\r\n    parser = Prism.languages.insertBefore('parser', 'keyword', {\r\n      'parser-comment': {\r\n        pattern: /(\\s)#.*/,\r\n        lookbehind: true,\r\n        alias: 'comment'\r\n      },\r\n      expression: {\r\n        // Allow for 3 levels of depth\r\n        pattern: /(^|[^^])\\((?:[^()]|\\((?:[^()]|\\((?:[^()])*\\))*\\))*\\)/,\r\n        greedy: true,\r\n        lookbehind: true,\r\n        inside: {\r\n          string: {\r\n            pattern: /(^|[^^])([\"'])(?:(?!\\2)[^^]|\\^[\\s\\S])*\\2/,\r\n            lookbehind: true\r\n          },\r\n          keyword: parser.keyword,\r\n          variable: parser.variable,\r\n          function: parser.function,\r\n          boolean: /\\b(?:false|true)\\b/,\r\n          number: /\\b(?:0x[a-f\\d]+|\\d+(?:\\.\\d*)?(?:e[+-]?\\d+)?)\\b/i,\r\n          escape: parser.escape,\r\n          operator:\r\n            /[~+*\\/\\\\%]|!(?:\\|\\|?|=)?|&&?|\\|\\|?|==|<[<=]?|>[>=]?|-[fd]?|\\b(?:def|eq|ge|gt|in|is|le|lt|ne)\\b/,\r\n          punctuation: parser.punctuation\r\n        }\r\n      }\r\n    })\r\n    Prism.languages.insertBefore(\r\n      'inside',\r\n      'punctuation',\r\n      {\r\n        expression: parser.expression,\r\n        keyword: parser.keyword,\r\n        variable: parser.variable,\r\n        function: parser.function,\r\n        escape: parser.escape,\r\n        'parser-punctuation': {\r\n          pattern: parser.punctuation,\r\n          alias: 'punctuation'\r\n        }\r\n      },\r\n      parser['tag'].inside['attr-value']\r\n    )\r\n  })(Prism)\r\n}\r\n"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,MAAjB;AACAA,MAAM,CAACC,WAAP,GAAqB,QAArB;AACAD,MAAM,CAACE,OAAP,GAAiB,EAAjB;;AACA,SAASF,MAAT,CAAgBG,KAAhB,EAAuB;EACrB;;EAAC,CAAC,UAAUA,KAAV,EAAiB;IACjB,IAAIH,MAAM,GAAIG,KAAK,CAACC,SAAN,CAAgBJ,MAAhB,GAAyBG,KAAK,CAACC,SAAN,CAAgBC,MAAhB,CAAuB,QAAvB,EAAiC;MACtEC,OAAO,EAAE;QACPC,OAAO,EACL,8GAFK;QAGPC,UAAU,EAAE;MAHL,CAD6D;MAMtEC,QAAQ,EAAE;QACRF,OAAO,EAAE,2DADD;QAERC,UAAU,EAAE,IAFJ;QAGRE,MAAM,EAAE;UACNC,WAAW,EAAE;QADP;MAHA,CAN4D;MAatEC,QAAQ,EAAE;QACRL,OAAO,EAAE,gDADD;QAERC,UAAU,EAAE,IAFJ;QAGRE,MAAM,EAAE;UACNJ,OAAO,EAAE;YACPC,OAAO,EAAE,mBADF;YAEPC,UAAU,EAAE;UAFL,CADH;UAKNG,WAAW,EAAE;QALP;MAHA,CAb4D;MAwBtEE,MAAM,EAAE;QACNN,OAAO,EAAE,oCADH;QAENO,KAAK,EAAE;MAFD,CAxB8D;MA4BtEH,WAAW,EAAE;IA5ByD,CAAjC,CAAvC;IA8BAX,MAAM,GAAGG,KAAK,CAACC,SAAN,CAAgBW,YAAhB,CAA6B,QAA7B,EAAuC,SAAvC,EAAkD;MACzD,kBAAkB;QAChBR,OAAO,EAAE,SADO;QAEhBC,UAAU,EAAE,IAFI;QAGhBM,KAAK,EAAE;MAHS,CADuC;MAMzDE,UAAU,EAAE;QACV;QACAT,OAAO,EAAE,sDAFC;QAGVU,MAAM,EAAE,IAHE;QAIVT,UAAU,EAAE,IAJF;QAKVE,MAAM,EAAE;UACNQ,MAAM,EAAE;YACNX,OAAO,EAAE,0CADH;YAENC,UAAU,EAAE;UAFN,CADF;UAKNF,OAAO,EAAEN,MAAM,CAACM,OALV;UAMNG,QAAQ,EAAET,MAAM,CAACS,QANX;UAONG,QAAQ,EAAEZ,MAAM,CAACY,QAPX;UAQNO,OAAO,EAAE,oBARH;UASNC,MAAM,EAAE,iDATF;UAUNP,MAAM,EAAEb,MAAM,CAACa,MAVT;UAWNQ,QAAQ,EACN,gGAZI;UAaNV,WAAW,EAAEX,MAAM,CAACW;QAbd;MALE;IAN6C,CAAlD,CAAT;IA4BAR,KAAK,CAACC,SAAN,CAAgBW,YAAhB,CACE,QADF,EAEE,aAFF,EAGE;MACEC,UAAU,EAAEhB,MAAM,CAACgB,UADrB;MAEEV,OAAO,EAAEN,MAAM,CAACM,OAFlB;MAGEG,QAAQ,EAAET,MAAM,CAACS,QAHnB;MAIEG,QAAQ,EAAEZ,MAAM,CAACY,QAJnB;MAKEC,MAAM,EAAEb,MAAM,CAACa,MALjB;MAME,sBAAsB;QACpBN,OAAO,EAAEP,MAAM,CAACW,WADI;QAEpBG,KAAK,EAAE;MAFa;IANxB,CAHF,EAcEd,MAAM,CAAC,KAAD,CAAN,CAAcU,MAAd,CAAqB,YAArB,CAdF;EAgBD,CA3EA,EA2EEP,KA3EF;AA4EF"},"metadata":{},"sourceType":"script"}