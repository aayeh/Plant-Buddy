{"ast":null,"code":"'use strict';\n\nmodule.exports = dart;\ndart.displayName = 'dart';\ndart.aliases = [];\n\nfunction dart(Prism) {\n  ;\n\n  (function (Prism) {\n    var keywords = [/\\b(?:async|sync|yield)\\*/, /\\b(?:abstract|assert|async|await|break|case|catch|class|const|continue|covariant|default|deferred|do|dynamic|else|enum|export|extends|extension|external|factory|final|finally|for|get|hide|if|implements|import|in|interface|library|mixin|new|null|on|operator|part|rethrow|return|set|show|static|super|switch|sync|this|throw|try|typedef|var|void|while|with|yield)\\b/]; // Handles named imports, such as http.Client\n\n    var packagePrefix = /(^|[^\\w.])(?:[a-z]\\w*\\s*\\.\\s*)*(?:[A-Z]\\w*\\s*\\.\\s*)*/.source; // based on the dart naming conventions\n\n    var className = {\n      pattern: RegExp(packagePrefix + /[A-Z](?:[\\d_A-Z]*[a-z]\\w*)?\\b/.source),\n      lookbehind: true,\n      inside: {\n        namespace: {\n          pattern: /^[a-z]\\w*(?:\\s*\\.\\s*[a-z]\\w*)*(?:\\s*\\.)?/,\n          inside: {\n            punctuation: /\\./\n          }\n        }\n      }\n    };\n    Prism.languages.dart = Prism.languages.extend('clike', {\n      'class-name': [className, {\n        // variables and parameters\n        // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n        pattern: RegExp(packagePrefix + /[A-Z]\\w*(?=\\s+\\w+\\s*[;,=()])/.source),\n        lookbehind: true,\n        inside: className.inside\n      }],\n      keyword: keywords,\n      operator: /\\bis!|\\b(?:as|is)\\b|\\+\\+|--|&&|\\|\\||<<=?|>>=?|~(?:\\/=?)?|[+\\-*\\/%&^|=!<>]=?|\\?/\n    });\n    Prism.languages.insertBefore('dart', 'string', {\n      'string-literal': {\n        pattern: /r?(?:(\"\"\"|''')[\\s\\S]*?\\1|([\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2(?!\\2))/,\n        greedy: true,\n        inside: {\n          interpolation: {\n            pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$(?:\\w+|\\{(?:[^{}]|\\{[^{}]*\\})*\\})/,\n            lookbehind: true,\n            inside: {\n              punctuation: /^\\$\\{?|\\}$/,\n              expression: {\n                pattern: /[\\s\\S]+/,\n                inside: Prism.languages.dart\n              }\n            }\n          },\n          string: /[\\s\\S]+/\n        }\n      },\n      string: undefined\n    });\n    Prism.languages.insertBefore('dart', 'class-name', {\n      metadata: {\n        pattern: /@\\w+/,\n        alias: 'function'\n      }\n    });\n    Prism.languages.insertBefore('dart', 'class-name', {\n      generics: {\n        pattern: /<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<[\\w\\s,.&?]*>)*>)*>)*>/,\n        inside: {\n          'class-name': className,\n          keyword: keywords,\n          punctuation: /[<>(),.:]/,\n          operator: /[?&|]/\n        }\n      }\n    });\n  })(Prism);\n}","map":{"version":3,"names":["module","exports","dart","displayName","aliases","Prism","keywords","packagePrefix","source","className","pattern","RegExp","lookbehind","inside","namespace","punctuation","languages","extend","keyword","operator","insertBefore","greedy","interpolation","expression","string","undefined","metadata","alias","generics"],"sources":["C:/Users/ayeh8/Documents/Plant-Buddy/node_modules/refractor/lang/dart.js"],"sourcesContent":["'use strict'\r\n\r\nmodule.exports = dart\r\ndart.displayName = 'dart'\r\ndart.aliases = []\r\nfunction dart(Prism) {\r\n  ;(function (Prism) {\r\n    var keywords = [\r\n      /\\b(?:async|sync|yield)\\*/,\r\n      /\\b(?:abstract|assert|async|await|break|case|catch|class|const|continue|covariant|default|deferred|do|dynamic|else|enum|export|extends|extension|external|factory|final|finally|for|get|hide|if|implements|import|in|interface|library|mixin|new|null|on|operator|part|rethrow|return|set|show|static|super|switch|sync|this|throw|try|typedef|var|void|while|with|yield)\\b/\r\n    ] // Handles named imports, such as http.Client\r\n    var packagePrefix = /(^|[^\\w.])(?:[a-z]\\w*\\s*\\.\\s*)*(?:[A-Z]\\w*\\s*\\.\\s*)*/\r\n      .source // based on the dart naming conventions\r\n    var className = {\r\n      pattern: RegExp(packagePrefix + /[A-Z](?:[\\d_A-Z]*[a-z]\\w*)?\\b/.source),\r\n      lookbehind: true,\r\n      inside: {\r\n        namespace: {\r\n          pattern: /^[a-z]\\w*(?:\\s*\\.\\s*[a-z]\\w*)*(?:\\s*\\.)?/,\r\n          inside: {\r\n            punctuation: /\\./\r\n          }\r\n        }\r\n      }\r\n    }\r\n    Prism.languages.dart = Prism.languages.extend('clike', {\r\n      'class-name': [\r\n        className,\r\n        {\r\n          // variables and parameters\r\n          // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\r\n          pattern: RegExp(\r\n            packagePrefix + /[A-Z]\\w*(?=\\s+\\w+\\s*[;,=()])/.source\r\n          ),\r\n          lookbehind: true,\r\n          inside: className.inside\r\n        }\r\n      ],\r\n      keyword: keywords,\r\n      operator:\r\n        /\\bis!|\\b(?:as|is)\\b|\\+\\+|--|&&|\\|\\||<<=?|>>=?|~(?:\\/=?)?|[+\\-*\\/%&^|=!<>]=?|\\?/\r\n    })\r\n    Prism.languages.insertBefore('dart', 'string', {\r\n      'string-literal': {\r\n        pattern:\r\n          /r?(?:(\"\"\"|''')[\\s\\S]*?\\1|([\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2(?!\\2))/,\r\n        greedy: true,\r\n        inside: {\r\n          interpolation: {\r\n            pattern:\r\n              /((?:^|[^\\\\])(?:\\\\{2})*)\\$(?:\\w+|\\{(?:[^{}]|\\{[^{}]*\\})*\\})/,\r\n            lookbehind: true,\r\n            inside: {\r\n              punctuation: /^\\$\\{?|\\}$/,\r\n              expression: {\r\n                pattern: /[\\s\\S]+/,\r\n                inside: Prism.languages.dart\r\n              }\r\n            }\r\n          },\r\n          string: /[\\s\\S]+/\r\n        }\r\n      },\r\n      string: undefined\r\n    })\r\n    Prism.languages.insertBefore('dart', 'class-name', {\r\n      metadata: {\r\n        pattern: /@\\w+/,\r\n        alias: 'function'\r\n      }\r\n    })\r\n    Prism.languages.insertBefore('dart', 'class-name', {\r\n      generics: {\r\n        pattern:\r\n          /<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<[\\w\\s,.&?]*>)*>)*>)*>/,\r\n        inside: {\r\n          'class-name': className,\r\n          keyword: keywords,\r\n          punctuation: /[<>(),.:]/,\r\n          operator: /[?&|]/\r\n        }\r\n      }\r\n    })\r\n  })(Prism)\r\n}\r\n"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,IAAjB;AACAA,IAAI,CAACC,WAAL,GAAmB,MAAnB;AACAD,IAAI,CAACE,OAAL,GAAe,EAAf;;AACA,SAASF,IAAT,CAAcG,KAAd,EAAqB;EACnB;;EAAC,CAAC,UAAUA,KAAV,EAAiB;IACjB,IAAIC,QAAQ,GAAG,CACb,0BADa,EAEb,4WAFa,CAAf,CADiB,CAIf;;IACF,IAAIC,aAAa,GAAG,uDACjBC,MADH,CALiB,CAMP;;IACV,IAAIC,SAAS,GAAG;MACdC,OAAO,EAAEC,MAAM,CAACJ,aAAa,GAAG,gCAAgCC,MAAjD,CADD;MAEdI,UAAU,EAAE,IAFE;MAGdC,MAAM,EAAE;QACNC,SAAS,EAAE;UACTJ,OAAO,EAAE,0CADA;UAETG,MAAM,EAAE;YACNE,WAAW,EAAE;UADP;QAFC;MADL;IAHM,CAAhB;IAYAV,KAAK,CAACW,SAAN,CAAgBd,IAAhB,GAAuBG,KAAK,CAACW,SAAN,CAAgBC,MAAhB,CAAuB,OAAvB,EAAgC;MACrD,cAAc,CACZR,SADY,EAEZ;QACE;QACA;QACAC,OAAO,EAAEC,MAAM,CACbJ,aAAa,GAAG,+BAA+BC,MADlC,CAHjB;QAMEI,UAAU,EAAE,IANd;QAOEC,MAAM,EAAEJ,SAAS,CAACI;MAPpB,CAFY,CADuC;MAarDK,OAAO,EAAEZ,QAb4C;MAcrDa,QAAQ,EACN;IAfmD,CAAhC,CAAvB;IAiBAd,KAAK,CAACW,SAAN,CAAgBI,YAAhB,CAA6B,MAA7B,EAAqC,QAArC,EAA+C;MAC7C,kBAAkB;QAChBV,OAAO,EACL,kEAFc;QAGhBW,MAAM,EAAE,IAHQ;QAIhBR,MAAM,EAAE;UACNS,aAAa,EAAE;YACbZ,OAAO,EACL,4DAFW;YAGbE,UAAU,EAAE,IAHC;YAIbC,MAAM,EAAE;cACNE,WAAW,EAAE,YADP;cAENQ,UAAU,EAAE;gBACVb,OAAO,EAAE,SADC;gBAEVG,MAAM,EAAER,KAAK,CAACW,SAAN,CAAgBd;cAFd;YAFN;UAJK,CADT;UAaNsB,MAAM,EAAE;QAbF;MAJQ,CAD2B;MAqB7CA,MAAM,EAAEC;IArBqC,CAA/C;IAuBApB,KAAK,CAACW,SAAN,CAAgBI,YAAhB,CAA6B,MAA7B,EAAqC,YAArC,EAAmD;MACjDM,QAAQ,EAAE;QACRhB,OAAO,EAAE,MADD;QAERiB,KAAK,EAAE;MAFC;IADuC,CAAnD;IAMAtB,KAAK,CAACW,SAAN,CAAgBI,YAAhB,CAA6B,MAA7B,EAAqC,YAArC,EAAmD;MACjDQ,QAAQ,EAAE;QACRlB,OAAO,EACL,qEAFM;QAGRG,MAAM,EAAE;UACN,cAAcJ,SADR;UAENS,OAAO,EAAEZ,QAFH;UAGNS,WAAW,EAAE,WAHP;UAINI,QAAQ,EAAE;QAJJ;MAHA;IADuC,CAAnD;EAYD,CA7EA,EA6EEd,KA7EF;AA8EF"},"metadata":{},"sourceType":"script"}