{"ast":null,"code":"'use strict';\n\nvar refractorScheme = require('./scheme.js');\n\nmodule.exports = lilypond;\nlilypond.displayName = 'lilypond';\nlilypond.aliases = [];\n\nfunction lilypond(Prism) {\n  Prism.register(refractorScheme);\n\n  (function (Prism) {\n    var schemeExpression = /\\((?:[^();\"#\\\\]|\\\\[\\s\\S]|;.*(?!.)|\"(?:[^\"\\\\]|\\\\.)*\"|#(?:\\{(?:(?!#\\})[\\s\\S])*#\\}|[^{])|<expr>)*\\)/.source; // allow for up to pow(2, recursivenessLog2) many levels of recursive brace expressions\n    // For some reason, this can't be 4\n\n    var recursivenessLog2 = 5;\n\n    for (var i = 0; i < recursivenessLog2; i++) {\n      schemeExpression = schemeExpression.replace(/<expr>/g, function () {\n        return schemeExpression;\n      });\n    }\n\n    schemeExpression = schemeExpression.replace(/<expr>/g, /[^\\s\\S]/.source);\n    var lilypond = Prism.languages.lilypond = {\n      comment: /%(?:(?!\\{).*|\\{[\\s\\S]*?%\\})/,\n      'embedded-scheme': {\n        pattern: RegExp(/(^|[=\\s])#(?:\"(?:[^\"\\\\]|\\\\.)*\"|[^\\s()\"]*(?:[^\\s()]|<expr>))/.source.replace(/<expr>/g, function () {\n          return schemeExpression;\n        }), 'm'),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          scheme: {\n            pattern: /^(#)[\\s\\S]+$/,\n            lookbehind: true,\n            alias: 'language-scheme',\n            inside: {\n              'embedded-lilypond': {\n                pattern: /#\\{[\\s\\S]*?#\\}/,\n                greedy: true,\n                inside: {\n                  punctuation: /^#\\{|#\\}$/,\n                  lilypond: {\n                    pattern: /[\\s\\S]+/,\n                    alias: 'language-lilypond',\n                    inside: null // see below\n\n                  }\n                }\n              },\n              rest: Prism.languages.scheme\n            }\n          },\n          punctuation: /#/\n        }\n      },\n      string: {\n        pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n        greedy: true\n      },\n      'class-name': {\n        pattern: /(\\\\new\\s+)[\\w-]+/,\n        lookbehind: true\n      },\n      keyword: {\n        pattern: /\\\\[a-z][-\\w]*/i,\n        inside: {\n          punctuation: /^\\\\/\n        }\n      },\n      operator: /[=|]|<<|>>/,\n      punctuation: {\n        pattern: /(^|[a-z\\d])(?:'+|,+|[_^]?-[_^]?(?:[-+^!>._]|(?=\\d))|[_^]\\.?|[.!])|[{}()[\\]<>^~]|\\\\[()[\\]<>\\\\!]|--|__/,\n        lookbehind: true\n      },\n      number: /\\b\\d+(?:\\/\\d+)?\\b/\n    };\n    lilypond['embedded-scheme'].inside['scheme'].inside['embedded-lilypond'].inside['lilypond'].inside = lilypond;\n    Prism.languages.ly = lilypond;\n  })(Prism);\n}","map":{"version":3,"names":["refractorScheme","require","module","exports","lilypond","displayName","aliases","Prism","register","schemeExpression","source","recursivenessLog2","i","replace","languages","comment","pattern","RegExp","lookbehind","greedy","inside","scheme","alias","punctuation","rest","string","keyword","operator","number","ly"],"sources":["C:/Users/ayeh8/Documents/Plant-Buddy/node_modules/refractor/lang/lilypond.js"],"sourcesContent":["'use strict'\r\nvar refractorScheme = require('./scheme.js')\r\nmodule.exports = lilypond\r\nlilypond.displayName = 'lilypond'\r\nlilypond.aliases = []\r\nfunction lilypond(Prism) {\r\n  Prism.register(refractorScheme)\r\n  ;(function (Prism) {\r\n    var schemeExpression =\r\n      /\\((?:[^();\"#\\\\]|\\\\[\\s\\S]|;.*(?!.)|\"(?:[^\"\\\\]|\\\\.)*\"|#(?:\\{(?:(?!#\\})[\\s\\S])*#\\}|[^{])|<expr>)*\\)/\r\n        .source // allow for up to pow(2, recursivenessLog2) many levels of recursive brace expressions\r\n    // For some reason, this can't be 4\r\n    var recursivenessLog2 = 5\r\n    for (var i = 0; i < recursivenessLog2; i++) {\r\n      schemeExpression = schemeExpression.replace(/<expr>/g, function () {\r\n        return schemeExpression\r\n      })\r\n    }\r\n    schemeExpression = schemeExpression.replace(/<expr>/g, /[^\\s\\S]/.source)\r\n    var lilypond = (Prism.languages.lilypond = {\r\n      comment: /%(?:(?!\\{).*|\\{[\\s\\S]*?%\\})/,\r\n      'embedded-scheme': {\r\n        pattern: RegExp(\r\n          /(^|[=\\s])#(?:\"(?:[^\"\\\\]|\\\\.)*\"|[^\\s()\"]*(?:[^\\s()]|<expr>))/.source.replace(\r\n            /<expr>/g,\r\n            function () {\r\n              return schemeExpression\r\n            }\r\n          ),\r\n          'm'\r\n        ),\r\n        lookbehind: true,\r\n        greedy: true,\r\n        inside: {\r\n          scheme: {\r\n            pattern: /^(#)[\\s\\S]+$/,\r\n            lookbehind: true,\r\n            alias: 'language-scheme',\r\n            inside: {\r\n              'embedded-lilypond': {\r\n                pattern: /#\\{[\\s\\S]*?#\\}/,\r\n                greedy: true,\r\n                inside: {\r\n                  punctuation: /^#\\{|#\\}$/,\r\n                  lilypond: {\r\n                    pattern: /[\\s\\S]+/,\r\n                    alias: 'language-lilypond',\r\n                    inside: null // see below\r\n                  }\r\n                }\r\n              },\r\n              rest: Prism.languages.scheme\r\n            }\r\n          },\r\n          punctuation: /#/\r\n        }\r\n      },\r\n      string: {\r\n        pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\r\n        greedy: true\r\n      },\r\n      'class-name': {\r\n        pattern: /(\\\\new\\s+)[\\w-]+/,\r\n        lookbehind: true\r\n      },\r\n      keyword: {\r\n        pattern: /\\\\[a-z][-\\w]*/i,\r\n        inside: {\r\n          punctuation: /^\\\\/\r\n        }\r\n      },\r\n      operator: /[=|]|<<|>>/,\r\n      punctuation: {\r\n        pattern:\r\n          /(^|[a-z\\d])(?:'+|,+|[_^]?-[_^]?(?:[-+^!>._]|(?=\\d))|[_^]\\.?|[.!])|[{}()[\\]<>^~]|\\\\[()[\\]<>\\\\!]|--|__/,\r\n        lookbehind: true\r\n      },\r\n      number: /\\b\\d+(?:\\/\\d+)?\\b/\r\n    })\r\n    lilypond['embedded-scheme'].inside['scheme'].inside[\r\n      'embedded-lilypond'\r\n    ].inside['lilypond'].inside = lilypond\r\n    Prism.languages.ly = lilypond\r\n  })(Prism)\r\n}\r\n"],"mappings":"AAAA;;AACA,IAAIA,eAAe,GAAGC,OAAO,CAAC,aAAD,CAA7B;;AACAC,MAAM,CAACC,OAAP,GAAiBC,QAAjB;AACAA,QAAQ,CAACC,WAAT,GAAuB,UAAvB;AACAD,QAAQ,CAACE,OAAT,GAAmB,EAAnB;;AACA,SAASF,QAAT,CAAkBG,KAAlB,EAAyB;EACvBA,KAAK,CAACC,QAAN,CAAeR,eAAf;;EACC,CAAC,UAAUO,KAAV,EAAiB;IACjB,IAAIE,gBAAgB,GAClB,mGACGC,MAFL,CADiB,CAGL;IACZ;;IACA,IAAIC,iBAAiB,GAAG,CAAxB;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,iBAApB,EAAuCC,CAAC,EAAxC,EAA4C;MAC1CH,gBAAgB,GAAGA,gBAAgB,CAACI,OAAjB,CAAyB,SAAzB,EAAoC,YAAY;QACjE,OAAOJ,gBAAP;MACD,CAFkB,CAAnB;IAGD;;IACDA,gBAAgB,GAAGA,gBAAgB,CAACI,OAAjB,CAAyB,SAAzB,EAAoC,UAAUH,MAA9C,CAAnB;IACA,IAAIN,QAAQ,GAAIG,KAAK,CAACO,SAAN,CAAgBV,QAAhB,GAA2B;MACzCW,OAAO,EAAE,6BADgC;MAEzC,mBAAmB;QACjBC,OAAO,EAAEC,MAAM,CACb,8DAA8DP,MAA9D,CAAqEG,OAArE,CACE,SADF,EAEE,YAAY;UACV,OAAOJ,gBAAP;QACD,CAJH,CADa,EAOb,GAPa,CADE;QAUjBS,UAAU,EAAE,IAVK;QAWjBC,MAAM,EAAE,IAXS;QAYjBC,MAAM,EAAE;UACNC,MAAM,EAAE;YACNL,OAAO,EAAE,cADH;YAENE,UAAU,EAAE,IAFN;YAGNI,KAAK,EAAE,iBAHD;YAINF,MAAM,EAAE;cACN,qBAAqB;gBACnBJ,OAAO,EAAE,gBADU;gBAEnBG,MAAM,EAAE,IAFW;gBAGnBC,MAAM,EAAE;kBACNG,WAAW,EAAE,WADP;kBAENnB,QAAQ,EAAE;oBACRY,OAAO,EAAE,SADD;oBAERM,KAAK,EAAE,mBAFC;oBAGRF,MAAM,EAAE,IAHA,CAGK;;kBAHL;gBAFJ;cAHW,CADf;cAaNI,IAAI,EAAEjB,KAAK,CAACO,SAAN,CAAgBO;YAbhB;UAJF,CADF;UAqBNE,WAAW,EAAE;QArBP;MAZS,CAFsB;MAsCzCE,MAAM,EAAE;QACNT,OAAO,EAAE,mBADH;QAENG,MAAM,EAAE;MAFF,CAtCiC;MA0CzC,cAAc;QACZH,OAAO,EAAE,kBADG;QAEZE,UAAU,EAAE;MAFA,CA1C2B;MA8CzCQ,OAAO,EAAE;QACPV,OAAO,EAAE,gBADF;QAEPI,MAAM,EAAE;UACNG,WAAW,EAAE;QADP;MAFD,CA9CgC;MAoDzCI,QAAQ,EAAE,YApD+B;MAqDzCJ,WAAW,EAAE;QACXP,OAAO,EACL,sGAFS;QAGXE,UAAU,EAAE;MAHD,CArD4B;MA0DzCU,MAAM,EAAE;IA1DiC,CAA3C;IA4DAxB,QAAQ,CAAC,iBAAD,CAAR,CAA4BgB,MAA5B,CAAmC,QAAnC,EAA6CA,MAA7C,CACE,mBADF,EAEEA,MAFF,CAES,UAFT,EAEqBA,MAFrB,GAE8BhB,QAF9B;IAGAG,KAAK,CAACO,SAAN,CAAgBe,EAAhB,GAAqBzB,QAArB;EACD,CA5EA,EA4EEG,KA5EF;AA6EF"},"metadata":{},"sourceType":"script"}