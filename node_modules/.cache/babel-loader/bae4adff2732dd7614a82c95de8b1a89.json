{"ast":null,"code":"/*\r\nLanguage: Clojure\r\nDescription: Clojure syntax (based on lisp.js)\r\nAuthor: mfornos\r\nWebsite: https://clojure.org\r\nCategory: lisp\r\n*/\n\n/** @type LanguageFn */\nfunction clojure(hljs) {\n  const SYMBOLSTART = 'a-zA-Z_\\\\-!.?+*=<>&#\\'';\n  const SYMBOL_RE = '[' + SYMBOLSTART + '][' + SYMBOLSTART + '0-9/;:]*';\n  const globals = 'def defonce defprotocol defstruct defmulti defmethod defn- defn defmacro deftype defrecord';\n  const keywords = {\n    $pattern: SYMBOL_RE,\n    'builtin-name': // Clojure keywords\n    globals + ' ' + 'cond apply if-not if-let if not not= =|0 <|0 >|0 <=|0 >=|0 ==|0 +|0 /|0 *|0 -|0 rem ' + 'quot neg? pos? delay? symbol? keyword? true? false? integer? empty? coll? list? ' + 'set? ifn? fn? associative? sequential? sorted? counted? reversible? number? decimal? ' + 'class? distinct? isa? float? rational? reduced? ratio? odd? even? char? seq? vector? ' + 'string? map? nil? contains? zero? instance? not-every? not-any? libspec? -> ->> .. . ' + 'inc compare do dotimes mapcat take remove take-while drop letfn drop-last take-last ' + 'drop-while while intern condp case reduced cycle split-at split-with repeat replicate ' + 'iterate range merge zipmap declare line-seq sort comparator sort-by dorun doall nthnext ' + 'nthrest partition eval doseq await await-for let agent atom send send-off release-pending-sends ' + 'add-watch mapv filterv remove-watch agent-error restart-agent set-error-handler error-handler ' + 'set-error-mode! error-mode shutdown-agents quote var fn loop recur throw try monitor-enter ' + 'monitor-exit macroexpand macroexpand-1 for dosync and or ' + 'when when-not when-let comp juxt partial sequence memoize constantly complement identity assert ' + 'peek pop doto proxy first rest cons cast coll last butlast ' + 'sigs reify second ffirst fnext nfirst nnext meta with-meta ns in-ns create-ns import ' + 'refer keys select-keys vals key val rseq name namespace promise into transient persistent! conj! ' + 'assoc! dissoc! pop! disj! use class type num float double short byte boolean bigint biginteger ' + 'bigdec print-method print-dup throw-if printf format load compile get-in update-in pr pr-on newline ' + 'flush read slurp read-line subvec with-open memfn time re-find re-groups rand-int rand mod locking ' + 'assert-valid-fdecl alias resolve ref deref refset swap! reset! set-validator! compare-and-set! alter-meta! ' + 'reset-meta! commute get-validator alter ref-set ref-history-count ref-min-history ref-max-history ensure sync io! ' + 'new next conj set! to-array future future-call into-array aset gen-class reduce map filter find empty ' + 'hash-map hash-set sorted-map sorted-map-by sorted-set sorted-set-by vec vector seq flatten reverse assoc dissoc list ' + 'disj get union difference intersection extend extend-type extend-protocol int nth delay count concat chunk chunk-buffer ' + 'chunk-append chunk-first chunk-rest max min dec unchecked-inc-int unchecked-inc unchecked-dec-inc unchecked-dec unchecked-negate ' + 'unchecked-add-int unchecked-add unchecked-subtract-int unchecked-subtract chunk-next chunk-cons chunked-seq? prn vary-meta ' + 'lazy-seq spread list* str find-keyword keyword symbol gensym force rationalize'\n  };\n  const SIMPLE_NUMBER_RE = '[-+]?\\\\d+(\\\\.\\\\d+)?';\n  const SYMBOL = {\n    begin: SYMBOL_RE,\n    relevance: 0\n  };\n  const NUMBER = {\n    className: 'number',\n    begin: SIMPLE_NUMBER_RE,\n    relevance: 0\n  };\n  const STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, {\n    illegal: null\n  });\n  const COMMENT = hljs.COMMENT(';', '$', {\n    relevance: 0\n  });\n  const LITERAL = {\n    className: 'literal',\n    begin: /\\b(true|false|nil)\\b/\n  };\n  const COLLECTION = {\n    begin: '[\\\\[\\\\{]',\n    end: '[\\\\]\\\\}]'\n  };\n  const HINT = {\n    className: 'comment',\n    begin: '\\\\^' + SYMBOL_RE\n  };\n  const HINT_COL = hljs.COMMENT('\\\\^\\\\{', '\\\\}');\n  const KEY = {\n    className: 'symbol',\n    begin: '[:]{1,2}' + SYMBOL_RE\n  };\n  const LIST = {\n    begin: '\\\\(',\n    end: '\\\\)'\n  };\n  const BODY = {\n    endsWithParent: true,\n    relevance: 0\n  };\n  const NAME = {\n    keywords: keywords,\n    className: 'name',\n    begin: SYMBOL_RE,\n    relevance: 0,\n    starts: BODY\n  };\n  const DEFAULT_CONTAINS = [LIST, STRING, HINT, HINT_COL, COMMENT, KEY, COLLECTION, NUMBER, LITERAL, SYMBOL];\n  const GLOBAL = {\n    beginKeywords: globals,\n    lexemes: SYMBOL_RE,\n    end: '(\\\\[|#|\\\\d|\"|:|\\\\{|\\\\)|\\\\(|$)',\n    contains: [{\n      className: 'title',\n      begin: SYMBOL_RE,\n      relevance: 0,\n      excludeEnd: true,\n      // we can only have a single title\n      endsParent: true\n    }].concat(DEFAULT_CONTAINS)\n  };\n  LIST.contains = [hljs.COMMENT('comment', ''), GLOBAL, NAME, BODY];\n  BODY.contains = DEFAULT_CONTAINS;\n  COLLECTION.contains = DEFAULT_CONTAINS;\n  HINT_COL.contains = [COLLECTION];\n  return {\n    name: 'Clojure',\n    aliases: ['clj'],\n    illegal: /\\S/,\n    contains: [LIST, STRING, HINT, HINT_COL, COMMENT, KEY, COLLECTION, NUMBER, LITERAL]\n  };\n}\n\nmodule.exports = clojure;","map":{"version":3,"names":["clojure","hljs","SYMBOLSTART","SYMBOL_RE","globals","keywords","$pattern","SIMPLE_NUMBER_RE","SYMBOL","begin","relevance","NUMBER","className","STRING","inherit","QUOTE_STRING_MODE","illegal","COMMENT","LITERAL","COLLECTION","end","HINT","HINT_COL","KEY","LIST","BODY","endsWithParent","NAME","starts","DEFAULT_CONTAINS","GLOBAL","beginKeywords","lexemes","contains","excludeEnd","endsParent","concat","name","aliases","module","exports"],"sources":["C:/Users/ayeh8/Documents/Plant-Buddy/node_modules/highlight.js/lib/languages/clojure.js"],"sourcesContent":["/*\r\nLanguage: Clojure\r\nDescription: Clojure syntax (based on lisp.js)\r\nAuthor: mfornos\r\nWebsite: https://clojure.org\r\nCategory: lisp\r\n*/\r\n\r\n/** @type LanguageFn */\r\nfunction clojure(hljs) {\r\n  const SYMBOLSTART = 'a-zA-Z_\\\\-!.?+*=<>&#\\'';\r\n  const SYMBOL_RE = '[' + SYMBOLSTART + '][' + SYMBOLSTART + '0-9/;:]*';\r\n  const globals = 'def defonce defprotocol defstruct defmulti defmethod defn- defn defmacro deftype defrecord';\r\n  const keywords = {\r\n    $pattern: SYMBOL_RE,\r\n    'builtin-name':\r\n      // Clojure keywords\r\n      globals + ' ' +\r\n      'cond apply if-not if-let if not not= =|0 <|0 >|0 <=|0 >=|0 ==|0 +|0 /|0 *|0 -|0 rem ' +\r\n      'quot neg? pos? delay? symbol? keyword? true? false? integer? empty? coll? list? ' +\r\n      'set? ifn? fn? associative? sequential? sorted? counted? reversible? number? decimal? ' +\r\n      'class? distinct? isa? float? rational? reduced? ratio? odd? even? char? seq? vector? ' +\r\n      'string? map? nil? contains? zero? instance? not-every? not-any? libspec? -> ->> .. . ' +\r\n      'inc compare do dotimes mapcat take remove take-while drop letfn drop-last take-last ' +\r\n      'drop-while while intern condp case reduced cycle split-at split-with repeat replicate ' +\r\n      'iterate range merge zipmap declare line-seq sort comparator sort-by dorun doall nthnext ' +\r\n      'nthrest partition eval doseq await await-for let agent atom send send-off release-pending-sends ' +\r\n      'add-watch mapv filterv remove-watch agent-error restart-agent set-error-handler error-handler ' +\r\n      'set-error-mode! error-mode shutdown-agents quote var fn loop recur throw try monitor-enter ' +\r\n      'monitor-exit macroexpand macroexpand-1 for dosync and or ' +\r\n      'when when-not when-let comp juxt partial sequence memoize constantly complement identity assert ' +\r\n      'peek pop doto proxy first rest cons cast coll last butlast ' +\r\n      'sigs reify second ffirst fnext nfirst nnext meta with-meta ns in-ns create-ns import ' +\r\n      'refer keys select-keys vals key val rseq name namespace promise into transient persistent! conj! ' +\r\n      'assoc! dissoc! pop! disj! use class type num float double short byte boolean bigint biginteger ' +\r\n      'bigdec print-method print-dup throw-if printf format load compile get-in update-in pr pr-on newline ' +\r\n      'flush read slurp read-line subvec with-open memfn time re-find re-groups rand-int rand mod locking ' +\r\n      'assert-valid-fdecl alias resolve ref deref refset swap! reset! set-validator! compare-and-set! alter-meta! ' +\r\n      'reset-meta! commute get-validator alter ref-set ref-history-count ref-min-history ref-max-history ensure sync io! ' +\r\n      'new next conj set! to-array future future-call into-array aset gen-class reduce map filter find empty ' +\r\n      'hash-map hash-set sorted-map sorted-map-by sorted-set sorted-set-by vec vector seq flatten reverse assoc dissoc list ' +\r\n      'disj get union difference intersection extend extend-type extend-protocol int nth delay count concat chunk chunk-buffer ' +\r\n      'chunk-append chunk-first chunk-rest max min dec unchecked-inc-int unchecked-inc unchecked-dec-inc unchecked-dec unchecked-negate ' +\r\n      'unchecked-add-int unchecked-add unchecked-subtract-int unchecked-subtract chunk-next chunk-cons chunked-seq? prn vary-meta ' +\r\n      'lazy-seq spread list* str find-keyword keyword symbol gensym force rationalize'\r\n  };\r\n\r\n  const SIMPLE_NUMBER_RE = '[-+]?\\\\d+(\\\\.\\\\d+)?';\r\n\r\n  const SYMBOL = {\r\n    begin: SYMBOL_RE,\r\n    relevance: 0\r\n  };\r\n  const NUMBER = {\r\n    className: 'number',\r\n    begin: SIMPLE_NUMBER_RE,\r\n    relevance: 0\r\n  };\r\n  const STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, {\r\n    illegal: null\r\n  });\r\n  const COMMENT = hljs.COMMENT(\r\n    ';',\r\n    '$',\r\n    {\r\n      relevance: 0\r\n    }\r\n  );\r\n  const LITERAL = {\r\n    className: 'literal',\r\n    begin: /\\b(true|false|nil)\\b/\r\n  };\r\n  const COLLECTION = {\r\n    begin: '[\\\\[\\\\{]',\r\n    end: '[\\\\]\\\\}]'\r\n  };\r\n  const HINT = {\r\n    className: 'comment',\r\n    begin: '\\\\^' + SYMBOL_RE\r\n  };\r\n  const HINT_COL = hljs.COMMENT('\\\\^\\\\{', '\\\\}');\r\n  const KEY = {\r\n    className: 'symbol',\r\n    begin: '[:]{1,2}' + SYMBOL_RE\r\n  };\r\n  const LIST = {\r\n    begin: '\\\\(',\r\n    end: '\\\\)'\r\n  };\r\n  const BODY = {\r\n    endsWithParent: true,\r\n    relevance: 0\r\n  };\r\n  const NAME = {\r\n    keywords: keywords,\r\n    className: 'name',\r\n    begin: SYMBOL_RE,\r\n    relevance: 0,\r\n    starts: BODY\r\n  };\r\n  const DEFAULT_CONTAINS = [\r\n    LIST,\r\n    STRING,\r\n    HINT,\r\n    HINT_COL,\r\n    COMMENT,\r\n    KEY,\r\n    COLLECTION,\r\n    NUMBER,\r\n    LITERAL,\r\n    SYMBOL\r\n  ];\r\n\r\n  const GLOBAL = {\r\n    beginKeywords: globals,\r\n    lexemes: SYMBOL_RE,\r\n    end: '(\\\\[|#|\\\\d|\"|:|\\\\{|\\\\)|\\\\(|$)',\r\n    contains: [\r\n      {\r\n        className: 'title',\r\n        begin: SYMBOL_RE,\r\n        relevance: 0,\r\n        excludeEnd: true,\r\n        // we can only have a single title\r\n        endsParent: true\r\n      }\r\n    ].concat(DEFAULT_CONTAINS)\r\n  };\r\n\r\n  LIST.contains = [\r\n    hljs.COMMENT('comment', ''),\r\n    GLOBAL,\r\n    NAME,\r\n    BODY\r\n  ];\r\n  BODY.contains = DEFAULT_CONTAINS;\r\n  COLLECTION.contains = DEFAULT_CONTAINS;\r\n  HINT_COL.contains = [ COLLECTION ];\r\n\r\n  return {\r\n    name: 'Clojure',\r\n    aliases: [ 'clj' ],\r\n    illegal: /\\S/,\r\n    contains: [\r\n      LIST,\r\n      STRING,\r\n      HINT,\r\n      HINT_COL,\r\n      COMMENT,\r\n      KEY,\r\n      COLLECTION,\r\n      NUMBER,\r\n      LITERAL\r\n    ]\r\n  };\r\n}\r\n\r\nmodule.exports = clojure;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}