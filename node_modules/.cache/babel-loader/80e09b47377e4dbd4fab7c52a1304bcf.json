{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDefaultPerfAnalysis\n */\n'use strict';\n\nvar assign = require('./Object.assign'); // Don't try to save users less than 1.2ms (a number I made up)\n\n\nvar DONT_CARE_THRESHOLD = 1.2;\nvar DOM_OPERATION_TYPES = {\n  '_mountImageIntoNode': 'set innerHTML',\n  INSERT_MARKUP: 'set innerHTML',\n  MOVE_EXISTING: 'move',\n  REMOVE_NODE: 'remove',\n  SET_MARKUP: 'set innerHTML',\n  TEXT_CONTENT: 'set textContent',\n  'setValueForProperty': 'update attribute',\n  'setValueForAttribute': 'update attribute',\n  'deleteValueForProperty': 'remove attribute',\n  'setValueForStyles': 'update styles',\n  'replaceNodeWithMarkup': 'replace',\n  'updateTextContent': 'set textContent'\n};\n\nfunction getTotalTime(measurements) {\n  // TODO: return number of DOM ops? could be misleading.\n  // TODO: measure dropped frames after reconcile?\n  // TODO: log total time of each reconcile and the top-level component\n  // class that triggered it.\n  var totalTime = 0;\n\n  for (var i = 0; i < measurements.length; i++) {\n    var measurement = measurements[i];\n    totalTime += measurement.totalTime;\n  }\n\n  return totalTime;\n}\n\nfunction getDOMSummary(measurements) {\n  var items = [];\n  measurements.forEach(function (measurement) {\n    Object.keys(measurement.writes).forEach(function (id) {\n      measurement.writes[id].forEach(function (write) {\n        items.push({\n          id: id,\n          type: DOM_OPERATION_TYPES[write.type] || write.type,\n          args: write.args\n        });\n      });\n    });\n  });\n  return items;\n}\n\nfunction getExclusiveSummary(measurements) {\n  var candidates = {};\n  var displayName;\n\n  for (var i = 0; i < measurements.length; i++) {\n    var measurement = measurements[i];\n    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);\n\n    for (var id in allIDs) {\n      displayName = measurement.displayNames[id].current;\n      candidates[displayName] = candidates[displayName] || {\n        componentName: displayName,\n        inclusive: 0,\n        exclusive: 0,\n        render: 0,\n        count: 0\n      };\n\n      if (measurement.render[id]) {\n        candidates[displayName].render += measurement.render[id];\n      }\n\n      if (measurement.exclusive[id]) {\n        candidates[displayName].exclusive += measurement.exclusive[id];\n      }\n\n      if (measurement.inclusive[id]) {\n        candidates[displayName].inclusive += measurement.inclusive[id];\n      }\n\n      if (measurement.counts[id]) {\n        candidates[displayName].count += measurement.counts[id];\n      }\n    }\n  } // Now make a sorted array with the results.\n\n\n  var arr = [];\n\n  for (displayName in candidates) {\n    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {\n      arr.push(candidates[displayName]);\n    }\n  }\n\n  arr.sort(function (a, b) {\n    return b.exclusive - a.exclusive;\n  });\n  return arr;\n}\n\nfunction getInclusiveSummary(measurements, onlyClean) {\n  var candidates = {};\n  var inclusiveKey;\n\n  for (var i = 0; i < measurements.length; i++) {\n    var measurement = measurements[i];\n    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);\n    var cleanComponents;\n\n    if (onlyClean) {\n      cleanComponents = getUnchangedComponents(measurement);\n    }\n\n    for (var id in allIDs) {\n      if (onlyClean && !cleanComponents[id]) {\n        continue;\n      }\n\n      var displayName = measurement.displayNames[id]; // Inclusive time is not useful for many components without knowing where\n      // they are instantiated. So we aggregate inclusive time with both the\n      // owner and current displayName as the key.\n\n      inclusiveKey = displayName.owner + ' > ' + displayName.current;\n      candidates[inclusiveKey] = candidates[inclusiveKey] || {\n        componentName: inclusiveKey,\n        time: 0,\n        count: 0\n      };\n\n      if (measurement.inclusive[id]) {\n        candidates[inclusiveKey].time += measurement.inclusive[id];\n      }\n\n      if (measurement.counts[id]) {\n        candidates[inclusiveKey].count += measurement.counts[id];\n      }\n    }\n  } // Now make a sorted array with the results.\n\n\n  var arr = [];\n\n  for (inclusiveKey in candidates) {\n    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {\n      arr.push(candidates[inclusiveKey]);\n    }\n  }\n\n  arr.sort(function (a, b) {\n    return b.time - a.time;\n  });\n  return arr;\n}\n\nfunction getUnchangedComponents(measurement) {\n  // For a given reconcile, look at which components did not actually\n  // render anything to the DOM and return a mapping of their ID to\n  // the amount of time it took to render the entire subtree.\n  var cleanComponents = {};\n  var dirtyLeafIDs = Object.keys(measurement.writes);\n  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);\n\n  for (var id in allIDs) {\n    var isDirty = false; // For each component that rendered, see if a component that triggered\n    // a DOM op is in its subtree.\n\n    for (var i = 0; i < dirtyLeafIDs.length; i++) {\n      if (dirtyLeafIDs[i].indexOf(id) === 0) {\n        isDirty = true;\n        break;\n      }\n    } // check if component newly created\n\n\n    if (measurement.created[id]) {\n      isDirty = true;\n    }\n\n    if (!isDirty && measurement.counts[id] > 0) {\n      cleanComponents[id] = true;\n    }\n  }\n\n  return cleanComponents;\n}\n\nvar ReactDefaultPerfAnalysis = {\n  getExclusiveSummary: getExclusiveSummary,\n  getInclusiveSummary: getInclusiveSummary,\n  getDOMSummary: getDOMSummary,\n  getTotalTime: getTotalTime\n};\nmodule.exports = ReactDefaultPerfAnalysis;","map":{"version":3,"names":["assign","require","DONT_CARE_THRESHOLD","DOM_OPERATION_TYPES","INSERT_MARKUP","MOVE_EXISTING","REMOVE_NODE","SET_MARKUP","TEXT_CONTENT","getTotalTime","measurements","totalTime","i","length","measurement","getDOMSummary","items","forEach","Object","keys","writes","id","write","push","type","args","getExclusiveSummary","candidates","displayName","allIDs","exclusive","inclusive","displayNames","current","componentName","render","count","counts","arr","sort","a","b","getInclusiveSummary","onlyClean","inclusiveKey","cleanComponents","getUnchangedComponents","owner","time","dirtyLeafIDs","isDirty","indexOf","created","ReactDefaultPerfAnalysis","module","exports"],"sources":["/Users/aaronyeh/Downloads/Plant Buddy/node_modules/react-router-link/node_modules/react/lib/ReactDefaultPerfAnalysis.js"],"sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDefaultPerfAnalysis\n */\n\n'use strict';\n\nvar assign = require('./Object.assign');\n\n// Don't try to save users less than 1.2ms (a number I made up)\nvar DONT_CARE_THRESHOLD = 1.2;\nvar DOM_OPERATION_TYPES = {\n  '_mountImageIntoNode': 'set innerHTML',\n  INSERT_MARKUP: 'set innerHTML',\n  MOVE_EXISTING: 'move',\n  REMOVE_NODE: 'remove',\n  SET_MARKUP: 'set innerHTML',\n  TEXT_CONTENT: 'set textContent',\n  'setValueForProperty': 'update attribute',\n  'setValueForAttribute': 'update attribute',\n  'deleteValueForProperty': 'remove attribute',\n  'setValueForStyles': 'update styles',\n  'replaceNodeWithMarkup': 'replace',\n  'updateTextContent': 'set textContent'\n};\n\nfunction getTotalTime(measurements) {\n  // TODO: return number of DOM ops? could be misleading.\n  // TODO: measure dropped frames after reconcile?\n  // TODO: log total time of each reconcile and the top-level component\n  // class that triggered it.\n  var totalTime = 0;\n  for (var i = 0; i < measurements.length; i++) {\n    var measurement = measurements[i];\n    totalTime += measurement.totalTime;\n  }\n  return totalTime;\n}\n\nfunction getDOMSummary(measurements) {\n  var items = [];\n  measurements.forEach(function (measurement) {\n    Object.keys(measurement.writes).forEach(function (id) {\n      measurement.writes[id].forEach(function (write) {\n        items.push({\n          id: id,\n          type: DOM_OPERATION_TYPES[write.type] || write.type,\n          args: write.args\n        });\n      });\n    });\n  });\n  return items;\n}\n\nfunction getExclusiveSummary(measurements) {\n  var candidates = {};\n  var displayName;\n\n  for (var i = 0; i < measurements.length; i++) {\n    var measurement = measurements[i];\n    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);\n\n    for (var id in allIDs) {\n      displayName = measurement.displayNames[id].current;\n\n      candidates[displayName] = candidates[displayName] || {\n        componentName: displayName,\n        inclusive: 0,\n        exclusive: 0,\n        render: 0,\n        count: 0\n      };\n      if (measurement.render[id]) {\n        candidates[displayName].render += measurement.render[id];\n      }\n      if (measurement.exclusive[id]) {\n        candidates[displayName].exclusive += measurement.exclusive[id];\n      }\n      if (measurement.inclusive[id]) {\n        candidates[displayName].inclusive += measurement.inclusive[id];\n      }\n      if (measurement.counts[id]) {\n        candidates[displayName].count += measurement.counts[id];\n      }\n    }\n  }\n\n  // Now make a sorted array with the results.\n  var arr = [];\n  for (displayName in candidates) {\n    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {\n      arr.push(candidates[displayName]);\n    }\n  }\n\n  arr.sort(function (a, b) {\n    return b.exclusive - a.exclusive;\n  });\n\n  return arr;\n}\n\nfunction getInclusiveSummary(measurements, onlyClean) {\n  var candidates = {};\n  var inclusiveKey;\n\n  for (var i = 0; i < measurements.length; i++) {\n    var measurement = measurements[i];\n    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);\n    var cleanComponents;\n\n    if (onlyClean) {\n      cleanComponents = getUnchangedComponents(measurement);\n    }\n\n    for (var id in allIDs) {\n      if (onlyClean && !cleanComponents[id]) {\n        continue;\n      }\n\n      var displayName = measurement.displayNames[id];\n\n      // Inclusive time is not useful for many components without knowing where\n      // they are instantiated. So we aggregate inclusive time with both the\n      // owner and current displayName as the key.\n      inclusiveKey = displayName.owner + ' > ' + displayName.current;\n\n      candidates[inclusiveKey] = candidates[inclusiveKey] || {\n        componentName: inclusiveKey,\n        time: 0,\n        count: 0\n      };\n\n      if (measurement.inclusive[id]) {\n        candidates[inclusiveKey].time += measurement.inclusive[id];\n      }\n      if (measurement.counts[id]) {\n        candidates[inclusiveKey].count += measurement.counts[id];\n      }\n    }\n  }\n\n  // Now make a sorted array with the results.\n  var arr = [];\n  for (inclusiveKey in candidates) {\n    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {\n      arr.push(candidates[inclusiveKey]);\n    }\n  }\n\n  arr.sort(function (a, b) {\n    return b.time - a.time;\n  });\n\n  return arr;\n}\n\nfunction getUnchangedComponents(measurement) {\n  // For a given reconcile, look at which components did not actually\n  // render anything to the DOM and return a mapping of their ID to\n  // the amount of time it took to render the entire subtree.\n  var cleanComponents = {};\n  var dirtyLeafIDs = Object.keys(measurement.writes);\n  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);\n\n  for (var id in allIDs) {\n    var isDirty = false;\n    // For each component that rendered, see if a component that triggered\n    // a DOM op is in its subtree.\n    for (var i = 0; i < dirtyLeafIDs.length; i++) {\n      if (dirtyLeafIDs[i].indexOf(id) === 0) {\n        isDirty = true;\n        break;\n      }\n    }\n    // check if component newly created\n    if (measurement.created[id]) {\n      isDirty = true;\n    }\n    if (!isDirty && measurement.counts[id] > 0) {\n      cleanComponents[id] = true;\n    }\n  }\n  return cleanComponents;\n}\n\nvar ReactDefaultPerfAnalysis = {\n  getExclusiveSummary: getExclusiveSummary,\n  getInclusiveSummary: getInclusiveSummary,\n  getDOMSummary: getDOMSummary,\n  getTotalTime: getTotalTime\n};\n\nmodule.exports = ReactDefaultPerfAnalysis;"],"mappings":"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"},"metadata":{},"sourceType":"script"}