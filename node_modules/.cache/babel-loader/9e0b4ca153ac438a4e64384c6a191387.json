{"ast":null,"code":"'use strict';\n\nmodule.exports = haxe;\nhaxe.displayName = 'haxe';\nhaxe.aliases = [];\n\nfunction haxe(Prism) {\n  Prism.languages.haxe = Prism.languages.extend('clike', {\n    string: {\n      // Strings can be multi-line\n      pattern: /\"(?:[^\"\\\\]|\\\\[\\s\\S])*\"/,\n      greedy: true\n    },\n    'class-name': [{\n      pattern: /(\\b(?:abstract|class|enum|extends|implements|interface|new|typedef)\\s+)[A-Z_]\\w*/,\n      lookbehind: true\n    }, // based on naming convention\n    /\\b[A-Z]\\w*/],\n    // The final look-ahead prevents highlighting of keywords if expressions such as \"haxe.macro.Expr\"\n    keyword: /\\bthis\\b|\\b(?:abstract|as|break|case|cast|catch|class|continue|default|do|dynamic|else|enum|extends|extern|final|for|from|function|if|implements|import|in|inline|interface|macro|new|null|operator|overload|override|package|private|public|return|static|super|switch|throw|to|try|typedef|untyped|using|var|while)(?!\\.)\\b/,\n    function: {\n      pattern: /\\b[a-z_]\\w*(?=\\s*(?:<[^<>]*>\\s*)?\\()/i,\n      greedy: true\n    },\n    operator: /\\.{3}|\\+\\+|--|&&|\\|\\||->|=>|(?:<<?|>{1,3}|[-+*/%!=&|^])=?|[?:~]/\n  });\n  Prism.languages.insertBefore('haxe', 'string', {\n    'string-interpolation': {\n      pattern: /'(?:[^'\\\\]|\\\\[\\s\\S])*'/,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /(^|[^\\\\])\\$(?:\\w+|\\{[^{}]+\\})/,\n          lookbehind: true,\n          inside: {\n            'interpolation-punctuation': {\n              pattern: /^\\$\\{?|\\}$/,\n              alias: 'punctuation'\n            },\n            expression: {\n              pattern: /[\\s\\S]+/,\n              inside: Prism.languages.haxe\n            }\n          }\n        },\n        string: /[\\s\\S]+/\n      }\n    }\n  });\n  Prism.languages.insertBefore('haxe', 'class-name', {\n    regex: {\n      pattern: /~\\/(?:[^\\/\\\\\\r\\n]|\\\\.)+\\/[a-z]*/,\n      greedy: true,\n      inside: {\n        'regex-flags': /\\b[a-z]+$/,\n        'regex-source': {\n          pattern: /^(~\\/)[\\s\\S]+(?=\\/$)/,\n          lookbehind: true,\n          alias: 'language-regex',\n          inside: Prism.languages.regex\n        },\n        'regex-delimiter': /^~\\/|\\/$/\n      }\n    }\n  });\n  Prism.languages.insertBefore('haxe', 'keyword', {\n    preprocessor: {\n      pattern: /#(?:else|elseif|end|if)\\b.*/,\n      alias: 'property'\n    },\n    metadata: {\n      pattern: /@:?[\\w.]+/,\n      alias: 'symbol'\n    },\n    reification: {\n      pattern: /\\$(?:\\w+|(?=\\{))/,\n      alias: 'important'\n    }\n  });\n}","map":{"version":3,"names":["module","exports","haxe","displayName","aliases","Prism","languages","extend","string","pattern","greedy","lookbehind","keyword","function","operator","insertBefore","inside","interpolation","alias","expression","regex","preprocessor","metadata","reification"],"sources":["/Users/aaronyeh/Downloads/Plant Buddy/node_modules/refractor/lang/haxe.js"],"sourcesContent":["'use strict'\n\nmodule.exports = haxe\nhaxe.displayName = 'haxe'\nhaxe.aliases = []\nfunction haxe(Prism) {\n  Prism.languages.haxe = Prism.languages.extend('clike', {\n    string: {\n      // Strings can be multi-line\n      pattern: /\"(?:[^\"\\\\]|\\\\[\\s\\S])*\"/,\n      greedy: true\n    },\n    'class-name': [\n      {\n        pattern:\n          /(\\b(?:abstract|class|enum|extends|implements|interface|new|typedef)\\s+)[A-Z_]\\w*/,\n        lookbehind: true\n      }, // based on naming convention\n      /\\b[A-Z]\\w*/\n    ],\n    // The final look-ahead prevents highlighting of keywords if expressions such as \"haxe.macro.Expr\"\n    keyword:\n      /\\bthis\\b|\\b(?:abstract|as|break|case|cast|catch|class|continue|default|do|dynamic|else|enum|extends|extern|final|for|from|function|if|implements|import|in|inline|interface|macro|new|null|operator|overload|override|package|private|public|return|static|super|switch|throw|to|try|typedef|untyped|using|var|while)(?!\\.)\\b/,\n    function: {\n      pattern: /\\b[a-z_]\\w*(?=\\s*(?:<[^<>]*>\\s*)?\\()/i,\n      greedy: true\n    },\n    operator: /\\.{3}|\\+\\+|--|&&|\\|\\||->|=>|(?:<<?|>{1,3}|[-+*/%!=&|^])=?|[?:~]/\n  })\n  Prism.languages.insertBefore('haxe', 'string', {\n    'string-interpolation': {\n      pattern: /'(?:[^'\\\\]|\\\\[\\s\\S])*'/,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /(^|[^\\\\])\\$(?:\\w+|\\{[^{}]+\\})/,\n          lookbehind: true,\n          inside: {\n            'interpolation-punctuation': {\n              pattern: /^\\$\\{?|\\}$/,\n              alias: 'punctuation'\n            },\n            expression: {\n              pattern: /[\\s\\S]+/,\n              inside: Prism.languages.haxe\n            }\n          }\n        },\n        string: /[\\s\\S]+/\n      }\n    }\n  })\n  Prism.languages.insertBefore('haxe', 'class-name', {\n    regex: {\n      pattern: /~\\/(?:[^\\/\\\\\\r\\n]|\\\\.)+\\/[a-z]*/,\n      greedy: true,\n      inside: {\n        'regex-flags': /\\b[a-z]+$/,\n        'regex-source': {\n          pattern: /^(~\\/)[\\s\\S]+(?=\\/$)/,\n          lookbehind: true,\n          alias: 'language-regex',\n          inside: Prism.languages.regex\n        },\n        'regex-delimiter': /^~\\/|\\/$/\n      }\n    }\n  })\n  Prism.languages.insertBefore('haxe', 'keyword', {\n    preprocessor: {\n      pattern: /#(?:else|elseif|end|if)\\b.*/,\n      alias: 'property'\n    },\n    metadata: {\n      pattern: /@:?[\\w.]+/,\n      alias: 'symbol'\n    },\n    reification: {\n      pattern: /\\$(?:\\w+|(?=\\{))/,\n      alias: 'important'\n    }\n  })\n}\n"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,IAAjB;AACAA,IAAI,CAACC,WAAL,GAAmB,MAAnB;AACAD,IAAI,CAACE,OAAL,GAAe,EAAf;;AACA,SAASF,IAAT,CAAcG,KAAd,EAAqB;EACnBA,KAAK,CAACC,SAAN,CAAgBJ,IAAhB,GAAuBG,KAAK,CAACC,SAAN,CAAgBC,MAAhB,CAAuB,OAAvB,EAAgC;IACrDC,MAAM,EAAE;MACN;MACAC,OAAO,EAAE,wBAFH;MAGNC,MAAM,EAAE;IAHF,CAD6C;IAMrD,cAAc,CACZ;MACED,OAAO,EACL,kFAFJ;MAGEE,UAAU,EAAE;IAHd,CADY,EAKT;IACH,YANY,CANuC;IAcrD;IACAC,OAAO,EACL,+TAhBmD;IAiBrDC,QAAQ,EAAE;MACRJ,OAAO,EAAE,uCADD;MAERC,MAAM,EAAE;IAFA,CAjB2C;IAqBrDI,QAAQ,EAAE;EArB2C,CAAhC,CAAvB;EAuBAT,KAAK,CAACC,SAAN,CAAgBS,YAAhB,CAA6B,MAA7B,EAAqC,QAArC,EAA+C;IAC7C,wBAAwB;MACtBN,OAAO,EAAE,wBADa;MAEtBC,MAAM,EAAE,IAFc;MAGtBM,MAAM,EAAE;QACNC,aAAa,EAAE;UACbR,OAAO,EAAE,+BADI;UAEbE,UAAU,EAAE,IAFC;UAGbK,MAAM,EAAE;YACN,6BAA6B;cAC3BP,OAAO,EAAE,YADkB;cAE3BS,KAAK,EAAE;YAFoB,CADvB;YAKNC,UAAU,EAAE;cACVV,OAAO,EAAE,SADC;cAEVO,MAAM,EAAEX,KAAK,CAACC,SAAN,CAAgBJ;YAFd;UALN;QAHK,CADT;QAeNM,MAAM,EAAE;MAfF;IAHc;EADqB,CAA/C;EAuBAH,KAAK,CAACC,SAAN,CAAgBS,YAAhB,CAA6B,MAA7B,EAAqC,YAArC,EAAmD;IACjDK,KAAK,EAAE;MACLX,OAAO,EAAE,iCADJ;MAELC,MAAM,EAAE,IAFH;MAGLM,MAAM,EAAE;QACN,eAAe,WADT;QAEN,gBAAgB;UACdP,OAAO,EAAE,sBADK;UAEdE,UAAU,EAAE,IAFE;UAGdO,KAAK,EAAE,gBAHO;UAIdF,MAAM,EAAEX,KAAK,CAACC,SAAN,CAAgBc;QAJV,CAFV;QAQN,mBAAmB;MARb;IAHH;EAD0C,CAAnD;EAgBAf,KAAK,CAACC,SAAN,CAAgBS,YAAhB,CAA6B,MAA7B,EAAqC,SAArC,EAAgD;IAC9CM,YAAY,EAAE;MACZZ,OAAO,EAAE,6BADG;MAEZS,KAAK,EAAE;IAFK,CADgC;IAK9CI,QAAQ,EAAE;MACRb,OAAO,EAAE,WADD;MAERS,KAAK,EAAE;IAFC,CALoC;IAS9CK,WAAW,EAAE;MACXd,OAAO,EAAE,kBADE;MAEXS,KAAK,EAAE;IAFI;EATiC,CAAhD;AAcD"},"metadata":{},"sourceType":"script"}