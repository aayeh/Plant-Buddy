{"ast":null,"code":"'use strict';\n\nmodule.exports = promql;\npromql.displayName = 'promql';\npromql.aliases = [];\n\nfunction promql(Prism) {\n  // Thanks to: https://github.com/prometheus-community/monaco-promql/blob/master/src/promql/promql.ts\n  // As well as: https://kausal.co/blog/slate-prism-add-new-syntax-promql/\n  ;\n\n  (function (Prism) {\n    // PromQL Aggregation Operators\n    // (https://prometheus.io/docs/prometheus/latest/querying/operators/#aggregation-operators)\n    var aggregations = ['sum', 'min', 'max', 'avg', 'group', 'stddev', 'stdvar', 'count', 'count_values', 'bottomk', 'topk', 'quantile']; // PromQL vector matching + the by and without clauses\n    // (https://prometheus.io/docs/prometheus/latest/querying/operators/#vector-matching)\n\n    var vectorMatching = ['on', 'ignoring', 'group_right', 'group_left', 'by', 'without']; // PromQL offset modifier\n    // (https://prometheus.io/docs/prometheus/latest/querying/basics/#offset-modifier)\n\n    var offsetModifier = ['offset'];\n    var keywords = aggregations.concat(vectorMatching, offsetModifier);\n    Prism.languages.promql = {\n      comment: {\n        pattern: /(^[ \\t]*)#.*/m,\n        lookbehind: true\n      },\n      'vector-match': {\n        // Match the comma-separated label lists inside vector matching:\n        pattern: new RegExp('((?:' + vectorMatching.join('|') + ')\\\\s*)\\\\([^)]*\\\\)'),\n        lookbehind: true,\n        inside: {\n          'label-key': {\n            pattern: /\\b[^,]+\\b/,\n            alias: 'attr-name'\n          },\n          punctuation: /[(),]/\n        }\n      },\n      'context-labels': {\n        pattern: /\\{[^{}]*\\}/,\n        inside: {\n          'label-key': {\n            pattern: /\\b[a-z_]\\w*(?=\\s*(?:=|![=~]))/,\n            alias: 'attr-name'\n          },\n          'label-value': {\n            pattern: /([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n            greedy: true,\n            alias: 'attr-value'\n          },\n          punctuation: /\\{|\\}|=~?|![=~]|,/\n        }\n      },\n      'context-range': [{\n        pattern: /\\[[\\w\\s:]+\\]/,\n        // [1m]\n        inside: {\n          punctuation: /\\[|\\]|:/,\n          'range-duration': {\n            pattern: /\\b(?:\\d+(?:[smhdwy]|ms))+\\b/i,\n            alias: 'number'\n          }\n        }\n      }, {\n        pattern: /(\\boffset\\s+)\\w+/,\n        // offset 1m\n        lookbehind: true,\n        inside: {\n          'range-duration': {\n            pattern: /\\b(?:\\d+(?:[smhdwy]|ms))+\\b/i,\n            alias: 'number'\n          }\n        }\n      }],\n      keyword: new RegExp('\\\\b(?:' + keywords.join('|') + ')\\\\b', 'i'),\n      function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n      number: /[-+]?(?:(?:\\b\\d+(?:\\.\\d+)?|\\B\\.\\d+)(?:e[-+]?\\d+)?\\b|\\b(?:0x[0-9a-f]+|nan|inf)\\b)/i,\n      operator: /[\\^*/%+-]|==|!=|<=|<|>=|>|\\b(?:and|or|unless)\\b/i,\n      punctuation: /[{};()`,.[\\]]/\n    };\n  })(Prism);\n}","map":{"version":3,"names":["module","exports","promql","displayName","aliases","Prism","aggregations","vectorMatching","offsetModifier","keywords","concat","languages","comment","pattern","lookbehind","RegExp","join","inside","alias","punctuation","greedy","keyword","function","number","operator"],"sources":["C:/Users/ayeh8/Documents/Plant-Buddy/node_modules/refractor/lang/promql.js"],"sourcesContent":["'use strict'\r\n\r\nmodule.exports = promql\r\npromql.displayName = 'promql'\r\npromql.aliases = []\r\nfunction promql(Prism) {\r\n  // Thanks to: https://github.com/prometheus-community/monaco-promql/blob/master/src/promql/promql.ts\r\n  // As well as: https://kausal.co/blog/slate-prism-add-new-syntax-promql/\r\n  ;(function (Prism) {\r\n    // PromQL Aggregation Operators\r\n    // (https://prometheus.io/docs/prometheus/latest/querying/operators/#aggregation-operators)\r\n    var aggregations = [\r\n      'sum',\r\n      'min',\r\n      'max',\r\n      'avg',\r\n      'group',\r\n      'stddev',\r\n      'stdvar',\r\n      'count',\r\n      'count_values',\r\n      'bottomk',\r\n      'topk',\r\n      'quantile'\r\n    ] // PromQL vector matching + the by and without clauses\r\n    // (https://prometheus.io/docs/prometheus/latest/querying/operators/#vector-matching)\r\n    var vectorMatching = [\r\n      'on',\r\n      'ignoring',\r\n      'group_right',\r\n      'group_left',\r\n      'by',\r\n      'without'\r\n    ] // PromQL offset modifier\r\n    // (https://prometheus.io/docs/prometheus/latest/querying/basics/#offset-modifier)\r\n    var offsetModifier = ['offset']\r\n    var keywords = aggregations.concat(vectorMatching, offsetModifier)\r\n    Prism.languages.promql = {\r\n      comment: {\r\n        pattern: /(^[ \\t]*)#.*/m,\r\n        lookbehind: true\r\n      },\r\n      'vector-match': {\r\n        // Match the comma-separated label lists inside vector matching:\r\n        pattern: new RegExp(\r\n          '((?:' + vectorMatching.join('|') + ')\\\\s*)\\\\([^)]*\\\\)'\r\n        ),\r\n        lookbehind: true,\r\n        inside: {\r\n          'label-key': {\r\n            pattern: /\\b[^,]+\\b/,\r\n            alias: 'attr-name'\r\n          },\r\n          punctuation: /[(),]/\r\n        }\r\n      },\r\n      'context-labels': {\r\n        pattern: /\\{[^{}]*\\}/,\r\n        inside: {\r\n          'label-key': {\r\n            pattern: /\\b[a-z_]\\w*(?=\\s*(?:=|![=~]))/,\r\n            alias: 'attr-name'\r\n          },\r\n          'label-value': {\r\n            pattern: /([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\r\n            greedy: true,\r\n            alias: 'attr-value'\r\n          },\r\n          punctuation: /\\{|\\}|=~?|![=~]|,/\r\n        }\r\n      },\r\n      'context-range': [\r\n        {\r\n          pattern: /\\[[\\w\\s:]+\\]/,\r\n          // [1m]\r\n          inside: {\r\n            punctuation: /\\[|\\]|:/,\r\n            'range-duration': {\r\n              pattern: /\\b(?:\\d+(?:[smhdwy]|ms))+\\b/i,\r\n              alias: 'number'\r\n            }\r\n          }\r\n        },\r\n        {\r\n          pattern: /(\\boffset\\s+)\\w+/,\r\n          // offset 1m\r\n          lookbehind: true,\r\n          inside: {\r\n            'range-duration': {\r\n              pattern: /\\b(?:\\d+(?:[smhdwy]|ms))+\\b/i,\r\n              alias: 'number'\r\n            }\r\n          }\r\n        }\r\n      ],\r\n      keyword: new RegExp('\\\\b(?:' + keywords.join('|') + ')\\\\b', 'i'),\r\n      function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\r\n      number:\r\n        /[-+]?(?:(?:\\b\\d+(?:\\.\\d+)?|\\B\\.\\d+)(?:e[-+]?\\d+)?\\b|\\b(?:0x[0-9a-f]+|nan|inf)\\b)/i,\r\n      operator: /[\\^*/%+-]|==|!=|<=|<|>=|>|\\b(?:and|or|unless)\\b/i,\r\n      punctuation: /[{};()`,.[\\]]/\r\n    }\r\n  })(Prism)\r\n}\r\n"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,MAAjB;AACAA,MAAM,CAACC,WAAP,GAAqB,QAArB;AACAD,MAAM,CAACE,OAAP,GAAiB,EAAjB;;AACA,SAASF,MAAT,CAAgBG,KAAhB,EAAuB;EACrB;EACA;EACA;;EAAC,CAAC,UAAUA,KAAV,EAAiB;IACjB;IACA;IACA,IAAIC,YAAY,GAAG,CACjB,KADiB,EAEjB,KAFiB,EAGjB,KAHiB,EAIjB,KAJiB,EAKjB,OALiB,EAMjB,QANiB,EAOjB,QAPiB,EAQjB,OARiB,EASjB,cATiB,EAUjB,SAViB,EAWjB,MAXiB,EAYjB,UAZiB,CAAnB,CAHiB,CAgBf;IACF;;IACA,IAAIC,cAAc,GAAG,CACnB,IADmB,EAEnB,UAFmB,EAGnB,aAHmB,EAInB,YAJmB,EAKnB,IALmB,EAMnB,SANmB,CAArB,CAlBiB,CAyBf;IACF;;IACA,IAAIC,cAAc,GAAG,CAAC,QAAD,CAArB;IACA,IAAIC,QAAQ,GAAGH,YAAY,CAACI,MAAb,CAAoBH,cAApB,EAAoCC,cAApC,CAAf;IACAH,KAAK,CAACM,SAAN,CAAgBT,MAAhB,GAAyB;MACvBU,OAAO,EAAE;QACPC,OAAO,EAAE,eADF;QAEPC,UAAU,EAAE;MAFL,CADc;MAKvB,gBAAgB;QACd;QACAD,OAAO,EAAE,IAAIE,MAAJ,CACP,SAASR,cAAc,CAACS,IAAf,CAAoB,GAApB,CAAT,GAAoC,mBAD7B,CAFK;QAKdF,UAAU,EAAE,IALE;QAMdG,MAAM,EAAE;UACN,aAAa;YACXJ,OAAO,EAAE,WADE;YAEXK,KAAK,EAAE;UAFI,CADP;UAKNC,WAAW,EAAE;QALP;MANM,CALO;MAmBvB,kBAAkB;QAChBN,OAAO,EAAE,YADO;QAEhBI,MAAM,EAAE;UACN,aAAa;YACXJ,OAAO,EAAE,+BADE;YAEXK,KAAK,EAAE;UAFI,CADP;UAKN,eAAe;YACbL,OAAO,EAAE,oCADI;YAEbO,MAAM,EAAE,IAFK;YAGbF,KAAK,EAAE;UAHM,CALT;UAUNC,WAAW,EAAE;QAVP;MAFQ,CAnBK;MAkCvB,iBAAiB,CACf;QACEN,OAAO,EAAE,cADX;QAEE;QACAI,MAAM,EAAE;UACNE,WAAW,EAAE,SADP;UAEN,kBAAkB;YAChBN,OAAO,EAAE,8BADO;YAEhBK,KAAK,EAAE;UAFS;QAFZ;MAHV,CADe,EAYf;QACEL,OAAO,EAAE,kBADX;QAEE;QACAC,UAAU,EAAE,IAHd;QAIEG,MAAM,EAAE;UACN,kBAAkB;YAChBJ,OAAO,EAAE,8BADO;YAEhBK,KAAK,EAAE;UAFS;QADZ;MAJV,CAZe,CAlCM;MA0DvBG,OAAO,EAAE,IAAIN,MAAJ,CAAW,WAAWN,QAAQ,CAACO,IAAT,CAAc,GAAd,CAAX,GAAgC,MAA3C,EAAmD,GAAnD,CA1Dc;MA2DvBM,QAAQ,EAAE,uBA3Da;MA4DvBC,MAAM,EACJ,mFA7DqB;MA8DvBC,QAAQ,EAAE,kDA9Da;MA+DvBL,WAAW,EAAE;IA/DU,CAAzB;EAiED,CA9FA,EA8FEd,KA9FF;AA+FF"},"metadata":{},"sourceType":"script"}