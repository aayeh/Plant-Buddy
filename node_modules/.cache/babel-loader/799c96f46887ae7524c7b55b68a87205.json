{"ast":null,"code":"'use strict';\n\nmodule.exports = smali;\nsmali.displayName = 'smali';\nsmali.aliases = [];\n\nfunction smali(Prism) {\n  // Test files for the parser itself:\n  // https://github.com/JesusFreke/smali/tree/master/smali/src/test/resources/LexerTest\n  Prism.languages.smali = {\n    comment: /#.*/,\n    string: {\n      pattern: /\"(?:[^\\r\\n\\\\\"]|\\\\.)*\"|'(?:[^\\r\\n\\\\']|\\\\(?:.|u[\\da-fA-F]{4}))'/,\n      greedy: true\n    },\n    'class-name': {\n      pattern: /(^|[^L])L(?:(?:\\w+|`[^`\\r\\n]*`)\\/)*(?:[\\w$]+|`[^`\\r\\n]*`)(?=\\s*;)/,\n      lookbehind: true,\n      inside: {\n        'class-name': {\n          pattern: /(^L|\\/)(?:[\\w$]+|`[^`\\r\\n]*`)$/,\n          lookbehind: true\n        },\n        namespace: {\n          pattern: /^(L)(?:(?:\\w+|`[^`\\r\\n]*`)\\/)+/,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\//\n          }\n        },\n        builtin: /^L/\n      }\n    },\n    builtin: [{\n      // Reference: https://github.com/JesusFreke/smali/wiki/TypesMethodsAndFields#types\n      pattern: /([();\\[])[BCDFIJSVZ]+/,\n      lookbehind: true\n    }, {\n      // e.g. .field mWifiOnUid:I\n      pattern: /([\\w$>]:)[BCDFIJSVZ]/,\n      lookbehind: true\n    }],\n    keyword: [{\n      pattern: /(\\.end\\s+)[\\w-]+/,\n      lookbehind: true\n    }, {\n      pattern: /(^|[^\\w.-])\\.(?!\\d)[\\w-]+/,\n      lookbehind: true\n    }, {\n      pattern: /(^|[^\\w.-])(?:abstract|annotation|bridge|constructor|enum|final|interface|private|protected|public|runtime|static|synthetic|system|transient)(?![\\w.-])/,\n      lookbehind: true\n    }],\n    function: {\n      pattern: /(^|[^\\w.-])(?:\\w+|<[\\w$-]+>)(?=\\()/,\n      lookbehind: true\n    },\n    field: {\n      pattern: /[\\w$]+(?=:)/,\n      alias: 'variable'\n    },\n    register: {\n      pattern: /(^|[^\\w.-])[vp]\\d(?![\\w.-])/,\n      lookbehind: true,\n      alias: 'variable'\n    },\n    boolean: {\n      pattern: /(^|[^\\w.-])(?:false|true)(?![\\w.-])/,\n      lookbehind: true\n    },\n    number: {\n      pattern: /(^|[^/\\w.-])-?(?:NAN|INFINITY|0x(?:[\\dA-F]+(?:\\.[\\dA-F]*)?|\\.[\\dA-F]+)(?:p[+-]?[\\dA-F]+)?|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?)[dflst]?(?![\\w.-])/i,\n      lookbehind: true\n    },\n    label: {\n      pattern: /(:)\\w+/,\n      lookbehind: true,\n      alias: 'property'\n    },\n    operator: /->|\\.\\.|[\\[=]/,\n    punctuation: /[{}(),;:]/\n  };\n}","map":{"version":3,"names":["module","exports","smali","displayName","aliases","Prism","languages","comment","string","pattern","greedy","lookbehind","inside","namespace","punctuation","builtin","keyword","function","field","alias","register","boolean","number","label","operator"],"sources":["C:/Users/ayeh8/Documents/Plant-Buddy/node_modules/refractor/lang/smali.js"],"sourcesContent":["'use strict'\r\n\r\nmodule.exports = smali\r\nsmali.displayName = 'smali'\r\nsmali.aliases = []\r\nfunction smali(Prism) {\r\n  // Test files for the parser itself:\r\n  // https://github.com/JesusFreke/smali/tree/master/smali/src/test/resources/LexerTest\r\n  Prism.languages.smali = {\r\n    comment: /#.*/,\r\n    string: {\r\n      pattern: /\"(?:[^\\r\\n\\\\\"]|\\\\.)*\"|'(?:[^\\r\\n\\\\']|\\\\(?:.|u[\\da-fA-F]{4}))'/,\r\n      greedy: true\r\n    },\r\n    'class-name': {\r\n      pattern:\r\n        /(^|[^L])L(?:(?:\\w+|`[^`\\r\\n]*`)\\/)*(?:[\\w$]+|`[^`\\r\\n]*`)(?=\\s*;)/,\r\n      lookbehind: true,\r\n      inside: {\r\n        'class-name': {\r\n          pattern: /(^L|\\/)(?:[\\w$]+|`[^`\\r\\n]*`)$/,\r\n          lookbehind: true\r\n        },\r\n        namespace: {\r\n          pattern: /^(L)(?:(?:\\w+|`[^`\\r\\n]*`)\\/)+/,\r\n          lookbehind: true,\r\n          inside: {\r\n            punctuation: /\\//\r\n          }\r\n        },\r\n        builtin: /^L/\r\n      }\r\n    },\r\n    builtin: [\r\n      {\r\n        // Reference: https://github.com/JesusFreke/smali/wiki/TypesMethodsAndFields#types\r\n        pattern: /([();\\[])[BCDFIJSVZ]+/,\r\n        lookbehind: true\r\n      },\r\n      {\r\n        // e.g. .field mWifiOnUid:I\r\n        pattern: /([\\w$>]:)[BCDFIJSVZ]/,\r\n        lookbehind: true\r\n      }\r\n    ],\r\n    keyword: [\r\n      {\r\n        pattern: /(\\.end\\s+)[\\w-]+/,\r\n        lookbehind: true\r\n      },\r\n      {\r\n        pattern: /(^|[^\\w.-])\\.(?!\\d)[\\w-]+/,\r\n        lookbehind: true\r\n      },\r\n      {\r\n        pattern:\r\n          /(^|[^\\w.-])(?:abstract|annotation|bridge|constructor|enum|final|interface|private|protected|public|runtime|static|synthetic|system|transient)(?![\\w.-])/,\r\n        lookbehind: true\r\n      }\r\n    ],\r\n    function: {\r\n      pattern: /(^|[^\\w.-])(?:\\w+|<[\\w$-]+>)(?=\\()/,\r\n      lookbehind: true\r\n    },\r\n    field: {\r\n      pattern: /[\\w$]+(?=:)/,\r\n      alias: 'variable'\r\n    },\r\n    register: {\r\n      pattern: /(^|[^\\w.-])[vp]\\d(?![\\w.-])/,\r\n      lookbehind: true,\r\n      alias: 'variable'\r\n    },\r\n    boolean: {\r\n      pattern: /(^|[^\\w.-])(?:false|true)(?![\\w.-])/,\r\n      lookbehind: true\r\n    },\r\n    number: {\r\n      pattern:\r\n        /(^|[^/\\w.-])-?(?:NAN|INFINITY|0x(?:[\\dA-F]+(?:\\.[\\dA-F]*)?|\\.[\\dA-F]+)(?:p[+-]?[\\dA-F]+)?|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?)[dflst]?(?![\\w.-])/i,\r\n      lookbehind: true\r\n    },\r\n    label: {\r\n      pattern: /(:)\\w+/,\r\n      lookbehind: true,\r\n      alias: 'property'\r\n    },\r\n    operator: /->|\\.\\.|[\\[=]/,\r\n    punctuation: /[{}(),;:]/\r\n  }\r\n}\r\n"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,KAAjB;AACAA,KAAK,CAACC,WAAN,GAAoB,OAApB;AACAD,KAAK,CAACE,OAAN,GAAgB,EAAhB;;AACA,SAASF,KAAT,CAAeG,KAAf,EAAsB;EACpB;EACA;EACAA,KAAK,CAACC,SAAN,CAAgBJ,KAAhB,GAAwB;IACtBK,OAAO,EAAE,KADa;IAEtBC,MAAM,EAAE;MACNC,OAAO,EAAE,+DADH;MAENC,MAAM,EAAE;IAFF,CAFc;IAMtB,cAAc;MACZD,OAAO,EACL,mEAFU;MAGZE,UAAU,EAAE,IAHA;MAIZC,MAAM,EAAE;QACN,cAAc;UACZH,OAAO,EAAE,gCADG;UAEZE,UAAU,EAAE;QAFA,CADR;QAKNE,SAAS,EAAE;UACTJ,OAAO,EAAE,gCADA;UAETE,UAAU,EAAE,IAFH;UAGTC,MAAM,EAAE;YACNE,WAAW,EAAE;UADP;QAHC,CALL;QAYNC,OAAO,EAAE;MAZH;IAJI,CANQ;IAyBtBA,OAAO,EAAE,CACP;MACE;MACAN,OAAO,EAAE,uBAFX;MAGEE,UAAU,EAAE;IAHd,CADO,EAMP;MACE;MACAF,OAAO,EAAE,sBAFX;MAGEE,UAAU,EAAE;IAHd,CANO,CAzBa;IAqCtBK,OAAO,EAAE,CACP;MACEP,OAAO,EAAE,kBADX;MAEEE,UAAU,EAAE;IAFd,CADO,EAKP;MACEF,OAAO,EAAE,2BADX;MAEEE,UAAU,EAAE;IAFd,CALO,EASP;MACEF,OAAO,EACL,yJAFJ;MAGEE,UAAU,EAAE;IAHd,CATO,CArCa;IAoDtBM,QAAQ,EAAE;MACRR,OAAO,EAAE,oCADD;MAERE,UAAU,EAAE;IAFJ,CApDY;IAwDtBO,KAAK,EAAE;MACLT,OAAO,EAAE,aADJ;MAELU,KAAK,EAAE;IAFF,CAxDe;IA4DtBC,QAAQ,EAAE;MACRX,OAAO,EAAE,6BADD;MAERE,UAAU,EAAE,IAFJ;MAGRQ,KAAK,EAAE;IAHC,CA5DY;IAiEtBE,OAAO,EAAE;MACPZ,OAAO,EAAE,qCADF;MAEPE,UAAU,EAAE;IAFL,CAjEa;IAqEtBW,MAAM,EAAE;MACNb,OAAO,EACL,qJAFI;MAGNE,UAAU,EAAE;IAHN,CArEc;IA0EtBY,KAAK,EAAE;MACLd,OAAO,EAAE,QADJ;MAELE,UAAU,EAAE,IAFP;MAGLQ,KAAK,EAAE;IAHF,CA1Ee;IA+EtBK,QAAQ,EAAE,eA/EY;IAgFtBV,WAAW,EAAE;EAhFS,CAAxB;AAkFD"},"metadata":{},"sourceType":"script"}