{"ast":null,"code":"'use strict';\n\nvar refractorJava = require('./java.js');\n\nmodule.exports = scala;\nscala.displayName = 'scala';\nscala.aliases = [];\n\nfunction scala(Prism) {\n  Prism.register(refractorJava);\n  Prism.languages.scala = Prism.languages.extend('java', {\n    'triple-quoted-string': {\n      pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n      greedy: true,\n      alias: 'string'\n    },\n    string: {\n      pattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true\n    },\n    keyword: /<-|=>|\\b(?:abstract|case|catch|class|def|do|else|extends|final|finally|for|forSome|if|implicit|import|lazy|match|new|null|object|override|package|private|protected|return|sealed|self|super|this|throw|trait|try|type|val|var|while|with|yield)\\b/,\n    number: /\\b0x(?:[\\da-f]*\\.)?[\\da-f]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e\\d+)?[dfl]?/i,\n    builtin: /\\b(?:Any|AnyRef|AnyVal|Boolean|Byte|Char|Double|Float|Int|Long|Nothing|Short|String|Unit)\\b/,\n    symbol: /'[^\\d\\s\\\\]\\w*/\n  });\n  Prism.languages.insertBefore('scala', 'triple-quoted-string', {\n    'string-interpolation': {\n      pattern: /\\b[a-z]\\w*(?:\"\"\"(?:[^$]|\\$(?:[^{]|\\{(?:[^{}]|\\{[^{}]*\\})*\\}))*?\"\"\"|\"(?:[^$\"\\r\\n]|\\$(?:[^{]|\\{(?:[^{}]|\\{[^{}]*\\})*\\}))*\")/i,\n      greedy: true,\n      inside: {\n        id: {\n          pattern: /^\\w+/,\n          greedy: true,\n          alias: 'function'\n        },\n        escape: {\n          pattern: /\\\\\\$\"|\\$[$\"]/,\n          greedy: true,\n          alias: 'symbol'\n        },\n        interpolation: {\n          pattern: /\\$(?:\\w+|\\{(?:[^{}]|\\{[^{}]*\\})*\\})/,\n          greedy: true,\n          inside: {\n            punctuation: /^\\$\\{?|\\}$/,\n            expression: {\n              pattern: /[\\s\\S]+/,\n              inside: Prism.languages.scala\n            }\n          }\n        },\n        string: /[\\s\\S]+/\n      }\n    }\n  });\n  delete Prism.languages.scala['class-name'];\n  delete Prism.languages.scala['function'];\n}","map":{"version":3,"names":["refractorJava","require","module","exports","scala","displayName","aliases","Prism","register","languages","extend","pattern","greedy","alias","string","keyword","number","builtin","symbol","insertBefore","inside","id","escape","interpolation","punctuation","expression"],"sources":["C:/Users/ayeh8/Documents/Plant-Buddy/node_modules/refractor/lang/scala.js"],"sourcesContent":["'use strict'\r\nvar refractorJava = require('./java.js')\r\nmodule.exports = scala\r\nscala.displayName = 'scala'\r\nscala.aliases = []\r\nfunction scala(Prism) {\r\n  Prism.register(refractorJava)\r\n  Prism.languages.scala = Prism.languages.extend('java', {\r\n    'triple-quoted-string': {\r\n      pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\r\n      greedy: true,\r\n      alias: 'string'\r\n    },\r\n    string: {\r\n      pattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\r\n      greedy: true\r\n    },\r\n    keyword:\r\n      /<-|=>|\\b(?:abstract|case|catch|class|def|do|else|extends|final|finally|for|forSome|if|implicit|import|lazy|match|new|null|object|override|package|private|protected|return|sealed|self|super|this|throw|trait|try|type|val|var|while|with|yield)\\b/,\r\n    number:\r\n      /\\b0x(?:[\\da-f]*\\.)?[\\da-f]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e\\d+)?[dfl]?/i,\r\n    builtin:\r\n      /\\b(?:Any|AnyRef|AnyVal|Boolean|Byte|Char|Double|Float|Int|Long|Nothing|Short|String|Unit)\\b/,\r\n    symbol: /'[^\\d\\s\\\\]\\w*/\r\n  })\r\n  Prism.languages.insertBefore('scala', 'triple-quoted-string', {\r\n    'string-interpolation': {\r\n      pattern:\r\n        /\\b[a-z]\\w*(?:\"\"\"(?:[^$]|\\$(?:[^{]|\\{(?:[^{}]|\\{[^{}]*\\})*\\}))*?\"\"\"|\"(?:[^$\"\\r\\n]|\\$(?:[^{]|\\{(?:[^{}]|\\{[^{}]*\\})*\\}))*\")/i,\r\n      greedy: true,\r\n      inside: {\r\n        id: {\r\n          pattern: /^\\w+/,\r\n          greedy: true,\r\n          alias: 'function'\r\n        },\r\n        escape: {\r\n          pattern: /\\\\\\$\"|\\$[$\"]/,\r\n          greedy: true,\r\n          alias: 'symbol'\r\n        },\r\n        interpolation: {\r\n          pattern: /\\$(?:\\w+|\\{(?:[^{}]|\\{[^{}]*\\})*\\})/,\r\n          greedy: true,\r\n          inside: {\r\n            punctuation: /^\\$\\{?|\\}$/,\r\n            expression: {\r\n              pattern: /[\\s\\S]+/,\r\n              inside: Prism.languages.scala\r\n            }\r\n          }\r\n        },\r\n        string: /[\\s\\S]+/\r\n      }\r\n    }\r\n  })\r\n  delete Prism.languages.scala['class-name']\r\n  delete Prism.languages.scala['function']\r\n}\r\n"],"mappings":"AAAA;;AACA,IAAIA,aAAa,GAAGC,OAAO,CAAC,WAAD,CAA3B;;AACAC,MAAM,CAACC,OAAP,GAAiBC,KAAjB;AACAA,KAAK,CAACC,WAAN,GAAoB,OAApB;AACAD,KAAK,CAACE,OAAN,GAAgB,EAAhB;;AACA,SAASF,KAAT,CAAeG,KAAf,EAAsB;EACpBA,KAAK,CAACC,QAAN,CAAeR,aAAf;EACAO,KAAK,CAACE,SAAN,CAAgBL,KAAhB,GAAwBG,KAAK,CAACE,SAAN,CAAgBC,MAAhB,CAAuB,MAAvB,EAA+B;IACrD,wBAAwB;MACtBC,OAAO,EAAE,gBADa;MAEtBC,MAAM,EAAE,IAFc;MAGtBC,KAAK,EAAE;IAHe,CAD6B;IAMrDC,MAAM,EAAE;MACNH,OAAO,EAAE,iCADH;MAENC,MAAM,EAAE;IAFF,CAN6C;IAUrDG,OAAO,EACL,oPAXmD;IAYrDC,MAAM,EACJ,yEAbmD;IAcrDC,OAAO,EACL,6FAfmD;IAgBrDC,MAAM,EAAE;EAhB6C,CAA/B,CAAxB;EAkBAX,KAAK,CAACE,SAAN,CAAgBU,YAAhB,CAA6B,OAA7B,EAAsC,sBAAtC,EAA8D;IAC5D,wBAAwB;MACtBR,OAAO,EACL,4HAFoB;MAGtBC,MAAM,EAAE,IAHc;MAItBQ,MAAM,EAAE;QACNC,EAAE,EAAE;UACFV,OAAO,EAAE,MADP;UAEFC,MAAM,EAAE,IAFN;UAGFC,KAAK,EAAE;QAHL,CADE;QAMNS,MAAM,EAAE;UACNX,OAAO,EAAE,cADH;UAENC,MAAM,EAAE,IAFF;UAGNC,KAAK,EAAE;QAHD,CANF;QAWNU,aAAa,EAAE;UACbZ,OAAO,EAAE,qCADI;UAEbC,MAAM,EAAE,IAFK;UAGbQ,MAAM,EAAE;YACNI,WAAW,EAAE,YADP;YAENC,UAAU,EAAE;cACVd,OAAO,EAAE,SADC;cAEVS,MAAM,EAAEb,KAAK,CAACE,SAAN,CAAgBL;YAFd;UAFN;QAHK,CAXT;QAsBNU,MAAM,EAAE;MAtBF;IAJc;EADoC,CAA9D;EA+BA,OAAOP,KAAK,CAACE,SAAN,CAAgBL,KAAhB,CAAsB,YAAtB,CAAP;EACA,OAAOG,KAAK,CAACE,SAAN,CAAgBL,KAAhB,CAAsB,UAAtB,CAAP;AACD"},"metadata":{},"sourceType":"script"}