{"ast":null,"code":"'use strict';\n\nmodule.exports = mermaid;\nmermaid.displayName = 'mermaid';\nmermaid.aliases = [];\n\nfunction mermaid(Prism) {\n  Prism.languages.mermaid = {\n    comment: {\n      pattern: /%%.*/,\n      greedy: true\n    },\n    style: {\n      pattern: /^([ \\t]*(?:classDef|linkStyle|style)[ \\t]+[\\w$-]+[ \\t]+)\\w.*[^\\s;]/m,\n      lookbehind: true,\n      inside: {\n        property: /\\b\\w[\\w-]*(?=[ \\t]*:)/,\n        operator: /:/,\n        punctuation: /,/\n      }\n    },\n    'inter-arrow-label': {\n      pattern: /([^<>ox.=-])(?:-[-.]|==)(?![<>ox.=-])[ \\t]*(?:\"[^\"\\r\\n]*\"|[^\\s\".=-](?:[^\\r\\n.=-]*[^\\s.=-])?)[ \\t]*(?:\\.+->?|--+[->]|==+[=>])(?![<>ox.=-])/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        arrow: {\n          pattern: /(?:\\.+->?|--+[->]|==+[=>])$/,\n          alias: 'operator'\n        },\n        label: {\n          pattern: /^([\\s\\S]{2}[ \\t]*)\\S(?:[\\s\\S]*\\S)?/,\n          lookbehind: true,\n          alias: 'property'\n        },\n        'arrow-head': {\n          pattern: /^\\S+/,\n          alias: ['arrow', 'operator']\n        }\n      }\n    },\n    arrow: [// This might look complex but it really isn't.\n    // There are many possible arrows (see tests) and it's impossible to fit all of them into one pattern. The\n    // problem is that we only have one lookbehind per pattern. However, we cannot disallow too many arrow\n    // characters in the one lookbehind because that would create too many false negatives. So we have to split the\n    // arrows into different patterns.\n    {\n      // ER diagram\n      pattern: /(^|[^{}|o.-])[|}][|o](?:--|\\.\\.)[|o][|{](?![{}|o.-])/,\n      lookbehind: true,\n      alias: 'operator'\n    }, {\n      // flow chart\n      // (?:==+|--+|-\\.*-)\n      pattern: /(^|[^<>ox.=-])(?:[<ox](?:==+|--+|-\\.*-)[>ox]?|(?:==+|--+|-\\.*-)[>ox]|===+|---+|-\\.+-)(?![<>ox.=-])/,\n      lookbehind: true,\n      alias: 'operator'\n    }, {\n      // sequence diagram\n      pattern: /(^|[^<>()x-])(?:--?(?:>>|[x>)])(?![<>()x])|(?:<<|[x<(])--?(?!-))/,\n      lookbehind: true,\n      alias: 'operator'\n    }, {\n      // class diagram\n      pattern: /(^|[^<>|*o.-])(?:[*o]--|--[*o]|<\\|?(?:--|\\.\\.)|(?:--|\\.\\.)\\|?>|--|\\.\\.)(?![<>|*o.-])/,\n      lookbehind: true,\n      alias: 'operator'\n    }],\n    label: {\n      pattern: /(^|[^|<])\\|(?:[^\\r\\n\"|]|\"[^\"\\r\\n]*\")+\\|/,\n      lookbehind: true,\n      greedy: true,\n      alias: 'property'\n    },\n    text: {\n      pattern: /(?:[(\\[{]+|\\b>)(?:[^\\r\\n\"()\\[\\]{}]|\"[^\"\\r\\n]*\")+(?:[)\\]}]+|>)/,\n      alias: 'string'\n    },\n    string: {\n      pattern: /\"[^\"\\r\\n]*\"/,\n      greedy: true\n    },\n    annotation: {\n      pattern: /<<(?:abstract|choice|enumeration|fork|interface|join|service)>>|\\[\\[(?:choice|fork|join)\\]\\]/i,\n      alias: 'important'\n    },\n    keyword: [// This language has both case-sensitive and case-insensitive keywords\n    {\n      pattern: /(^[ \\t]*)(?:action|callback|class|classDef|classDiagram|click|direction|erDiagram|flowchart|gantt|gitGraph|graph|journey|link|linkStyle|pie|requirementDiagram|sequenceDiagram|stateDiagram|stateDiagram-v2|style|subgraph)(?![\\w$-])/m,\n      lookbehind: true,\n      greedy: true\n    }, {\n      pattern: /(^[ \\t]*)(?:activate|alt|and|as|autonumber|deactivate|else|end(?:[ \\t]+note)?|loop|opt|par|participant|rect|state|note[ \\t]+(?:over|(?:left|right)[ \\t]+of))(?![\\w$-])/im,\n      lookbehind: true,\n      greedy: true\n    }],\n    entity: /#[a-z0-9]+;/,\n    operator: {\n      pattern: /(\\w[ \\t]*)&(?=[ \\t]*\\w)|:::|:/,\n      lookbehind: true\n    },\n    punctuation: /[(){};]/\n  };\n}","map":{"version":3,"names":["module","exports","mermaid","displayName","aliases","Prism","languages","comment","pattern","greedy","style","lookbehind","inside","property","operator","punctuation","arrow","alias","label","text","string","annotation","keyword","entity"],"sources":["C:/Users/ayeh8/Documents/Plant-Buddy/node_modules/refractor/lang/mermaid.js"],"sourcesContent":["'use strict'\r\n\r\nmodule.exports = mermaid\r\nmermaid.displayName = 'mermaid'\r\nmermaid.aliases = []\r\nfunction mermaid(Prism) {\r\n  Prism.languages.mermaid = {\r\n    comment: {\r\n      pattern: /%%.*/,\r\n      greedy: true\r\n    },\r\n    style: {\r\n      pattern:\r\n        /^([ \\t]*(?:classDef|linkStyle|style)[ \\t]+[\\w$-]+[ \\t]+)\\w.*[^\\s;]/m,\r\n      lookbehind: true,\r\n      inside: {\r\n        property: /\\b\\w[\\w-]*(?=[ \\t]*:)/,\r\n        operator: /:/,\r\n        punctuation: /,/\r\n      }\r\n    },\r\n    'inter-arrow-label': {\r\n      pattern:\r\n        /([^<>ox.=-])(?:-[-.]|==)(?![<>ox.=-])[ \\t]*(?:\"[^\"\\r\\n]*\"|[^\\s\".=-](?:[^\\r\\n.=-]*[^\\s.=-])?)[ \\t]*(?:\\.+->?|--+[->]|==+[=>])(?![<>ox.=-])/,\r\n      lookbehind: true,\r\n      greedy: true,\r\n      inside: {\r\n        arrow: {\r\n          pattern: /(?:\\.+->?|--+[->]|==+[=>])$/,\r\n          alias: 'operator'\r\n        },\r\n        label: {\r\n          pattern: /^([\\s\\S]{2}[ \\t]*)\\S(?:[\\s\\S]*\\S)?/,\r\n          lookbehind: true,\r\n          alias: 'property'\r\n        },\r\n        'arrow-head': {\r\n          pattern: /^\\S+/,\r\n          alias: ['arrow', 'operator']\r\n        }\r\n      }\r\n    },\r\n    arrow: [\r\n      // This might look complex but it really isn't.\r\n      // There are many possible arrows (see tests) and it's impossible to fit all of them into one pattern. The\r\n      // problem is that we only have one lookbehind per pattern. However, we cannot disallow too many arrow\r\n      // characters in the one lookbehind because that would create too many false negatives. So we have to split the\r\n      // arrows into different patterns.\r\n      {\r\n        // ER diagram\r\n        pattern: /(^|[^{}|o.-])[|}][|o](?:--|\\.\\.)[|o][|{](?![{}|o.-])/,\r\n        lookbehind: true,\r\n        alias: 'operator'\r\n      },\r\n      {\r\n        // flow chart\r\n        // (?:==+|--+|-\\.*-)\r\n        pattern:\r\n          /(^|[^<>ox.=-])(?:[<ox](?:==+|--+|-\\.*-)[>ox]?|(?:==+|--+|-\\.*-)[>ox]|===+|---+|-\\.+-)(?![<>ox.=-])/,\r\n        lookbehind: true,\r\n        alias: 'operator'\r\n      },\r\n      {\r\n        // sequence diagram\r\n        pattern:\r\n          /(^|[^<>()x-])(?:--?(?:>>|[x>)])(?![<>()x])|(?:<<|[x<(])--?(?!-))/,\r\n        lookbehind: true,\r\n        alias: 'operator'\r\n      },\r\n      {\r\n        // class diagram\r\n        pattern:\r\n          /(^|[^<>|*o.-])(?:[*o]--|--[*o]|<\\|?(?:--|\\.\\.)|(?:--|\\.\\.)\\|?>|--|\\.\\.)(?![<>|*o.-])/,\r\n        lookbehind: true,\r\n        alias: 'operator'\r\n      }\r\n    ],\r\n    label: {\r\n      pattern: /(^|[^|<])\\|(?:[^\\r\\n\"|]|\"[^\"\\r\\n]*\")+\\|/,\r\n      lookbehind: true,\r\n      greedy: true,\r\n      alias: 'property'\r\n    },\r\n    text: {\r\n      pattern: /(?:[(\\[{]+|\\b>)(?:[^\\r\\n\"()\\[\\]{}]|\"[^\"\\r\\n]*\")+(?:[)\\]}]+|>)/,\r\n      alias: 'string'\r\n    },\r\n    string: {\r\n      pattern: /\"[^\"\\r\\n]*\"/,\r\n      greedy: true\r\n    },\r\n    annotation: {\r\n      pattern:\r\n        /<<(?:abstract|choice|enumeration|fork|interface|join|service)>>|\\[\\[(?:choice|fork|join)\\]\\]/i,\r\n      alias: 'important'\r\n    },\r\n    keyword: [\r\n      // This language has both case-sensitive and case-insensitive keywords\r\n      {\r\n        pattern:\r\n          /(^[ \\t]*)(?:action|callback|class|classDef|classDiagram|click|direction|erDiagram|flowchart|gantt|gitGraph|graph|journey|link|linkStyle|pie|requirementDiagram|sequenceDiagram|stateDiagram|stateDiagram-v2|style|subgraph)(?![\\w$-])/m,\r\n        lookbehind: true,\r\n        greedy: true\r\n      },\r\n      {\r\n        pattern:\r\n          /(^[ \\t]*)(?:activate|alt|and|as|autonumber|deactivate|else|end(?:[ \\t]+note)?|loop|opt|par|participant|rect|state|note[ \\t]+(?:over|(?:left|right)[ \\t]+of))(?![\\w$-])/im,\r\n        lookbehind: true,\r\n        greedy: true\r\n      }\r\n    ],\r\n    entity: /#[a-z0-9]+;/,\r\n    operator: {\r\n      pattern: /(\\w[ \\t]*)&(?=[ \\t]*\\w)|:::|:/,\r\n      lookbehind: true\r\n    },\r\n    punctuation: /[(){};]/\r\n  }\r\n}\r\n"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,OAAjB;AACAA,OAAO,CAACC,WAAR,GAAsB,SAAtB;AACAD,OAAO,CAACE,OAAR,GAAkB,EAAlB;;AACA,SAASF,OAAT,CAAiBG,KAAjB,EAAwB;EACtBA,KAAK,CAACC,SAAN,CAAgBJ,OAAhB,GAA0B;IACxBK,OAAO,EAAE;MACPC,OAAO,EAAE,MADF;MAEPC,MAAM,EAAE;IAFD,CADe;IAKxBC,KAAK,EAAE;MACLF,OAAO,EACL,qEAFG;MAGLG,UAAU,EAAE,IAHP;MAILC,MAAM,EAAE;QACNC,QAAQ,EAAE,uBADJ;QAENC,QAAQ,EAAE,GAFJ;QAGNC,WAAW,EAAE;MAHP;IAJH,CALiB;IAexB,qBAAqB;MACnBP,OAAO,EACL,2IAFiB;MAGnBG,UAAU,EAAE,IAHO;MAInBF,MAAM,EAAE,IAJW;MAKnBG,MAAM,EAAE;QACNI,KAAK,EAAE;UACLR,OAAO,EAAE,6BADJ;UAELS,KAAK,EAAE;QAFF,CADD;QAKNC,KAAK,EAAE;UACLV,OAAO,EAAE,oCADJ;UAELG,UAAU,EAAE,IAFP;UAGLM,KAAK,EAAE;QAHF,CALD;QAUN,cAAc;UACZT,OAAO,EAAE,MADG;UAEZS,KAAK,EAAE,CAAC,OAAD,EAAU,UAAV;QAFK;MAVR;IALW,CAfG;IAoCxBD,KAAK,EAAE,CACL;IACA;IACA;IACA;IACA;IACA;MACE;MACAR,OAAO,EAAE,sDAFX;MAGEG,UAAU,EAAE,IAHd;MAIEM,KAAK,EAAE;IAJT,CANK,EAYL;MACE;MACA;MACAT,OAAO,EACL,oGAJJ;MAKEG,UAAU,EAAE,IALd;MAMEM,KAAK,EAAE;IANT,CAZK,EAoBL;MACE;MACAT,OAAO,EACL,kEAHJ;MAIEG,UAAU,EAAE,IAJd;MAKEM,KAAK,EAAE;IALT,CApBK,EA2BL;MACE;MACAT,OAAO,EACL,sFAHJ;MAIEG,UAAU,EAAE,IAJd;MAKEM,KAAK,EAAE;IALT,CA3BK,CApCiB;IAuExBC,KAAK,EAAE;MACLV,OAAO,EAAE,yCADJ;MAELG,UAAU,EAAE,IAFP;MAGLF,MAAM,EAAE,IAHH;MAILQ,KAAK,EAAE;IAJF,CAvEiB;IA6ExBE,IAAI,EAAE;MACJX,OAAO,EAAE,+DADL;MAEJS,KAAK,EAAE;IAFH,CA7EkB;IAiFxBG,MAAM,EAAE;MACNZ,OAAO,EAAE,aADH;MAENC,MAAM,EAAE;IAFF,CAjFgB;IAqFxBY,UAAU,EAAE;MACVb,OAAO,EACL,+FAFQ;MAGVS,KAAK,EAAE;IAHG,CArFY;IA0FxBK,OAAO,EAAE,CACP;IACA;MACEd,OAAO,EACL,wOAFJ;MAGEG,UAAU,EAAE,IAHd;MAIEF,MAAM,EAAE;IAJV,CAFO,EAQP;MACED,OAAO,EACL,0KAFJ;MAGEG,UAAU,EAAE,IAHd;MAIEF,MAAM,EAAE;IAJV,CARO,CA1Fe;IAyGxBc,MAAM,EAAE,aAzGgB;IA0GxBT,QAAQ,EAAE;MACRN,OAAO,EAAE,+BADD;MAERG,UAAU,EAAE;IAFJ,CA1Gc;IA8GxBI,WAAW,EAAE;EA9GW,CAA1B;AAgHD"},"metadata":{},"sourceType":"script"}