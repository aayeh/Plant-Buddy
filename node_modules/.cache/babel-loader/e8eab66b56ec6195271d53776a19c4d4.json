{"ast":null,"code":"'use strict';\n\nmodule.exports = typoscript;\ntyposcript.displayName = 'typoscript';\ntyposcript.aliases = ['tsconfig'];\n\nfunction typoscript(Prism) {\n  ;\n\n  (function (Prism) {\n    var keywords = /\\b(?:ACT|ACTIFSUB|CARRAY|CASE|CLEARGIF|COA|COA_INT|CONSTANTS|CONTENT|CUR|EDITPANEL|EFFECT|EXT|FILE|FLUIDTEMPLATE|FORM|FRAME|FRAMESET|GIFBUILDER|GMENU|GMENU_FOLDOUT|GMENU_LAYERS|GP|HMENU|HRULER|HTML|IENV|IFSUB|IMAGE|IMGMENU|IMGMENUITEM|IMGTEXT|IMG_RESOURCE|INCLUDE_TYPOSCRIPT|JSMENU|JSMENUITEM|LLL|LOAD_REGISTER|NO|PAGE|RECORDS|RESTORE_REGISTER|TEMPLATE|TEXT|TMENU|TMENUITEM|TMENU_LAYERS|USER|USER_INT|_GIFBUILDER|global|globalString|globalVar)\\b/;\n    Prism.languages.typoscript = {\n      comment: [{\n        // multiline comments /* */\n        pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n        lookbehind: true\n      }, {\n        // double-slash comments - ignored when backslashes or colon is found in front\n        // also ignored whenever directly after an equal-sign, because it would probably be an url without protocol\n        pattern: /(^|[^\\\\:= \\t]|(?:^|[^= \\t])[ \\t]+)\\/\\/.*/,\n        lookbehind: true,\n        greedy: true\n      }, {\n        // hash comments - ignored when leading quote is found for hex colors in strings\n        pattern: /(^|[^\"'])#.*/,\n        lookbehind: true,\n        greedy: true\n      }],\n      function: [{\n        // old include style\n        pattern: /<INCLUDE_TYPOSCRIPT:\\s*source\\s*=\\s*(?:\"[^\"\\r\\n]*\"|'[^'\\r\\n]*')\\s*>/,\n        inside: {\n          string: {\n            pattern: /\"[^\"\\r\\n]*\"|'[^'\\r\\n]*'/,\n            inside: {\n              keyword: keywords\n            }\n          },\n          keyword: {\n            pattern: /INCLUDE_TYPOSCRIPT/\n          }\n        }\n      }, {\n        // new include style\n        pattern: /@import\\s*(?:\"[^\"\\r\\n]*\"|'[^'\\r\\n]*')/,\n        inside: {\n          string: /\"[^\"\\r\\n]*\"|'[^'\\r\\n]*'/\n        }\n      }],\n      string: {\n        pattern: /^([^=]*=[< ]?)(?:(?!\\]\\n).)*/,\n        lookbehind: true,\n        inside: {\n          function: /\\{\\$.*\\}/,\n          // constants include\n          keyword: keywords,\n          number: /^\\d+$/,\n          punctuation: /[,|:]/\n        }\n      },\n      keyword: keywords,\n      number: {\n        // special highlighting for indexes of arrays in tags\n        pattern: /\\b\\d+\\s*[.{=]/,\n        inside: {\n          operator: /[.{=]/\n        }\n      },\n      tag: {\n        pattern: /\\.?[-\\w\\\\]+\\.?/,\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      punctuation: /[{}[\\];(),.:|]/,\n      operator: /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/\n    };\n    Prism.languages.tsconfig = Prism.languages.typoscript;\n  })(Prism);\n}","map":{"version":3,"names":["module","exports","typoscript","displayName","aliases","Prism","keywords","languages","comment","pattern","lookbehind","greedy","function","inside","string","keyword","number","punctuation","operator","tag","tsconfig"],"sources":["C:/Users/ayeh8/Documents/Plant-Buddy/node_modules/refractor/lang/typoscript.js"],"sourcesContent":["'use strict'\r\n\r\nmodule.exports = typoscript\r\ntyposcript.displayName = 'typoscript'\r\ntyposcript.aliases = ['tsconfig']\r\nfunction typoscript(Prism) {\r\n  ;(function (Prism) {\r\n    var keywords =\r\n      /\\b(?:ACT|ACTIFSUB|CARRAY|CASE|CLEARGIF|COA|COA_INT|CONSTANTS|CONTENT|CUR|EDITPANEL|EFFECT|EXT|FILE|FLUIDTEMPLATE|FORM|FRAME|FRAMESET|GIFBUILDER|GMENU|GMENU_FOLDOUT|GMENU_LAYERS|GP|HMENU|HRULER|HTML|IENV|IFSUB|IMAGE|IMGMENU|IMGMENUITEM|IMGTEXT|IMG_RESOURCE|INCLUDE_TYPOSCRIPT|JSMENU|JSMENUITEM|LLL|LOAD_REGISTER|NO|PAGE|RECORDS|RESTORE_REGISTER|TEMPLATE|TEXT|TMENU|TMENUITEM|TMENU_LAYERS|USER|USER_INT|_GIFBUILDER|global|globalString|globalVar)\\b/\r\n    Prism.languages.typoscript = {\r\n      comment: [\r\n        {\r\n          // multiline comments /* */\r\n          pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\r\n          lookbehind: true\r\n        },\r\n        {\r\n          // double-slash comments - ignored when backslashes or colon is found in front\r\n          // also ignored whenever directly after an equal-sign, because it would probably be an url without protocol\r\n          pattern: /(^|[^\\\\:= \\t]|(?:^|[^= \\t])[ \\t]+)\\/\\/.*/,\r\n          lookbehind: true,\r\n          greedy: true\r\n        },\r\n        {\r\n          // hash comments - ignored when leading quote is found for hex colors in strings\r\n          pattern: /(^|[^\"'])#.*/,\r\n          lookbehind: true,\r\n          greedy: true\r\n        }\r\n      ],\r\n      function: [\r\n        {\r\n          // old include style\r\n          pattern:\r\n            /<INCLUDE_TYPOSCRIPT:\\s*source\\s*=\\s*(?:\"[^\"\\r\\n]*\"|'[^'\\r\\n]*')\\s*>/,\r\n          inside: {\r\n            string: {\r\n              pattern: /\"[^\"\\r\\n]*\"|'[^'\\r\\n]*'/,\r\n              inside: {\r\n                keyword: keywords\r\n              }\r\n            },\r\n            keyword: {\r\n              pattern: /INCLUDE_TYPOSCRIPT/\r\n            }\r\n          }\r\n        },\r\n        {\r\n          // new include style\r\n          pattern: /@import\\s*(?:\"[^\"\\r\\n]*\"|'[^'\\r\\n]*')/,\r\n          inside: {\r\n            string: /\"[^\"\\r\\n]*\"|'[^'\\r\\n]*'/\r\n          }\r\n        }\r\n      ],\r\n      string: {\r\n        pattern: /^([^=]*=[< ]?)(?:(?!\\]\\n).)*/,\r\n        lookbehind: true,\r\n        inside: {\r\n          function: /\\{\\$.*\\}/,\r\n          // constants include\r\n          keyword: keywords,\r\n          number: /^\\d+$/,\r\n          punctuation: /[,|:]/\r\n        }\r\n      },\r\n      keyword: keywords,\r\n      number: {\r\n        // special highlighting for indexes of arrays in tags\r\n        pattern: /\\b\\d+\\s*[.{=]/,\r\n        inside: {\r\n          operator: /[.{=]/\r\n        }\r\n      },\r\n      tag: {\r\n        pattern: /\\.?[-\\w\\\\]+\\.?/,\r\n        inside: {\r\n          punctuation: /\\./\r\n        }\r\n      },\r\n      punctuation: /[{}[\\];(),.:|]/,\r\n      operator: /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/\r\n    }\r\n    Prism.languages.tsconfig = Prism.languages.typoscript\r\n  })(Prism)\r\n}\r\n"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,UAAjB;AACAA,UAAU,CAACC,WAAX,GAAyB,YAAzB;AACAD,UAAU,CAACE,OAAX,GAAqB,CAAC,UAAD,CAArB;;AACA,SAASF,UAAT,CAAoBG,KAApB,EAA2B;EACzB;;EAAC,CAAC,UAAUA,KAAV,EAAiB;IACjB,IAAIC,QAAQ,GACV,+bADF;IAEAD,KAAK,CAACE,SAAN,CAAgBL,UAAhB,GAA6B;MAC3BM,OAAO,EAAE,CACP;QACE;QACAC,OAAO,EAAE,iCAFX;QAGEC,UAAU,EAAE;MAHd,CADO,EAMP;QACE;QACA;QACAD,OAAO,EAAE,0CAHX;QAIEC,UAAU,EAAE,IAJd;QAKEC,MAAM,EAAE;MALV,CANO,EAaP;QACE;QACAF,OAAO,EAAE,cAFX;QAGEC,UAAU,EAAE,IAHd;QAIEC,MAAM,EAAE;MAJV,CAbO,CADkB;MAqB3BC,QAAQ,EAAE,CACR;QACE;QACAH,OAAO,EACL,qEAHJ;QAIEI,MAAM,EAAE;UACNC,MAAM,EAAE;YACNL,OAAO,EAAE,yBADH;YAENI,MAAM,EAAE;cACNE,OAAO,EAAET;YADH;UAFF,CADF;UAONS,OAAO,EAAE;YACPN,OAAO,EAAE;UADF;QAPH;MAJV,CADQ,EAiBR;QACE;QACAA,OAAO,EAAE,uCAFX;QAGEI,MAAM,EAAE;UACNC,MAAM,EAAE;QADF;MAHV,CAjBQ,CArBiB;MA8C3BA,MAAM,EAAE;QACNL,OAAO,EAAE,8BADH;QAENC,UAAU,EAAE,IAFN;QAGNG,MAAM,EAAE;UACND,QAAQ,EAAE,UADJ;UAEN;UACAG,OAAO,EAAET,QAHH;UAINU,MAAM,EAAE,OAJF;UAKNC,WAAW,EAAE;QALP;MAHF,CA9CmB;MAyD3BF,OAAO,EAAET,QAzDkB;MA0D3BU,MAAM,EAAE;QACN;QACAP,OAAO,EAAE,eAFH;QAGNI,MAAM,EAAE;UACNK,QAAQ,EAAE;QADJ;MAHF,CA1DmB;MAiE3BC,GAAG,EAAE;QACHV,OAAO,EAAE,gBADN;QAEHI,MAAM,EAAE;UACNI,WAAW,EAAE;QADP;MAFL,CAjEsB;MAuE3BA,WAAW,EAAE,gBAvEc;MAwE3BC,QAAQ,EAAE;IAxEiB,CAA7B;IA0EAb,KAAK,CAACE,SAAN,CAAgBa,QAAhB,GAA2Bf,KAAK,CAACE,SAAN,CAAgBL,UAA3C;EACD,CA9EA,EA8EEG,KA9EF;AA+EF"},"metadata":{},"sourceType":"script"}