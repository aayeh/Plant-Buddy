{"ast":null,"code":"'use strict';\n\nmodule.exports = kumir;\nkumir.displayName = 'kumir';\nkumir.aliases = ['kum'];\n\nfunction kumir(Prism) {\n  /* eslint-disable regexp/no-dupe-characters-character-class */\n  ;\n\n  (function (Prism) {\n    /**\r\n     * Regular expression for characters that are not allowed in identifiers.\r\n     *\r\n     * @type {string}\r\n     */\n    var nonId = /\\s\\x00-\\x1f\\x22-\\x2f\\x3a-\\x3f\\x5b-\\x5e\\x60\\x7b-\\x7e/.source;\n    /**\r\n     * Surround a regular expression for IDs with patterns for non-ID sequences.\r\n     *\r\n     * @param {string} pattern A regular expression for identifiers.\r\n     * @param {string} [flags] The regular expression flags.\r\n     * @returns {RegExp} A wrapped regular expression for identifiers.\r\n     */\n\n    function wrapId(pattern, flags) {\n      return RegExp(pattern.replace(/<nonId>/g, nonId), flags);\n    }\n\n    Prism.languages.kumir = {\n      comment: {\n        pattern: /\\|.*/\n      },\n      prolog: {\n        pattern: /#.*/,\n        greedy: true\n      },\n      string: {\n        pattern: /\"[^\\n\\r\"]*\"|'[^\\n\\r']*'/,\n        greedy: true\n      },\n      boolean: {\n        pattern: wrapId(/(^|[<nonId>])(?:да|нет)(?=[<nonId>]|$)/.source),\n        lookbehind: true\n      },\n      'operator-word': {\n        pattern: wrapId(/(^|[<nonId>])(?:и|или|не)(?=[<nonId>]|$)/.source),\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      'system-variable': {\n        pattern: wrapId(/(^|[<nonId>])знач(?=[<nonId>]|$)/.source),\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      type: [{\n        pattern: wrapId(/(^|[<nonId>])(?:вещ|лит|лог|сим|цел)(?:\\x20*таб)?(?=[<nonId>]|$)/.source),\n        lookbehind: true,\n        alias: 'builtin'\n      }, {\n        pattern: wrapId(/(^|[<nonId>])(?:компл|сканкод|файл|цвет)(?=[<nonId>]|$)/.source),\n        lookbehind: true,\n        alias: 'important'\n      }],\n\n      /**\r\n       * Should be performed after searching for type names because of \"таб\".\r\n       * \"таб\" is a reserved word, but never used without a preceding type name.\r\n       * \"НАЗНАЧИТЬ\", \"Фввод\", and \"Фвывод\" are not reserved words.\r\n       */\n      keyword: {\n        pattern: wrapId(/(^|[<nonId>])(?:алг|арг(?:\\x20*рез)?|ввод|ВКЛЮЧИТЬ|вс[её]|выбор|вывод|выход|дано|для|до|дс|если|иначе|исп|использовать|кон(?:(?:\\x20+|_)исп)?|кц(?:(?:\\x20+|_)при)?|надо|нач|нс|нц|от|пауза|пока|при|раза?|рез|стоп|таб|то|утв|шаг)(?=[<nonId>]|$)/.source),\n        lookbehind: true\n      },\n\n      /** Should be performed after searching for reserved words. */\n      name: {\n        // eslint-disable-next-line regexp/no-super-linear-backtracking\n        pattern: wrapId(/(^|[<nonId>])[^\\d<nonId>][^<nonId>]*(?:\\x20+[^<nonId>]+)*(?=[<nonId>]|$)/.source),\n        lookbehind: true\n      },\n\n      /** Should be performed after searching for names. */\n      number: {\n        pattern: wrapId(/(^|[<nonId>])(?:\\B\\$[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)(?=[<nonId>]|$)/.source, 'i'),\n        lookbehind: true\n      },\n\n      /** Should be performed after searching for words. */\n      punctuation: /:=|[(),:;\\[\\]]/,\n\n      /**\r\n       * Should be performed after searching for\r\n       * - numeric constants (because of \"+\" and \"-\");\r\n       * - punctuation marks (because of \":=\" and \"=\").\r\n       */\n      'operator-char': {\n        pattern: /\\*\\*?|<[=>]?|>=?|[-+/=]/,\n        alias: 'operator'\n      }\n    };\n    Prism.languages.kum = Prism.languages.kumir;\n  })(Prism);\n}","map":{"version":3,"names":["module","exports","kumir","displayName","aliases","Prism","nonId","source","wrapId","pattern","flags","RegExp","replace","languages","comment","prolog","greedy","string","boolean","lookbehind","alias","type","keyword","name","number","punctuation","kum"],"sources":["C:/Users/ayeh8/Documents/Plant-Buddy/node_modules/refractor/lang/kumir.js"],"sourcesContent":["'use strict'\r\n\r\nmodule.exports = kumir\r\nkumir.displayName = 'kumir'\r\nkumir.aliases = ['kum']\r\nfunction kumir(Prism) {\r\n  /* eslint-disable regexp/no-dupe-characters-character-class */\r\n  ;(function (Prism) {\r\n    /**\r\n     * Regular expression for characters that are not allowed in identifiers.\r\n     *\r\n     * @type {string}\r\n     */\r\n    var nonId = /\\s\\x00-\\x1f\\x22-\\x2f\\x3a-\\x3f\\x5b-\\x5e\\x60\\x7b-\\x7e/.source\r\n    /**\r\n     * Surround a regular expression for IDs with patterns for non-ID sequences.\r\n     *\r\n     * @param {string} pattern A regular expression for identifiers.\r\n     * @param {string} [flags] The regular expression flags.\r\n     * @returns {RegExp} A wrapped regular expression for identifiers.\r\n     */\r\n    function wrapId(pattern, flags) {\r\n      return RegExp(pattern.replace(/<nonId>/g, nonId), flags)\r\n    }\r\n    Prism.languages.kumir = {\r\n      comment: {\r\n        pattern: /\\|.*/\r\n      },\r\n      prolog: {\r\n        pattern: /#.*/,\r\n        greedy: true\r\n      },\r\n      string: {\r\n        pattern: /\"[^\\n\\r\"]*\"|'[^\\n\\r']*'/,\r\n        greedy: true\r\n      },\r\n      boolean: {\r\n        pattern: wrapId(/(^|[<nonId>])(?:да|нет)(?=[<nonId>]|$)/.source),\r\n        lookbehind: true\r\n      },\r\n      'operator-word': {\r\n        pattern: wrapId(/(^|[<nonId>])(?:и|или|не)(?=[<nonId>]|$)/.source),\r\n        lookbehind: true,\r\n        alias: 'keyword'\r\n      },\r\n      'system-variable': {\r\n        pattern: wrapId(/(^|[<nonId>])знач(?=[<nonId>]|$)/.source),\r\n        lookbehind: true,\r\n        alias: 'keyword'\r\n      },\r\n      type: [\r\n        {\r\n          pattern: wrapId(\r\n            /(^|[<nonId>])(?:вещ|лит|лог|сим|цел)(?:\\x20*таб)?(?=[<nonId>]|$)/\r\n              .source\r\n          ),\r\n          lookbehind: true,\r\n          alias: 'builtin'\r\n        },\r\n        {\r\n          pattern: wrapId(\r\n            /(^|[<nonId>])(?:компл|сканкод|файл|цвет)(?=[<nonId>]|$)/.source\r\n          ),\r\n          lookbehind: true,\r\n          alias: 'important'\r\n        }\r\n      ],\r\n      /**\r\n       * Should be performed after searching for type names because of \"таб\".\r\n       * \"таб\" is a reserved word, but never used without a preceding type name.\r\n       * \"НАЗНАЧИТЬ\", \"Фввод\", and \"Фвывод\" are not reserved words.\r\n       */\r\n      keyword: {\r\n        pattern: wrapId(\r\n          /(^|[<nonId>])(?:алг|арг(?:\\x20*рез)?|ввод|ВКЛЮЧИТЬ|вс[её]|выбор|вывод|выход|дано|для|до|дс|если|иначе|исп|использовать|кон(?:(?:\\x20+|_)исп)?|кц(?:(?:\\x20+|_)при)?|надо|нач|нс|нц|от|пауза|пока|при|раза?|рез|стоп|таб|то|утв|шаг)(?=[<nonId>]|$)/\r\n            .source\r\n        ),\r\n        lookbehind: true\r\n      },\r\n      /** Should be performed after searching for reserved words. */\r\n      name: {\r\n        // eslint-disable-next-line regexp/no-super-linear-backtracking\r\n        pattern: wrapId(\r\n          /(^|[<nonId>])[^\\d<nonId>][^<nonId>]*(?:\\x20+[^<nonId>]+)*(?=[<nonId>]|$)/\r\n            .source\r\n        ),\r\n        lookbehind: true\r\n      },\r\n      /** Should be performed after searching for names. */\r\n      number: {\r\n        pattern: wrapId(\r\n          /(^|[<nonId>])(?:\\B\\$[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)(?=[<nonId>]|$)/\r\n            .source,\r\n          'i'\r\n        ),\r\n        lookbehind: true\r\n      },\r\n      /** Should be performed after searching for words. */\r\n      punctuation: /:=|[(),:;\\[\\]]/,\r\n      /**\r\n       * Should be performed after searching for\r\n       * - numeric constants (because of \"+\" and \"-\");\r\n       * - punctuation marks (because of \":=\" and \"=\").\r\n       */\r\n      'operator-char': {\r\n        pattern: /\\*\\*?|<[=>]?|>=?|[-+/=]/,\r\n        alias: 'operator'\r\n      }\r\n    }\r\n    Prism.languages.kum = Prism.languages.kumir\r\n  })(Prism)\r\n}\r\n"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,KAAjB;AACAA,KAAK,CAACC,WAAN,GAAoB,OAApB;AACAD,KAAK,CAACE,OAAN,GAAgB,CAAC,KAAD,CAAhB;;AACA,SAASF,KAAT,CAAeG,KAAf,EAAsB;EACpB;EACA;;EAAC,CAAC,UAAUA,KAAV,EAAiB;IACjB;AACJ;AACA;AACA;AACA;IACI,IAAIC,KAAK,GAAG,sDAAsDC,MAAlE;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;;IACI,SAASC,MAAT,CAAgBC,OAAhB,EAAyBC,KAAzB,EAAgC;MAC9B,OAAOC,MAAM,CAACF,OAAO,CAACG,OAAR,CAAgB,UAAhB,EAA4BN,KAA5B,CAAD,EAAqCI,KAArC,CAAb;IACD;;IACDL,KAAK,CAACQ,SAAN,CAAgBX,KAAhB,GAAwB;MACtBY,OAAO,EAAE;QACPL,OAAO,EAAE;MADF,CADa;MAItBM,MAAM,EAAE;QACNN,OAAO,EAAE,KADH;QAENO,MAAM,EAAE;MAFF,CAJc;MAQtBC,MAAM,EAAE;QACNR,OAAO,EAAE,yBADH;QAENO,MAAM,EAAE;MAFF,CARc;MAYtBE,OAAO,EAAE;QACPT,OAAO,EAAED,MAAM,CAAC,yCAAyCD,MAA1C,CADR;QAEPY,UAAU,EAAE;MAFL,CAZa;MAgBtB,iBAAiB;QACfV,OAAO,EAAED,MAAM,CAAC,2CAA2CD,MAA5C,CADA;QAEfY,UAAU,EAAE,IAFG;QAGfC,KAAK,EAAE;MAHQ,CAhBK;MAqBtB,mBAAmB;QACjBX,OAAO,EAAED,MAAM,CAAC,mCAAmCD,MAApC,CADE;QAEjBY,UAAU,EAAE,IAFK;QAGjBC,KAAK,EAAE;MAHU,CArBG;MA0BtBC,IAAI,EAAE,CACJ;QACEZ,OAAO,EAAED,MAAM,CACb,mEACGD,MAFU,CADjB;QAKEY,UAAU,EAAE,IALd;QAMEC,KAAK,EAAE;MANT,CADI,EASJ;QACEX,OAAO,EAAED,MAAM,CACb,0DAA0DD,MAD7C,CADjB;QAIEY,UAAU,EAAE,IAJd;QAKEC,KAAK,EAAE;MALT,CATI,CA1BgB;;MA2CtB;AACN;AACA;AACA;AACA;MACME,OAAO,EAAE;QACPb,OAAO,EAAED,MAAM,CACb,qPACGD,MAFU,CADR;QAKPY,UAAU,EAAE;MALL,CAhDa;;MAuDtB;MACAI,IAAI,EAAE;QACJ;QACAd,OAAO,EAAED,MAAM,CACb,2EACGD,MAFU,CAFX;QAMJY,UAAU,EAAE;MANR,CAxDgB;;MAgEtB;MACAK,MAAM,EAAE;QACNf,OAAO,EAAED,MAAM,CACb,2FACGD,MAFU,EAGb,GAHa,CADT;QAMNY,UAAU,EAAE;MANN,CAjEc;;MAyEtB;MACAM,WAAW,EAAE,gBA1ES;;MA2EtB;AACN;AACA;AACA;AACA;MACM,iBAAiB;QACfhB,OAAO,EAAE,yBADM;QAEfW,KAAK,EAAE;MAFQ;IAhFK,CAAxB;IAqFAf,KAAK,CAACQ,SAAN,CAAgBa,GAAhB,GAAsBrB,KAAK,CAACQ,SAAN,CAAgBX,KAAtC;EACD,CAvGA,EAuGEG,KAvGF;AAwGF"},"metadata":{},"sourceType":"script"}