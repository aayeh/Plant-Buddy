{"ast":null,"code":"'use strict';\n/* eslint-env browser */\n\nvar el;\nvar semicolon = 59; //  ';'\n\nmodule.exports = decodeEntity;\n\nfunction decodeEntity(characters) {\n  var entity = '&' + characters + ';';\n  var char;\n  el = el || document.createElement('i');\n  el.innerHTML = entity;\n  char = el.textContent; // Some entities do not require the closing semicolon (`&not` - for instance),\n  // which leads to situations where parsing the assumed entity of &notit; will\n  // result in the string `¬it;`.  When we encounter a trailing semicolon after\n  // parsing and the entity to decode was not a semicolon (`&semi;`), we can\n  // assume that the matching was incomplete\n\n  if (char.charCodeAt(char.length - 1) === semicolon && characters !== 'semi') {\n    return false;\n  } // If the decoded string is equal to the input, the entity was not valid\n\n\n  return char === entity ? false : char;\n}","map":{"version":3,"names":["el","semicolon","module","exports","decodeEntity","characters","entity","char","document","createElement","innerHTML","textContent","charCodeAt","length"],"sources":["C:/Users/ayeh8/Documents/Plant-Buddy/node_modules/parse-entities/decode-entity.browser.js"],"sourcesContent":["'use strict'\r\n\r\n/* eslint-env browser */\r\n\r\nvar el\r\n\r\nvar semicolon = 59 //  ';'\r\n\r\nmodule.exports = decodeEntity\r\n\r\nfunction decodeEntity(characters) {\r\n  var entity = '&' + characters + ';'\r\n  var char\r\n\r\n  el = el || document.createElement('i')\r\n  el.innerHTML = entity\r\n  char = el.textContent\r\n\r\n  // Some entities do not require the closing semicolon (`&not` - for instance),\r\n  // which leads to situations where parsing the assumed entity of &notit; will\r\n  // result in the string `¬it;`.  When we encounter a trailing semicolon after\r\n  // parsing and the entity to decode was not a semicolon (`&semi;`), we can\r\n  // assume that the matching was incomplete\r\n  if (char.charCodeAt(char.length - 1) === semicolon && characters !== 'semi') {\r\n    return false\r\n  }\r\n\r\n  // If the decoded string is equal to the input, the entity was not valid\r\n  return char === entity ? false : char\r\n}\r\n"],"mappings":"AAAA;AAEA;;AAEA,IAAIA,EAAJ;AAEA,IAAIC,SAAS,GAAG,EAAhB,C,CAAmB;;AAEnBC,MAAM,CAACC,OAAP,GAAiBC,YAAjB;;AAEA,SAASA,YAAT,CAAsBC,UAAtB,EAAkC;EAChC,IAAIC,MAAM,GAAG,MAAMD,UAAN,GAAmB,GAAhC;EACA,IAAIE,IAAJ;EAEAP,EAAE,GAAGA,EAAE,IAAIQ,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAAX;EACAT,EAAE,CAACU,SAAH,GAAeJ,MAAf;EACAC,IAAI,GAAGP,EAAE,CAACW,WAAV,CANgC,CAQhC;EACA;EACA;EACA;EACA;;EACA,IAAIJ,IAAI,CAACK,UAAL,CAAgBL,IAAI,CAACM,MAAL,GAAc,CAA9B,MAAqCZ,SAArC,IAAkDI,UAAU,KAAK,MAArE,EAA6E;IAC3E,OAAO,KAAP;EACD,CAf+B,CAiBhC;;;EACA,OAAOE,IAAI,KAAKD,MAAT,GAAkB,KAAlB,GAA0BC,IAAjC;AACD"},"metadata":{},"sourceType":"script"}