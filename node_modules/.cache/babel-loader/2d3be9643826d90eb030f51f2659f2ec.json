{"ast":null,"code":"'use strict';\n\nmodule.exports = reason;\nreason.displayName = 'reason';\nreason.aliases = [];\n\nfunction reason(Prism) {\n  Prism.languages.reason = Prism.languages.extend('clike', {\n    string: {\n      pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,\n      greedy: true\n    },\n    // 'class-name' must be matched *after* 'constructor' defined below\n    'class-name': /\\b[A-Z]\\w*/,\n    keyword: /\\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\\b/,\n    operator: /\\.{3}|:[:=]|\\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\\-*\\/]\\.?|\\b(?:asr|land|lor|lsl|lsr|lxor|mod)\\b/\n  });\n  Prism.languages.insertBefore('reason', 'class-name', {\n    char: {\n      pattern: /'(?:\\\\x[\\da-f]{2}|\\\\o[0-3][0-7][0-7]|\\\\\\d{3}|\\\\.|[^'\\\\\\r\\n])'/,\n      greedy: true\n    },\n    // Negative look-ahead prevents from matching things like String.capitalize\n    constructor: /\\b[A-Z]\\w*\\b(?!\\s*\\.)/,\n    label: {\n      pattern: /\\b[a-z]\\w*(?=::)/,\n      alias: 'symbol'\n    }\n  }); // We can't match functions property, so let's not even try.\n\n  delete Prism.languages.reason.function;\n}","map":{"version":3,"names":["module","exports","reason","displayName","aliases","Prism","languages","extend","string","pattern","greedy","keyword","operator","insertBefore","char","constructor","label","alias","function"],"sources":["C:/Users/ayeh8/Documents/Plant-Buddy/node_modules/refractor/lang/reason.js"],"sourcesContent":["'use strict'\r\n\r\nmodule.exports = reason\r\nreason.displayName = 'reason'\r\nreason.aliases = []\r\nfunction reason(Prism) {\r\n  Prism.languages.reason = Prism.languages.extend('clike', {\r\n    string: {\r\n      pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,\r\n      greedy: true\r\n    },\r\n    // 'class-name' must be matched *after* 'constructor' defined below\r\n    'class-name': /\\b[A-Z]\\w*/,\r\n    keyword:\r\n      /\\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\\b/,\r\n    operator:\r\n      /\\.{3}|:[:=]|\\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\\-*\\/]\\.?|\\b(?:asr|land|lor|lsl|lsr|lxor|mod)\\b/\r\n  })\r\n  Prism.languages.insertBefore('reason', 'class-name', {\r\n    char: {\r\n      pattern: /'(?:\\\\x[\\da-f]{2}|\\\\o[0-3][0-7][0-7]|\\\\\\d{3}|\\\\.|[^'\\\\\\r\\n])'/,\r\n      greedy: true\r\n    },\r\n    // Negative look-ahead prevents from matching things like String.capitalize\r\n    constructor: /\\b[A-Z]\\w*\\b(?!\\s*\\.)/,\r\n    label: {\r\n      pattern: /\\b[a-z]\\w*(?=::)/,\r\n      alias: 'symbol'\r\n    }\r\n  }) // We can't match functions property, so let's not even try.\r\n  delete Prism.languages.reason.function\r\n}\r\n"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,MAAjB;AACAA,MAAM,CAACC,WAAP,GAAqB,QAArB;AACAD,MAAM,CAACE,OAAP,GAAiB,EAAjB;;AACA,SAASF,MAAT,CAAgBG,KAAhB,EAAuB;EACrBA,KAAK,CAACC,SAAN,CAAgBJ,MAAhB,GAAyBG,KAAK,CAACC,SAAN,CAAgBC,MAAhB,CAAuB,OAAvB,EAAgC;IACvDC,MAAM,EAAE;MACNC,OAAO,EAAE,qCADH;MAENC,MAAM,EAAE;IAFF,CAD+C;IAKvD;IACA,cAAc,YANyC;IAOvDC,OAAO,EACL,2RARqD;IASvDC,QAAQ,EACN;EAVqD,CAAhC,CAAzB;EAYAP,KAAK,CAACC,SAAN,CAAgBO,YAAhB,CAA6B,QAA7B,EAAuC,YAAvC,EAAqD;IACnDC,IAAI,EAAE;MACJL,OAAO,EAAE,+DADL;MAEJC,MAAM,EAAE;IAFJ,CAD6C;IAKnD;IACAK,WAAW,EAAE,uBANsC;IAOnDC,KAAK,EAAE;MACLP,OAAO,EAAE,kBADJ;MAELQ,KAAK,EAAE;IAFF;EAP4C,CAArD,EAbqB,CAwBlB;;EACH,OAAOZ,KAAK,CAACC,SAAN,CAAgBJ,MAAhB,CAAuBgB,QAA9B;AACD"},"metadata":{},"sourceType":"script"}