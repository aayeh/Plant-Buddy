{"ast":null,"code":"/**\r\n * @param {string} value\r\n * @returns {RegExp}\r\n * */\n\n/**\r\n * @param {RegExp | string } re\r\n * @returns {string}\r\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n  return re.source;\n}\n/**\r\n * @param {...(RegExp | string) } args\r\n * @returns {string}\r\n */\n\n\nfunction concat() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  const joined = args.map(x => source(x)).join(\"\");\n  return joined;\n}\n/**\r\n * Any of the passed expresssions may match\r\n *\r\n * Creates a huge this | this | that | that match\r\n * @param {(RegExp | string)[] } args\r\n * @returns {string}\r\n */\n\n\nfunction either() {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  const joined = '(' + args.map(x => source(x)).join(\"|\") + \")\";\n  return joined;\n}\n/*\r\nLanguage: Perl\r\nAuthor: Peter Leonov <gojpeg@yandex.ru>\r\nWebsite: https://www.perl.org\r\nCategory: common\r\n*/\n\n/** @type LanguageFn */\n\n\nfunction perl(hljs) {\n  const KEYWORDS = ['abs', 'accept', 'alarm', 'and', 'atan2', 'bind', 'binmode', 'bless', 'break', 'caller', 'chdir', 'chmod', 'chomp', 'chop', 'chown', 'chr', 'chroot', 'close', 'closedir', 'connect', 'continue', 'cos', 'crypt', 'dbmclose', 'dbmopen', 'defined', 'delete', 'die', 'do', 'dump', 'each', 'else', 'elsif', 'endgrent', 'endhostent', 'endnetent', 'endprotoent', 'endpwent', 'endservent', 'eof', 'eval', 'exec', 'exists', 'exit', 'exp', 'fcntl', 'fileno', 'flock', 'for', 'foreach', 'fork', 'format', 'formline', 'getc', 'getgrent', 'getgrgid', 'getgrnam', 'gethostbyaddr', 'gethostbyname', 'gethostent', 'getlogin', 'getnetbyaddr', 'getnetbyname', 'getnetent', 'getpeername', 'getpgrp', 'getpriority', 'getprotobyname', 'getprotobynumber', 'getprotoent', 'getpwent', 'getpwnam', 'getpwuid', 'getservbyname', 'getservbyport', 'getservent', 'getsockname', 'getsockopt', 'given', 'glob', 'gmtime', 'goto', 'grep', 'gt', 'hex', 'if', 'index', 'int', 'ioctl', 'join', 'keys', 'kill', 'last', 'lc', 'lcfirst', 'length', 'link', 'listen', 'local', 'localtime', 'log', 'lstat', 'lt', 'ma', 'map', 'mkdir', 'msgctl', 'msgget', 'msgrcv', 'msgsnd', 'my', 'ne', 'next', 'no', 'not', 'oct', 'open', 'opendir', 'or', 'ord', 'our', 'pack', 'package', 'pipe', 'pop', 'pos', 'print', 'printf', 'prototype', 'push', 'q|0', 'qq', 'quotemeta', 'qw', 'qx', 'rand', 'read', 'readdir', 'readline', 'readlink', 'readpipe', 'recv', 'redo', 'ref', 'rename', 'require', 'reset', 'return', 'reverse', 'rewinddir', 'rindex', 'rmdir', 'say', 'scalar', 'seek', 'seekdir', 'select', 'semctl', 'semget', 'semop', 'send', 'setgrent', 'sethostent', 'setnetent', 'setpgrp', 'setpriority', 'setprotoent', 'setpwent', 'setservent', 'setsockopt', 'shift', 'shmctl', 'shmget', 'shmread', 'shmwrite', 'shutdown', 'sin', 'sleep', 'socket', 'socketpair', 'sort', 'splice', 'split', 'sprintf', 'sqrt', 'srand', 'stat', 'state', 'study', 'sub', 'substr', 'symlink', 'syscall', 'sysopen', 'sysread', 'sysseek', 'system', 'syswrite', 'tell', 'telldir', 'tie', 'tied', 'time', 'times', 'tr', 'truncate', 'uc', 'ucfirst', 'umask', 'undef', 'unless', 'unlink', 'unpack', 'unshift', 'untie', 'until', 'use', 'utime', 'values', 'vec', 'wait', 'waitpid', 'wantarray', 'warn', 'when', 'while', 'write', 'x|0', 'xor', 'y|0']; // https://perldoc.perl.org/perlre#Modifiers\n\n  const REGEX_MODIFIERS = /[dualxmsipngr]{0,12}/; // aa and xx are valid, making max length 12\n\n  const PERL_KEYWORDS = {\n    $pattern: /[\\w.]+/,\n    keyword: KEYWORDS.join(\" \")\n  };\n  const SUBST = {\n    className: 'subst',\n    begin: '[$@]\\\\{',\n    end: '\\\\}',\n    keywords: PERL_KEYWORDS\n  };\n  const METHOD = {\n    begin: /->\\{/,\n    end: /\\}/ // contains defined later\n\n  };\n  const VAR = {\n    variants: [{\n      begin: /\\$\\d/\n    }, {\n      begin: concat(/[$%@](\\^\\w\\b|#\\w+(::\\w+)*|\\{\\w+\\}|\\w+(::\\w*)*)/, // negative look-ahead tries to avoid matching patterns that are not\n      // Perl at all like $ident$, @ident@, etc.\n      `(?![A-Za-z])(?![@$%])`)\n    }, {\n      begin: /[$%@][^\\s\\w{]/,\n      relevance: 0\n    }]\n  };\n  const STRING_CONTAINS = [hljs.BACKSLASH_ESCAPE, SUBST, VAR];\n  const REGEX_DELIMS = [/!/, /\\//, /\\|/, /\\?/, /'/, /\"/, // valid but infrequent and weird\n  /#/ // valid but infrequent and weird\n  ];\n  /**\r\n   * @param {string|RegExp} prefix\r\n   * @param {string|RegExp} open\r\n   * @param {string|RegExp} close\r\n   */\n\n  const PAIRED_DOUBLE_RE = function (prefix, open) {\n    let close = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '\\\\1';\n    const middle = close === '\\\\1' ? close : concat(close, open);\n    return concat(concat(\"(?:\", prefix, \")\"), open, /(?:\\\\.|[^\\\\\\/])*?/, middle, /(?:\\\\.|[^\\\\\\/])*?/, close, REGEX_MODIFIERS);\n  };\n  /**\r\n   * @param {string|RegExp} prefix\r\n   * @param {string|RegExp} open\r\n   * @param {string|RegExp} close\r\n   */\n\n\n  const PAIRED_RE = (prefix, open, close) => {\n    return concat(concat(\"(?:\", prefix, \")\"), open, /(?:\\\\.|[^\\\\\\/])*?/, close, REGEX_MODIFIERS);\n  };\n\n  const PERL_DEFAULT_CONTAINS = [VAR, hljs.HASH_COMMENT_MODE, hljs.COMMENT(/^=\\w/, /=cut/, {\n    endsWithParent: true\n  }), METHOD, {\n    className: 'string',\n    contains: STRING_CONTAINS,\n    variants: [{\n      begin: 'q[qwxr]?\\\\s*\\\\(',\n      end: '\\\\)',\n      relevance: 5\n    }, {\n      begin: 'q[qwxr]?\\\\s*\\\\[',\n      end: '\\\\]',\n      relevance: 5\n    }, {\n      begin: 'q[qwxr]?\\\\s*\\\\{',\n      end: '\\\\}',\n      relevance: 5\n    }, {\n      begin: 'q[qwxr]?\\\\s*\\\\|',\n      end: '\\\\|',\n      relevance: 5\n    }, {\n      begin: 'q[qwxr]?\\\\s*<',\n      end: '>',\n      relevance: 5\n    }, {\n      begin: 'qw\\\\s+q',\n      end: 'q',\n      relevance: 5\n    }, {\n      begin: '\\'',\n      end: '\\'',\n      contains: [hljs.BACKSLASH_ESCAPE]\n    }, {\n      begin: '\"',\n      end: '\"'\n    }, {\n      begin: '`',\n      end: '`',\n      contains: [hljs.BACKSLASH_ESCAPE]\n    }, {\n      begin: /\\{\\w+\\}/,\n      relevance: 0\n    }, {\n      begin: '-?\\\\w+\\\\s*=>',\n      relevance: 0\n    }]\n  }, {\n    className: 'number',\n    begin: '(\\\\b0[0-7_]+)|(\\\\b0x[0-9a-fA-F_]+)|(\\\\b[1-9][0-9_]*(\\\\.[0-9_]+)?)|[0_]\\\\b',\n    relevance: 0\n  }, {\n    // regexp container\n    begin: '(\\\\/\\\\/|' + hljs.RE_STARTERS_RE + '|\\\\b(split|return|print|reverse|grep)\\\\b)\\\\s*',\n    keywords: 'split return print reverse grep',\n    relevance: 0,\n    contains: [hljs.HASH_COMMENT_MODE, {\n      className: 'regexp',\n      variants: [// allow matching common delimiters\n      {\n        begin: PAIRED_DOUBLE_RE(\"s|tr|y\", either(...REGEX_DELIMS))\n      }, // and then paired delmis\n      {\n        begin: PAIRED_DOUBLE_RE(\"s|tr|y\", \"\\\\(\", \"\\\\)\")\n      }, {\n        begin: PAIRED_DOUBLE_RE(\"s|tr|y\", \"\\\\[\", \"\\\\]\")\n      }, {\n        begin: PAIRED_DOUBLE_RE(\"s|tr|y\", \"\\\\{\", \"\\\\}\")\n      }],\n      relevance: 2\n    }, {\n      className: 'regexp',\n      variants: [{\n        // could be a comment in many languages so do not count\n        // as relevant\n        begin: /(m|qr)\\/\\//,\n        relevance: 0\n      }, // prefix is optional with /regex/\n      {\n        begin: PAIRED_RE(\"(?:m|qr)?\", /\\//, /\\//)\n      }, // allow matching common delimiters\n      {\n        begin: PAIRED_RE(\"m|qr\", either(...REGEX_DELIMS), /\\1/)\n      }, // allow common paired delmins\n      {\n        begin: PAIRED_RE(\"m|qr\", /\\(/, /\\)/)\n      }, {\n        begin: PAIRED_RE(\"m|qr\", /\\[/, /\\]/)\n      }, {\n        begin: PAIRED_RE(\"m|qr\", /\\{/, /\\}/)\n      }]\n    }]\n  }, {\n    className: 'function',\n    beginKeywords: 'sub',\n    end: '(\\\\s*\\\\(.*?\\\\))?[;{]',\n    excludeEnd: true,\n    relevance: 5,\n    contains: [hljs.TITLE_MODE]\n  }, {\n    begin: '-\\\\w\\\\b',\n    relevance: 0\n  }, {\n    begin: \"^__DATA__$\",\n    end: \"^__END__$\",\n    subLanguage: 'mojolicious',\n    contains: [{\n      begin: \"^@@.*\",\n      end: \"$\",\n      className: \"comment\"\n    }]\n  }];\n  SUBST.contains = PERL_DEFAULT_CONTAINS;\n  METHOD.contains = PERL_DEFAULT_CONTAINS;\n  return {\n    name: 'Perl',\n    aliases: ['pl', 'pm'],\n    keywords: PERL_KEYWORDS,\n    contains: PERL_DEFAULT_CONTAINS\n  };\n}\n\nmodule.exports = perl;","map":{"version":3,"names":["source","re","concat","args","joined","map","x","join","either","perl","hljs","KEYWORDS","REGEX_MODIFIERS","PERL_KEYWORDS","$pattern","keyword","SUBST","className","begin","end","keywords","METHOD","VAR","variants","relevance","STRING_CONTAINS","BACKSLASH_ESCAPE","REGEX_DELIMS","PAIRED_DOUBLE_RE","prefix","open","close","middle","PAIRED_RE","PERL_DEFAULT_CONTAINS","HASH_COMMENT_MODE","COMMENT","endsWithParent","contains","RE_STARTERS_RE","beginKeywords","excludeEnd","TITLE_MODE","subLanguage","name","aliases","module","exports"],"sources":["C:/Users/ayeh8/Documents/Plant-Buddy/node_modules/highlight.js/lib/languages/perl.js"],"sourcesContent":["/**\r\n * @param {string} value\r\n * @returns {RegExp}\r\n * */\r\n\r\n/**\r\n * @param {RegExp | string } re\r\n * @returns {string}\r\n */\r\nfunction source(re) {\r\n  if (!re) return null;\r\n  if (typeof re === \"string\") return re;\r\n\r\n  return re.source;\r\n}\r\n\r\n/**\r\n * @param {...(RegExp | string) } args\r\n * @returns {string}\r\n */\r\nfunction concat(...args) {\r\n  const joined = args.map((x) => source(x)).join(\"\");\r\n  return joined;\r\n}\r\n\r\n/**\r\n * Any of the passed expresssions may match\r\n *\r\n * Creates a huge this | this | that | that match\r\n * @param {(RegExp | string)[] } args\r\n * @returns {string}\r\n */\r\nfunction either(...args) {\r\n  const joined = '(' + args.map((x) => source(x)).join(\"|\") + \")\";\r\n  return joined;\r\n}\r\n\r\n/*\r\nLanguage: Perl\r\nAuthor: Peter Leonov <gojpeg@yandex.ru>\r\nWebsite: https://www.perl.org\r\nCategory: common\r\n*/\r\n\r\n/** @type LanguageFn */\r\nfunction perl(hljs) {\r\n  const KEYWORDS = [\r\n    'abs',\r\n    'accept',\r\n    'alarm',\r\n    'and',\r\n    'atan2',\r\n    'bind',\r\n    'binmode',\r\n    'bless',\r\n    'break',\r\n    'caller',\r\n    'chdir',\r\n    'chmod',\r\n    'chomp',\r\n    'chop',\r\n    'chown',\r\n    'chr',\r\n    'chroot',\r\n    'close',\r\n    'closedir',\r\n    'connect',\r\n    'continue',\r\n    'cos',\r\n    'crypt',\r\n    'dbmclose',\r\n    'dbmopen',\r\n    'defined',\r\n    'delete',\r\n    'die',\r\n    'do',\r\n    'dump',\r\n    'each',\r\n    'else',\r\n    'elsif',\r\n    'endgrent',\r\n    'endhostent',\r\n    'endnetent',\r\n    'endprotoent',\r\n    'endpwent',\r\n    'endservent',\r\n    'eof',\r\n    'eval',\r\n    'exec',\r\n    'exists',\r\n    'exit',\r\n    'exp',\r\n    'fcntl',\r\n    'fileno',\r\n    'flock',\r\n    'for',\r\n    'foreach',\r\n    'fork',\r\n    'format',\r\n    'formline',\r\n    'getc',\r\n    'getgrent',\r\n    'getgrgid',\r\n    'getgrnam',\r\n    'gethostbyaddr',\r\n    'gethostbyname',\r\n    'gethostent',\r\n    'getlogin',\r\n    'getnetbyaddr',\r\n    'getnetbyname',\r\n    'getnetent',\r\n    'getpeername',\r\n    'getpgrp',\r\n    'getpriority',\r\n    'getprotobyname',\r\n    'getprotobynumber',\r\n    'getprotoent',\r\n    'getpwent',\r\n    'getpwnam',\r\n    'getpwuid',\r\n    'getservbyname',\r\n    'getservbyport',\r\n    'getservent',\r\n    'getsockname',\r\n    'getsockopt',\r\n    'given',\r\n    'glob',\r\n    'gmtime',\r\n    'goto',\r\n    'grep',\r\n    'gt',\r\n    'hex',\r\n    'if',\r\n    'index',\r\n    'int',\r\n    'ioctl',\r\n    'join',\r\n    'keys',\r\n    'kill',\r\n    'last',\r\n    'lc',\r\n    'lcfirst',\r\n    'length',\r\n    'link',\r\n    'listen',\r\n    'local',\r\n    'localtime',\r\n    'log',\r\n    'lstat',\r\n    'lt',\r\n    'ma',\r\n    'map',\r\n    'mkdir',\r\n    'msgctl',\r\n    'msgget',\r\n    'msgrcv',\r\n    'msgsnd',\r\n    'my',\r\n    'ne',\r\n    'next',\r\n    'no',\r\n    'not',\r\n    'oct',\r\n    'open',\r\n    'opendir',\r\n    'or',\r\n    'ord',\r\n    'our',\r\n    'pack',\r\n    'package',\r\n    'pipe',\r\n    'pop',\r\n    'pos',\r\n    'print',\r\n    'printf',\r\n    'prototype',\r\n    'push',\r\n    'q|0',\r\n    'qq',\r\n    'quotemeta',\r\n    'qw',\r\n    'qx',\r\n    'rand',\r\n    'read',\r\n    'readdir',\r\n    'readline',\r\n    'readlink',\r\n    'readpipe',\r\n    'recv',\r\n    'redo',\r\n    'ref',\r\n    'rename',\r\n    'require',\r\n    'reset',\r\n    'return',\r\n    'reverse',\r\n    'rewinddir',\r\n    'rindex',\r\n    'rmdir',\r\n    'say',\r\n    'scalar',\r\n    'seek',\r\n    'seekdir',\r\n    'select',\r\n    'semctl',\r\n    'semget',\r\n    'semop',\r\n    'send',\r\n    'setgrent',\r\n    'sethostent',\r\n    'setnetent',\r\n    'setpgrp',\r\n    'setpriority',\r\n    'setprotoent',\r\n    'setpwent',\r\n    'setservent',\r\n    'setsockopt',\r\n    'shift',\r\n    'shmctl',\r\n    'shmget',\r\n    'shmread',\r\n    'shmwrite',\r\n    'shutdown',\r\n    'sin',\r\n    'sleep',\r\n    'socket',\r\n    'socketpair',\r\n    'sort',\r\n    'splice',\r\n    'split',\r\n    'sprintf',\r\n    'sqrt',\r\n    'srand',\r\n    'stat',\r\n    'state',\r\n    'study',\r\n    'sub',\r\n    'substr',\r\n    'symlink',\r\n    'syscall',\r\n    'sysopen',\r\n    'sysread',\r\n    'sysseek',\r\n    'system',\r\n    'syswrite',\r\n    'tell',\r\n    'telldir',\r\n    'tie',\r\n    'tied',\r\n    'time',\r\n    'times',\r\n    'tr',\r\n    'truncate',\r\n    'uc',\r\n    'ucfirst',\r\n    'umask',\r\n    'undef',\r\n    'unless',\r\n    'unlink',\r\n    'unpack',\r\n    'unshift',\r\n    'untie',\r\n    'until',\r\n    'use',\r\n    'utime',\r\n    'values',\r\n    'vec',\r\n    'wait',\r\n    'waitpid',\r\n    'wantarray',\r\n    'warn',\r\n    'when',\r\n    'while',\r\n    'write',\r\n    'x|0',\r\n    'xor',\r\n    'y|0'\r\n  ];\r\n\r\n  // https://perldoc.perl.org/perlre#Modifiers\r\n  const REGEX_MODIFIERS = /[dualxmsipngr]{0,12}/; // aa and xx are valid, making max length 12\r\n  const PERL_KEYWORDS = {\r\n    $pattern: /[\\w.]+/,\r\n    keyword: KEYWORDS.join(\" \")\r\n  };\r\n  const SUBST = {\r\n    className: 'subst',\r\n    begin: '[$@]\\\\{',\r\n    end: '\\\\}',\r\n    keywords: PERL_KEYWORDS\r\n  };\r\n  const METHOD = {\r\n    begin: /->\\{/,\r\n    end: /\\}/\r\n    // contains defined later\r\n  };\r\n  const VAR = {\r\n    variants: [\r\n      {\r\n        begin: /\\$\\d/\r\n      },\r\n      {\r\n        begin: concat(\r\n          /[$%@](\\^\\w\\b|#\\w+(::\\w+)*|\\{\\w+\\}|\\w+(::\\w*)*)/,\r\n          // negative look-ahead tries to avoid matching patterns that are not\r\n          // Perl at all like $ident$, @ident@, etc.\r\n          `(?![A-Za-z])(?![@$%])`\r\n        )\r\n      },\r\n      {\r\n        begin: /[$%@][^\\s\\w{]/,\r\n        relevance: 0\r\n      }\r\n    ]\r\n  };\r\n  const STRING_CONTAINS = [\r\n    hljs.BACKSLASH_ESCAPE,\r\n    SUBST,\r\n    VAR\r\n  ];\r\n  const REGEX_DELIMS = [\r\n    /!/,\r\n    /\\//,\r\n    /\\|/,\r\n    /\\?/,\r\n    /'/,\r\n    /\"/, // valid but infrequent and weird\r\n    /#/ // valid but infrequent and weird\r\n  ];\r\n  /**\r\n   * @param {string|RegExp} prefix\r\n   * @param {string|RegExp} open\r\n   * @param {string|RegExp} close\r\n   */\r\n  const PAIRED_DOUBLE_RE = (prefix, open, close = '\\\\1') => {\r\n    const middle = (close === '\\\\1')\r\n      ? close\r\n      : concat(close, open);\r\n    return concat(\r\n      concat(\"(?:\", prefix, \")\"),\r\n      open,\r\n      /(?:\\\\.|[^\\\\\\/])*?/,\r\n      middle,\r\n      /(?:\\\\.|[^\\\\\\/])*?/,\r\n      close,\r\n      REGEX_MODIFIERS\r\n    );\r\n  };\r\n  /**\r\n   * @param {string|RegExp} prefix\r\n   * @param {string|RegExp} open\r\n   * @param {string|RegExp} close\r\n   */\r\n  const PAIRED_RE = (prefix, open, close) => {\r\n    return concat(\r\n      concat(\"(?:\", prefix, \")\"),\r\n      open,\r\n      /(?:\\\\.|[^\\\\\\/])*?/,\r\n      close,\r\n      REGEX_MODIFIERS\r\n    );\r\n  };\r\n  const PERL_DEFAULT_CONTAINS = [\r\n    VAR,\r\n    hljs.HASH_COMMENT_MODE,\r\n    hljs.COMMENT(\r\n      /^=\\w/,\r\n      /=cut/,\r\n      {\r\n        endsWithParent: true\r\n      }\r\n    ),\r\n    METHOD,\r\n    {\r\n      className: 'string',\r\n      contains: STRING_CONTAINS,\r\n      variants: [\r\n        {\r\n          begin: 'q[qwxr]?\\\\s*\\\\(',\r\n          end: '\\\\)',\r\n          relevance: 5\r\n        },\r\n        {\r\n          begin: 'q[qwxr]?\\\\s*\\\\[',\r\n          end: '\\\\]',\r\n          relevance: 5\r\n        },\r\n        {\r\n          begin: 'q[qwxr]?\\\\s*\\\\{',\r\n          end: '\\\\}',\r\n          relevance: 5\r\n        },\r\n        {\r\n          begin: 'q[qwxr]?\\\\s*\\\\|',\r\n          end: '\\\\|',\r\n          relevance: 5\r\n        },\r\n        {\r\n          begin: 'q[qwxr]?\\\\s*<',\r\n          end: '>',\r\n          relevance: 5\r\n        },\r\n        {\r\n          begin: 'qw\\\\s+q',\r\n          end: 'q',\r\n          relevance: 5\r\n        },\r\n        {\r\n          begin: '\\'',\r\n          end: '\\'',\r\n          contains: [ hljs.BACKSLASH_ESCAPE ]\r\n        },\r\n        {\r\n          begin: '\"',\r\n          end: '\"'\r\n        },\r\n        {\r\n          begin: '`',\r\n          end: '`',\r\n          contains: [ hljs.BACKSLASH_ESCAPE ]\r\n        },\r\n        {\r\n          begin: /\\{\\w+\\}/,\r\n          relevance: 0\r\n        },\r\n        {\r\n          begin: '-?\\\\w+\\\\s*=>',\r\n          relevance: 0\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      className: 'number',\r\n      begin: '(\\\\b0[0-7_]+)|(\\\\b0x[0-9a-fA-F_]+)|(\\\\b[1-9][0-9_]*(\\\\.[0-9_]+)?)|[0_]\\\\b',\r\n      relevance: 0\r\n    },\r\n    { // regexp container\r\n      begin: '(\\\\/\\\\/|' + hljs.RE_STARTERS_RE + '|\\\\b(split|return|print|reverse|grep)\\\\b)\\\\s*',\r\n      keywords: 'split return print reverse grep',\r\n      relevance: 0,\r\n      contains: [\r\n        hljs.HASH_COMMENT_MODE,\r\n        {\r\n          className: 'regexp',\r\n          variants: [\r\n            // allow matching common delimiters\r\n            { begin: PAIRED_DOUBLE_RE(\"s|tr|y\", either(...REGEX_DELIMS)) },\r\n            // and then paired delmis\r\n            { begin: PAIRED_DOUBLE_RE(\"s|tr|y\", \"\\\\(\", \"\\\\)\") },\r\n            { begin: PAIRED_DOUBLE_RE(\"s|tr|y\", \"\\\\[\", \"\\\\]\") },\r\n            { begin: PAIRED_DOUBLE_RE(\"s|tr|y\", \"\\\\{\", \"\\\\}\") }\r\n          ],\r\n          relevance: 2\r\n        },\r\n        {\r\n          className: 'regexp',\r\n          variants: [\r\n            {\r\n              // could be a comment in many languages so do not count\r\n              // as relevant\r\n              begin: /(m|qr)\\/\\//,\r\n              relevance: 0\r\n            },\r\n            // prefix is optional with /regex/\r\n            { begin: PAIRED_RE(\"(?:m|qr)?\", /\\//, /\\//)},\r\n            // allow matching common delimiters\r\n            { begin: PAIRED_RE(\"m|qr\", either(...REGEX_DELIMS), /\\1/)},\r\n            // allow common paired delmins\r\n            { begin: PAIRED_RE(\"m|qr\", /\\(/, /\\)/)},\r\n            { begin: PAIRED_RE(\"m|qr\", /\\[/, /\\]/)},\r\n            { begin: PAIRED_RE(\"m|qr\", /\\{/, /\\}/)}\r\n          ]\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      className: 'function',\r\n      beginKeywords: 'sub',\r\n      end: '(\\\\s*\\\\(.*?\\\\))?[;{]',\r\n      excludeEnd: true,\r\n      relevance: 5,\r\n      contains: [ hljs.TITLE_MODE ]\r\n    },\r\n    {\r\n      begin: '-\\\\w\\\\b',\r\n      relevance: 0\r\n    },\r\n    {\r\n      begin: \"^__DATA__$\",\r\n      end: \"^__END__$\",\r\n      subLanguage: 'mojolicious',\r\n      contains: [\r\n        {\r\n          begin: \"^@@.*\",\r\n          end: \"$\",\r\n          className: \"comment\"\r\n        }\r\n      ]\r\n    }\r\n  ];\r\n  SUBST.contains = PERL_DEFAULT_CONTAINS;\r\n  METHOD.contains = PERL_DEFAULT_CONTAINS;\r\n\r\n  return {\r\n    name: 'Perl',\r\n    aliases: [\r\n      'pl',\r\n      'pm'\r\n    ],\r\n    keywords: PERL_KEYWORDS,\r\n    contains: PERL_DEFAULT_CONTAINS\r\n  };\r\n}\r\n\r\nmodule.exports = perl;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}