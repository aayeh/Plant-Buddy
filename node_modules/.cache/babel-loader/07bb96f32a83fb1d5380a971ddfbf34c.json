{"ast":null,"code":"'use strict';\n\nvar refractorMarkupTemplating = require('./markup-templating.js');\n\nmodule.exports = smarty;\nsmarty.displayName = 'smarty';\nsmarty.aliases = [];\n\nfunction smarty(Prism) {\n  Prism.register(refractorMarkupTemplating);\n\n  (function (Prism) {\n    Prism.languages.smarty = {\n      comment: {\n        pattern: /^\\{\\*[\\s\\S]*?\\*\\}/,\n        greedy: true\n      },\n      'embedded-php': {\n        pattern: /^\\{php\\}[\\s\\S]*?\\{\\/php\\}/,\n        greedy: true,\n        inside: {\n          smarty: {\n            pattern: /^\\{php\\}|\\{\\/php\\}$/,\n            inside: null // see below\n\n          },\n          php: {\n            pattern: /[\\s\\S]+/,\n            alias: 'language-php',\n            inside: Prism.languages.php\n          }\n        }\n      },\n      string: [{\n        pattern: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n        greedy: true,\n        inside: {\n          interpolation: {\n            pattern: /\\{[^{}]*\\}|`[^`]*`/,\n            inside: {\n              'interpolation-punctuation': {\n                pattern: /^[{`]|[`}]$/,\n                alias: 'punctuation'\n              },\n              expression: {\n                pattern: /[\\s\\S]+/,\n                inside: null // see below\n\n              }\n            }\n          },\n          variable: /\\$\\w+/\n        }\n      }, {\n        pattern: /'(?:\\\\.|[^'\\\\\\r\\n])*'/,\n        greedy: true\n      }],\n      keyword: {\n        pattern: /(^\\{\\/?)[a-z_]\\w*\\b(?!\\()/i,\n        lookbehind: true,\n        greedy: true\n      },\n      delimiter: {\n        pattern: /^\\{\\/?|\\}$/,\n        greedy: true,\n        alias: 'punctuation'\n      },\n      number: /\\b0x[\\dA-Fa-f]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,\n      variable: [/\\$(?!\\d)\\w+/, /#(?!\\d)\\w+#/, {\n        pattern: /(\\.|->|\\w\\s*=)(?!\\d)\\w+\\b(?!\\()/,\n        lookbehind: true\n      }, {\n        pattern: /(\\[)(?!\\d)\\w+(?=\\])/,\n        lookbehind: true\n      }],\n      function: {\n        pattern: /(\\|\\s*)@?[a-z_]\\w*|\\b[a-z_]\\w*(?=\\()/i,\n        lookbehind: true\n      },\n      'attr-name': /\\b[a-z_]\\w*(?=\\s*=)/i,\n      boolean: /\\b(?:false|no|off|on|true|yes)\\b/,\n      punctuation: /[\\[\\](){}.,:`]|->/,\n      operator: [/[+\\-*\\/%]|==?=?|[!<>]=?|&&|\\|\\|?/, /\\bis\\s+(?:not\\s+)?(?:div|even|odd)(?:\\s+by)?\\b/, /\\b(?:and|eq|gt?e|gt|lt?e|lt|mod|neq?|not|or)\\b/]\n    };\n    Prism.languages.smarty['embedded-php'].inside.smarty.inside = Prism.languages.smarty;\n    Prism.languages.smarty.string[0].inside.interpolation.inside.expression.inside = Prism.languages.smarty;\n    var string = /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|'(?:\\\\.|[^'\\\\\\r\\n])*'/;\n    var smartyPattern = RegExp( // comments\n    /\\{\\*[\\s\\S]*?\\*\\}/.source + '|' + // php tags\n    /\\{php\\}[\\s\\S]*?\\{\\/php\\}/.source + '|' + // smarty blocks\n    /\\{(?:[^{}\"']|<str>|\\{(?:[^{}\"']|<str>|\\{(?:[^{}\"']|<str>)*\\})*\\})*\\}/.source.replace(/<str>/g, function () {\n      return string.source;\n    }), 'g'); // Tokenize all inline Smarty expressions\n\n    Prism.hooks.add('before-tokenize', function (env) {\n      var smartyLiteralStart = '{literal}';\n      var smartyLiteralEnd = '{/literal}';\n      var smartyLiteralMode = false;\n      Prism.languages['markup-templating'].buildPlaceholders(env, 'smarty', smartyPattern, function (match) {\n        // Smarty tags inside {literal} block are ignored\n        if (match === smartyLiteralEnd) {\n          smartyLiteralMode = false;\n        }\n\n        if (!smartyLiteralMode) {\n          if (match === smartyLiteralStart) {\n            smartyLiteralMode = true;\n          }\n\n          return true;\n        }\n\n        return false;\n      });\n    }); // Re-insert the tokens after tokenizing\n\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'smarty');\n    });\n  })(Prism);\n}","map":{"version":3,"names":["refractorMarkupTemplating","require","module","exports","smarty","displayName","aliases","Prism","register","languages","comment","pattern","greedy","inside","php","alias","string","interpolation","expression","variable","keyword","lookbehind","delimiter","number","function","boolean","punctuation","operator","smartyPattern","RegExp","source","replace","hooks","add","env","smartyLiteralStart","smartyLiteralEnd","smartyLiteralMode","buildPlaceholders","match","tokenizePlaceholders"],"sources":["C:/Users/ayeh8/Documents/Plant-Buddy/node_modules/refractor/lang/smarty.js"],"sourcesContent":["'use strict'\r\nvar refractorMarkupTemplating = require('./markup-templating.js')\r\nmodule.exports = smarty\r\nsmarty.displayName = 'smarty'\r\nsmarty.aliases = []\r\nfunction smarty(Prism) {\r\n  Prism.register(refractorMarkupTemplating)\r\n  ;(function (Prism) {\r\n    Prism.languages.smarty = {\r\n      comment: {\r\n        pattern: /^\\{\\*[\\s\\S]*?\\*\\}/,\r\n        greedy: true\r\n      },\r\n      'embedded-php': {\r\n        pattern: /^\\{php\\}[\\s\\S]*?\\{\\/php\\}/,\r\n        greedy: true,\r\n        inside: {\r\n          smarty: {\r\n            pattern: /^\\{php\\}|\\{\\/php\\}$/,\r\n            inside: null // see below\r\n          },\r\n          php: {\r\n            pattern: /[\\s\\S]+/,\r\n            alias: 'language-php',\r\n            inside: Prism.languages.php\r\n          }\r\n        }\r\n      },\r\n      string: [\r\n        {\r\n          pattern: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\r\n          greedy: true,\r\n          inside: {\r\n            interpolation: {\r\n              pattern: /\\{[^{}]*\\}|`[^`]*`/,\r\n              inside: {\r\n                'interpolation-punctuation': {\r\n                  pattern: /^[{`]|[`}]$/,\r\n                  alias: 'punctuation'\r\n                },\r\n                expression: {\r\n                  pattern: /[\\s\\S]+/,\r\n                  inside: null // see below\r\n                }\r\n              }\r\n            },\r\n            variable: /\\$\\w+/\r\n          }\r\n        },\r\n        {\r\n          pattern: /'(?:\\\\.|[^'\\\\\\r\\n])*'/,\r\n          greedy: true\r\n        }\r\n      ],\r\n      keyword: {\r\n        pattern: /(^\\{\\/?)[a-z_]\\w*\\b(?!\\()/i,\r\n        lookbehind: true,\r\n        greedy: true\r\n      },\r\n      delimiter: {\r\n        pattern: /^\\{\\/?|\\}$/,\r\n        greedy: true,\r\n        alias: 'punctuation'\r\n      },\r\n      number: /\\b0x[\\dA-Fa-f]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,\r\n      variable: [\r\n        /\\$(?!\\d)\\w+/,\r\n        /#(?!\\d)\\w+#/,\r\n        {\r\n          pattern: /(\\.|->|\\w\\s*=)(?!\\d)\\w+\\b(?!\\()/,\r\n          lookbehind: true\r\n        },\r\n        {\r\n          pattern: /(\\[)(?!\\d)\\w+(?=\\])/,\r\n          lookbehind: true\r\n        }\r\n      ],\r\n      function: {\r\n        pattern: /(\\|\\s*)@?[a-z_]\\w*|\\b[a-z_]\\w*(?=\\()/i,\r\n        lookbehind: true\r\n      },\r\n      'attr-name': /\\b[a-z_]\\w*(?=\\s*=)/i,\r\n      boolean: /\\b(?:false|no|off|on|true|yes)\\b/,\r\n      punctuation: /[\\[\\](){}.,:`]|->/,\r\n      operator: [\r\n        /[+\\-*\\/%]|==?=?|[!<>]=?|&&|\\|\\|?/,\r\n        /\\bis\\s+(?:not\\s+)?(?:div|even|odd)(?:\\s+by)?\\b/,\r\n        /\\b(?:and|eq|gt?e|gt|lt?e|lt|mod|neq?|not|or)\\b/\r\n      ]\r\n    }\r\n    Prism.languages.smarty['embedded-php'].inside.smarty.inside =\r\n      Prism.languages.smarty\r\n    Prism.languages.smarty.string[0].inside.interpolation.inside.expression.inside =\r\n      Prism.languages.smarty\r\n    var string = /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|'(?:\\\\.|[^'\\\\\\r\\n])*'/\r\n    var smartyPattern = RegExp(\r\n      // comments\r\n      /\\{\\*[\\s\\S]*?\\*\\}/.source +\r\n        '|' + // php tags\r\n        /\\{php\\}[\\s\\S]*?\\{\\/php\\}/.source +\r\n        '|' + // smarty blocks\r\n        /\\{(?:[^{}\"']|<str>|\\{(?:[^{}\"']|<str>|\\{(?:[^{}\"']|<str>)*\\})*\\})*\\}/.source.replace(\r\n          /<str>/g,\r\n          function () {\r\n            return string.source\r\n          }\r\n        ),\r\n      'g'\r\n    ) // Tokenize all inline Smarty expressions\r\n    Prism.hooks.add('before-tokenize', function (env) {\r\n      var smartyLiteralStart = '{literal}'\r\n      var smartyLiteralEnd = '{/literal}'\r\n      var smartyLiteralMode = false\r\n      Prism.languages['markup-templating'].buildPlaceholders(\r\n        env,\r\n        'smarty',\r\n        smartyPattern,\r\n        function (match) {\r\n          // Smarty tags inside {literal} block are ignored\r\n          if (match === smartyLiteralEnd) {\r\n            smartyLiteralMode = false\r\n          }\r\n          if (!smartyLiteralMode) {\r\n            if (match === smartyLiteralStart) {\r\n              smartyLiteralMode = true\r\n            }\r\n            return true\r\n          }\r\n          return false\r\n        }\r\n      )\r\n    }) // Re-insert the tokens after tokenizing\r\n    Prism.hooks.add('after-tokenize', function (env) {\r\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'smarty')\r\n    })\r\n  })(Prism)\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}