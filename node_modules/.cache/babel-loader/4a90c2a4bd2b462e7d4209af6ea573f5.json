{"ast":null,"code":"/*\r\nLanguage: Coq\r\nAuthor: Stephan Boyer <stephan@stephanboyer.com>\r\nCategory: functional\r\nWebsite: https://coq.inria.fr\r\n*/\n\n/** @type LanguageFn */\nfunction coq(hljs) {\n  return {\n    name: 'Coq',\n    keywords: {\n      keyword: '_|0 as at cofix else end exists exists2 fix for forall fun if IF in let ' + 'match mod Prop return Set then Type using where with ' + 'Abort About Add Admit Admitted All Arguments Assumptions Axiom Back BackTo ' + 'Backtrack Bind Blacklist Canonical Cd Check Class Classes Close Coercion ' + 'Coercions CoFixpoint CoInductive Collection Combined Compute Conjecture ' + 'Conjectures Constant constr Constraint Constructors Context Corollary ' + 'CreateHintDb Cut Declare Defined Definition Delimit Dependencies Dependent ' + 'Derive Drop eauto End Equality Eval Example Existential Existentials ' + 'Existing Export exporting Extern Extract Extraction Fact Field Fields File ' + 'Fixpoint Focus for From Function Functional Generalizable Global Goal Grab ' + 'Grammar Graph Guarded Heap Hint HintDb Hints Hypotheses Hypothesis ident ' + 'Identity If Immediate Implicit Import Include Inductive Infix Info Initial ' + 'Inline Inspect Instance Instances Intro Intros Inversion Inversion_clear ' + 'Language Left Lemma Let Libraries Library Load LoadPath Local Locate Ltac ML ' + 'Mode Module Modules Monomorphic Morphism Next NoInline Notation Obligation ' + 'Obligations Opaque Open Optimize Options Parameter Parameters Parametric ' + 'Path Paths pattern Polymorphic Preterm Print Printing Program Projections ' + 'Proof Proposition Pwd Qed Quit Rec Record Recursive Redirect Relation Remark ' + 'Remove Require Reserved Reset Resolve Restart Rewrite Right Ring Rings Save ' + 'Scheme Scope Scopes Script Search SearchAbout SearchHead SearchPattern ' + 'SearchRewrite Section Separate Set Setoid Show Solve Sorted Step Strategies ' + 'Strategy Structure SubClass Table Tables Tactic Term Test Theorem Time ' + 'Timeout Transparent Type Typeclasses Types Undelimit Undo Unfocus Unfocused ' + 'Unfold Universe Universes Unset Unshelve using Variable Variables Variant ' + 'Verbose Visibility where with',\n      built_in: 'abstract absurd admit after apply as assert assumption at auto autorewrite ' + 'autounfold before bottom btauto by case case_eq cbn cbv change ' + 'classical_left classical_right clear clearbody cofix compare compute ' + 'congruence constr_eq constructor contradict contradiction cut cutrewrite ' + 'cycle decide decompose dependent destruct destruction dintuition ' + 'discriminate discrR do double dtauto eapply eassumption eauto ecase ' + 'econstructor edestruct ediscriminate eelim eexact eexists einduction ' + 'einjection eleft elim elimtype enough equality erewrite eright ' + 'esimplify_eq esplit evar exact exactly_once exfalso exists f_equal fail ' + 'field field_simplify field_simplify_eq first firstorder fix fold fourier ' + 'functional generalize generalizing gfail give_up has_evar hnf idtac in ' + 'induction injection instantiate intro intro_pattern intros intuition ' + 'inversion inversion_clear is_evar is_var lapply lazy left lia lra move ' + 'native_compute nia nsatz omega once pattern pose progress proof psatz quote ' + 'record red refine reflexivity remember rename repeat replace revert ' + 'revgoals rewrite rewrite_strat right ring ring_simplify rtauto set ' + 'setoid_reflexivity setoid_replace setoid_rewrite setoid_symmetry ' + 'setoid_transitivity shelve shelve_unifiable simpl simple simplify_eq solve ' + 'specialize split split_Rabs split_Rmult stepl stepr subst sum swap ' + 'symmetry tactic tauto time timeout top transitivity trivial try tryif ' + 'unfold unify until using vm_compute with'\n    },\n    contains: [hljs.QUOTE_STRING_MODE, hljs.COMMENT('\\\\(\\\\*', '\\\\*\\\\)'), hljs.C_NUMBER_MODE, {\n      className: 'type',\n      excludeBegin: true,\n      begin: '\\\\|\\\\s*',\n      end: '\\\\w+'\n    }, {\n      // relevance booster\n      begin: /[-=]>/\n    }]\n  };\n}\n\nmodule.exports = coq;","map":{"version":3,"names":["coq","hljs","name","keywords","keyword","built_in","contains","QUOTE_STRING_MODE","COMMENT","C_NUMBER_MODE","className","excludeBegin","begin","end","module","exports"],"sources":["C:/Users/ayeh8/Documents/Plant-Buddy/node_modules/highlight.js/lib/languages/coq.js"],"sourcesContent":["/*\r\nLanguage: Coq\r\nAuthor: Stephan Boyer <stephan@stephanboyer.com>\r\nCategory: functional\r\nWebsite: https://coq.inria.fr\r\n*/\r\n\r\n/** @type LanguageFn */\r\nfunction coq(hljs) {\r\n  return {\r\n    name: 'Coq',\r\n    keywords: {\r\n      keyword:\r\n        '_|0 as at cofix else end exists exists2 fix for forall fun if IF in let ' +\r\n        'match mod Prop return Set then Type using where with ' +\r\n        'Abort About Add Admit Admitted All Arguments Assumptions Axiom Back BackTo ' +\r\n        'Backtrack Bind Blacklist Canonical Cd Check Class Classes Close Coercion ' +\r\n        'Coercions CoFixpoint CoInductive Collection Combined Compute Conjecture ' +\r\n        'Conjectures Constant constr Constraint Constructors Context Corollary ' +\r\n        'CreateHintDb Cut Declare Defined Definition Delimit Dependencies Dependent ' +\r\n        'Derive Drop eauto End Equality Eval Example Existential Existentials ' +\r\n        'Existing Export exporting Extern Extract Extraction Fact Field Fields File ' +\r\n        'Fixpoint Focus for From Function Functional Generalizable Global Goal Grab ' +\r\n        'Grammar Graph Guarded Heap Hint HintDb Hints Hypotheses Hypothesis ident ' +\r\n        'Identity If Immediate Implicit Import Include Inductive Infix Info Initial ' +\r\n        'Inline Inspect Instance Instances Intro Intros Inversion Inversion_clear ' +\r\n        'Language Left Lemma Let Libraries Library Load LoadPath Local Locate Ltac ML ' +\r\n        'Mode Module Modules Monomorphic Morphism Next NoInline Notation Obligation ' +\r\n        'Obligations Opaque Open Optimize Options Parameter Parameters Parametric ' +\r\n        'Path Paths pattern Polymorphic Preterm Print Printing Program Projections ' +\r\n        'Proof Proposition Pwd Qed Quit Rec Record Recursive Redirect Relation Remark ' +\r\n        'Remove Require Reserved Reset Resolve Restart Rewrite Right Ring Rings Save ' +\r\n        'Scheme Scope Scopes Script Search SearchAbout SearchHead SearchPattern ' +\r\n        'SearchRewrite Section Separate Set Setoid Show Solve Sorted Step Strategies ' +\r\n        'Strategy Structure SubClass Table Tables Tactic Term Test Theorem Time ' +\r\n        'Timeout Transparent Type Typeclasses Types Undelimit Undo Unfocus Unfocused ' +\r\n        'Unfold Universe Universes Unset Unshelve using Variable Variables Variant ' +\r\n        'Verbose Visibility where with',\r\n      built_in:\r\n        'abstract absurd admit after apply as assert assumption at auto autorewrite ' +\r\n        'autounfold before bottom btauto by case case_eq cbn cbv change ' +\r\n        'classical_left classical_right clear clearbody cofix compare compute ' +\r\n        'congruence constr_eq constructor contradict contradiction cut cutrewrite ' +\r\n        'cycle decide decompose dependent destruct destruction dintuition ' +\r\n        'discriminate discrR do double dtauto eapply eassumption eauto ecase ' +\r\n        'econstructor edestruct ediscriminate eelim eexact eexists einduction ' +\r\n        'einjection eleft elim elimtype enough equality erewrite eright ' +\r\n        'esimplify_eq esplit evar exact exactly_once exfalso exists f_equal fail ' +\r\n        'field field_simplify field_simplify_eq first firstorder fix fold fourier ' +\r\n        'functional generalize generalizing gfail give_up has_evar hnf idtac in ' +\r\n        'induction injection instantiate intro intro_pattern intros intuition ' +\r\n        'inversion inversion_clear is_evar is_var lapply lazy left lia lra move ' +\r\n        'native_compute nia nsatz omega once pattern pose progress proof psatz quote ' +\r\n        'record red refine reflexivity remember rename repeat replace revert ' +\r\n        'revgoals rewrite rewrite_strat right ring ring_simplify rtauto set ' +\r\n        'setoid_reflexivity setoid_replace setoid_rewrite setoid_symmetry ' +\r\n        'setoid_transitivity shelve shelve_unifiable simpl simple simplify_eq solve ' +\r\n        'specialize split split_Rabs split_Rmult stepl stepr subst sum swap ' +\r\n        'symmetry tactic tauto time timeout top transitivity trivial try tryif ' +\r\n        'unfold unify until using vm_compute with'\r\n    },\r\n    contains: [\r\n      hljs.QUOTE_STRING_MODE,\r\n      hljs.COMMENT('\\\\(\\\\*', '\\\\*\\\\)'),\r\n      hljs.C_NUMBER_MODE,\r\n      {\r\n        className: 'type',\r\n        excludeBegin: true,\r\n        begin: '\\\\|\\\\s*',\r\n        end: '\\\\w+'\r\n      },\r\n      { // relevance booster\r\n        begin: /[-=]>/\r\n      }\r\n    ]\r\n  };\r\n}\r\n\r\nmodule.exports = coq;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAASA,GAAT,CAAaC,IAAb,EAAmB;EACjB,OAAO;IACLC,IAAI,EAAE,KADD;IAELC,QAAQ,EAAE;MACRC,OAAO,EACL,6EACA,uDADA,GAEA,6EAFA,GAGA,2EAHA,GAIA,0EAJA,GAKA,wEALA,GAMA,6EANA,GAOA,uEAPA,GAQA,6EARA,GASA,6EATA,GAUA,2EAVA,GAWA,6EAXA,GAYA,2EAZA,GAaA,+EAbA,GAcA,6EAdA,GAeA,2EAfA,GAgBA,4EAhBA,GAiBA,+EAjBA,GAkBA,8EAlBA,GAmBA,yEAnBA,GAoBA,8EApBA,GAqBA,yEArBA,GAsBA,8EAtBA,GAuBA,4EAvBA,GAwBA,+BA1BM;MA2BRC,QAAQ,EACN,gFACA,iEADA,GAEA,uEAFA,GAGA,2EAHA,GAIA,mEAJA,GAKA,sEALA,GAMA,uEANA,GAOA,iEAPA,GAQA,0EARA,GASA,2EATA,GAUA,yEAVA,GAWA,uEAXA,GAYA,yEAZA,GAaA,8EAbA,GAcA,sEAdA,GAeA,qEAfA,GAgBA,mEAhBA,GAiBA,6EAjBA,GAkBA,qEAlBA,GAmBA,wEAnBA,GAoBA;IAhDM,CAFL;IAoDLC,QAAQ,EAAE,CACRL,IAAI,CAACM,iBADG,EAERN,IAAI,CAACO,OAAL,CAAa,QAAb,EAAuB,QAAvB,CAFQ,EAGRP,IAAI,CAACQ,aAHG,EAIR;MACEC,SAAS,EAAE,MADb;MAEEC,YAAY,EAAE,IAFhB;MAGEC,KAAK,EAAE,SAHT;MAIEC,GAAG,EAAE;IAJP,CAJQ,EAUR;MAAE;MACAD,KAAK,EAAE;IADT,CAVQ;EApDL,CAAP;AAmED;;AAEDE,MAAM,CAACC,OAAP,GAAiBf,GAAjB"},"metadata":{},"sourceType":"script"}