{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDefaultPerf\n * @typechecks static-only\n */\n'use strict';\n\nvar DOMProperty = require('./DOMProperty');\n\nvar ReactDefaultPerfAnalysis = require('./ReactDefaultPerfAnalysis');\n\nvar ReactMount = require('./ReactMount');\n\nvar ReactPerf = require('./ReactPerf');\n\nvar performanceNow = require('fbjs/lib/performanceNow');\n\nfunction roundFloat(val) {\n  return Math.floor(val * 100) / 100;\n}\n\nfunction addValue(obj, key, val) {\n  obj[key] = (obj[key] || 0) + val;\n}\n\nvar ReactDefaultPerf = {\n  _allMeasurements: [],\n  // last item in the list is the current one\n  _mountStack: [0],\n  _injected: false,\n  start: function () {\n    if (!ReactDefaultPerf._injected) {\n      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);\n    }\n\n    ReactDefaultPerf._allMeasurements.length = 0;\n    ReactPerf.enableMeasure = true;\n  },\n  stop: function () {\n    ReactPerf.enableMeasure = false;\n  },\n  getLastMeasurements: function () {\n    return ReactDefaultPerf._allMeasurements;\n  },\n  printExclusive: function (measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);\n    console.table(summary.map(function (item) {\n      return {\n        'Component class name': item.componentName,\n        'Total inclusive time (ms)': roundFloat(item.inclusive),\n        'Exclusive mount time (ms)': roundFloat(item.exclusive),\n        'Exclusive render time (ms)': roundFloat(item.render),\n        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),\n        'Render time per instance (ms)': roundFloat(item.render / item.count),\n        'Instances': item.count\n      };\n    })); // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct\n    // number.\n  },\n  printInclusive: function (measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);\n    console.table(summary.map(function (item) {\n      return {\n        'Owner > component': item.componentName,\n        'Inclusive time (ms)': roundFloat(item.time),\n        'Instances': item.count\n      };\n    }));\n    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');\n  },\n  getMeasurementsSummaryMap: function (measurements) {\n    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements, true);\n    return summary.map(function (item) {\n      return {\n        'Owner > component': item.componentName,\n        'Wasted time (ms)': item.time,\n        'Instances': item.count\n      };\n    });\n  },\n  printWasted: function (measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));\n    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');\n  },\n  printDOM: function (measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);\n    console.table(summary.map(function (item) {\n      var result = {};\n      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;\n      result.type = item.type;\n      result.args = JSON.stringify(item.args);\n      return result;\n    }));\n    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');\n  },\n  _recordWrite: function (id, fnName, totalTime, args) {\n    // TODO: totalTime isn't that useful since it doesn't count paints/reflows\n    var writes = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].writes;\n    writes[id] = writes[id] || [];\n    writes[id].push({\n      type: fnName,\n      time: totalTime,\n      args: args\n    });\n  },\n  measure: function (moduleName, fnName, func) {\n    return function () {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var totalTime;\n      var rv;\n      var start;\n\n      if (fnName === '_renderNewRootComponent' || fnName === 'flushBatchedUpdates') {\n        // A \"measurement\" is a set of metrics recorded for each flush. We want\n        // to group the metrics for a given flush together so we can look at the\n        // components that rendered and the DOM operations that actually\n        // happened to determine the amount of \"wasted work\" performed.\n        ReactDefaultPerf._allMeasurements.push({\n          exclusive: {},\n          inclusive: {},\n          render: {},\n          counts: {},\n          writes: {},\n          displayNames: {},\n          totalTime: 0,\n          created: {}\n        });\n\n        start = performanceNow();\n        rv = func.apply(this, args);\n        ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].totalTime = performanceNow() - start;\n        return rv;\n      } else if (fnName === '_mountImageIntoNode' || moduleName === 'ReactBrowserEventEmitter' || moduleName === 'ReactDOMIDOperations' || moduleName === 'CSSPropertyOperations' || moduleName === 'DOMChildrenOperations' || moduleName === 'DOMPropertyOperations') {\n        start = performanceNow();\n        rv = func.apply(this, args);\n        totalTime = performanceNow() - start;\n\n        if (fnName === '_mountImageIntoNode') {\n          var mountID = ReactMount.getID(args[1]);\n\n          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);\n        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {\n          // special format\n          args[0].forEach(function (update) {\n            var writeArgs = {};\n\n            if (update.fromIndex !== null) {\n              writeArgs.fromIndex = update.fromIndex;\n            }\n\n            if (update.toIndex !== null) {\n              writeArgs.toIndex = update.toIndex;\n            }\n\n            if (update.textContent !== null) {\n              writeArgs.textContent = update.textContent;\n            }\n\n            if (update.markupIndex !== null) {\n              writeArgs.markup = args[1][update.markupIndex];\n            }\n\n            ReactDefaultPerf._recordWrite(update.parentID, update.type, totalTime, writeArgs);\n          });\n        } else {\n          // basic format\n          var id = args[0];\n\n          if (typeof id === 'object') {\n            id = ReactMount.getID(args[0]);\n          }\n\n          ReactDefaultPerf._recordWrite(id, fnName, totalTime, Array.prototype.slice.call(args, 1));\n        }\n\n        return rv;\n      } else if (moduleName === 'ReactCompositeComponent' && (fnName === 'mountComponent' || fnName === 'updateComponent' || // TODO: receiveComponent()?\n      fnName === '_renderValidatedComponent')) {\n        if (this._currentElement.type === ReactMount.TopLevelWrapper) {\n          return func.apply(this, args);\n        }\n\n        var rootNodeID = fnName === 'mountComponent' ? args[0] : this._rootNodeID;\n        var isRender = fnName === '_renderValidatedComponent';\n        var isMount = fnName === 'mountComponent';\n        var mountStack = ReactDefaultPerf._mountStack;\n        var entry = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1];\n\n        if (isRender) {\n          addValue(entry.counts, rootNodeID, 1);\n        } else if (isMount) {\n          entry.created[rootNodeID] = true;\n          mountStack.push(0);\n        }\n\n        start = performanceNow();\n        rv = func.apply(this, args);\n        totalTime = performanceNow() - start;\n\n        if (isRender) {\n          addValue(entry.render, rootNodeID, totalTime);\n        } else if (isMount) {\n          var subMountTime = mountStack.pop();\n          mountStack[mountStack.length - 1] += totalTime;\n          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);\n          addValue(entry.inclusive, rootNodeID, totalTime);\n        } else {\n          addValue(entry.inclusive, rootNodeID, totalTime);\n        }\n\n        entry.displayNames[rootNodeID] = {\n          current: this.getName(),\n          owner: this._currentElement._owner ? this._currentElement._owner.getName() : '<root>'\n        };\n        return rv;\n      } else {\n        return func.apply(this, args);\n      }\n    };\n  }\n};\nmodule.exports = ReactDefaultPerf;","map":{"version":3,"names":["DOMProperty","require","ReactDefaultPerfAnalysis","ReactMount","ReactPerf","performanceNow","roundFloat","val","Math","floor","addValue","obj","key","ReactDefaultPerf","_allMeasurements","_mountStack","_injected","start","injection","injectMeasure","measure","length","enableMeasure","stop","getLastMeasurements","printExclusive","measurements","summary","getExclusiveSummary","console","table","map","item","componentName","inclusive","exclusive","render","count","printInclusive","getInclusiveSummary","time","log","getTotalTime","toFixed","getMeasurementsSummaryMap","printWasted","printDOM","getDOMSummary","result","ID_ATTRIBUTE_NAME","id","type","args","JSON","stringify","_recordWrite","fnName","totalTime","writes","push","moduleName","func","_len","arguments","Array","_key","rv","counts","displayNames","created","apply","mountID","getID","forEach","update","writeArgs","fromIndex","toIndex","textContent","markupIndex","markup","parentID","prototype","slice","call","_currentElement","TopLevelWrapper","rootNodeID","_rootNodeID","isRender","isMount","mountStack","entry","subMountTime","pop","current","getName","owner","_owner","module","exports"],"sources":["/Users/aaronyeh/Downloads/Plant Buddy/node_modules/react-router-link/node_modules/react/lib/ReactDefaultPerf.js"],"sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDefaultPerf\n * @typechecks static-only\n */\n\n'use strict';\n\nvar DOMProperty = require('./DOMProperty');\nvar ReactDefaultPerfAnalysis = require('./ReactDefaultPerfAnalysis');\nvar ReactMount = require('./ReactMount');\nvar ReactPerf = require('./ReactPerf');\n\nvar performanceNow = require('fbjs/lib/performanceNow');\n\nfunction roundFloat(val) {\n  return Math.floor(val * 100) / 100;\n}\n\nfunction addValue(obj, key, val) {\n  obj[key] = (obj[key] || 0) + val;\n}\n\nvar ReactDefaultPerf = {\n  _allMeasurements: [], // last item in the list is the current one\n  _mountStack: [0],\n  _injected: false,\n\n  start: function () {\n    if (!ReactDefaultPerf._injected) {\n      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);\n    }\n\n    ReactDefaultPerf._allMeasurements.length = 0;\n    ReactPerf.enableMeasure = true;\n  },\n\n  stop: function () {\n    ReactPerf.enableMeasure = false;\n  },\n\n  getLastMeasurements: function () {\n    return ReactDefaultPerf._allMeasurements;\n  },\n\n  printExclusive: function (measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);\n    console.table(summary.map(function (item) {\n      return {\n        'Component class name': item.componentName,\n        'Total inclusive time (ms)': roundFloat(item.inclusive),\n        'Exclusive mount time (ms)': roundFloat(item.exclusive),\n        'Exclusive render time (ms)': roundFloat(item.render),\n        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),\n        'Render time per instance (ms)': roundFloat(item.render / item.count),\n        'Instances': item.count\n      };\n    }));\n    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct\n    // number.\n  },\n\n  printInclusive: function (measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);\n    console.table(summary.map(function (item) {\n      return {\n        'Owner > component': item.componentName,\n        'Inclusive time (ms)': roundFloat(item.time),\n        'Instances': item.count\n      };\n    }));\n    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');\n  },\n\n  getMeasurementsSummaryMap: function (measurements) {\n    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements, true);\n    return summary.map(function (item) {\n      return {\n        'Owner > component': item.componentName,\n        'Wasted time (ms)': item.time,\n        'Instances': item.count\n      };\n    });\n  },\n\n  printWasted: function (measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));\n    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');\n  },\n\n  printDOM: function (measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);\n    console.table(summary.map(function (item) {\n      var result = {};\n      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;\n      result.type = item.type;\n      result.args = JSON.stringify(item.args);\n      return result;\n    }));\n    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');\n  },\n\n  _recordWrite: function (id, fnName, totalTime, args) {\n    // TODO: totalTime isn't that useful since it doesn't count paints/reflows\n    var writes = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].writes;\n    writes[id] = writes[id] || [];\n    writes[id].push({\n      type: fnName,\n      time: totalTime,\n      args: args\n    });\n  },\n\n  measure: function (moduleName, fnName, func) {\n    return function () {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var totalTime;\n      var rv;\n      var start;\n\n      if (fnName === '_renderNewRootComponent' || fnName === 'flushBatchedUpdates') {\n        // A \"measurement\" is a set of metrics recorded for each flush. We want\n        // to group the metrics for a given flush together so we can look at the\n        // components that rendered and the DOM operations that actually\n        // happened to determine the amount of \"wasted work\" performed.\n        ReactDefaultPerf._allMeasurements.push({\n          exclusive: {},\n          inclusive: {},\n          render: {},\n          counts: {},\n          writes: {},\n          displayNames: {},\n          totalTime: 0,\n          created: {}\n        });\n        start = performanceNow();\n        rv = func.apply(this, args);\n        ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].totalTime = performanceNow() - start;\n        return rv;\n      } else if (fnName === '_mountImageIntoNode' || moduleName === 'ReactBrowserEventEmitter' || moduleName === 'ReactDOMIDOperations' || moduleName === 'CSSPropertyOperations' || moduleName === 'DOMChildrenOperations' || moduleName === 'DOMPropertyOperations') {\n        start = performanceNow();\n        rv = func.apply(this, args);\n        totalTime = performanceNow() - start;\n\n        if (fnName === '_mountImageIntoNode') {\n          var mountID = ReactMount.getID(args[1]);\n          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);\n        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {\n          // special format\n          args[0].forEach(function (update) {\n            var writeArgs = {};\n            if (update.fromIndex !== null) {\n              writeArgs.fromIndex = update.fromIndex;\n            }\n            if (update.toIndex !== null) {\n              writeArgs.toIndex = update.toIndex;\n            }\n            if (update.textContent !== null) {\n              writeArgs.textContent = update.textContent;\n            }\n            if (update.markupIndex !== null) {\n              writeArgs.markup = args[1][update.markupIndex];\n            }\n            ReactDefaultPerf._recordWrite(update.parentID, update.type, totalTime, writeArgs);\n          });\n        } else {\n          // basic format\n          var id = args[0];\n          if (typeof id === 'object') {\n            id = ReactMount.getID(args[0]);\n          }\n          ReactDefaultPerf._recordWrite(id, fnName, totalTime, Array.prototype.slice.call(args, 1));\n        }\n        return rv;\n      } else if (moduleName === 'ReactCompositeComponent' && (fnName === 'mountComponent' || fnName === 'updateComponent' || // TODO: receiveComponent()?\n      fnName === '_renderValidatedComponent')) {\n\n        if (this._currentElement.type === ReactMount.TopLevelWrapper) {\n          return func.apply(this, args);\n        }\n\n        var rootNodeID = fnName === 'mountComponent' ? args[0] : this._rootNodeID;\n        var isRender = fnName === '_renderValidatedComponent';\n        var isMount = fnName === 'mountComponent';\n\n        var mountStack = ReactDefaultPerf._mountStack;\n        var entry = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1];\n\n        if (isRender) {\n          addValue(entry.counts, rootNodeID, 1);\n        } else if (isMount) {\n          entry.created[rootNodeID] = true;\n          mountStack.push(0);\n        }\n\n        start = performanceNow();\n        rv = func.apply(this, args);\n        totalTime = performanceNow() - start;\n\n        if (isRender) {\n          addValue(entry.render, rootNodeID, totalTime);\n        } else if (isMount) {\n          var subMountTime = mountStack.pop();\n          mountStack[mountStack.length - 1] += totalTime;\n          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);\n          addValue(entry.inclusive, rootNodeID, totalTime);\n        } else {\n          addValue(entry.inclusive, rootNodeID, totalTime);\n        }\n\n        entry.displayNames[rootNodeID] = {\n          current: this.getName(),\n          owner: this._currentElement._owner ? this._currentElement._owner.getName() : '<root>'\n        };\n\n        return rv;\n      } else {\n        return func.apply(this, args);\n      }\n    };\n  }\n};\n\nmodule.exports = ReactDefaultPerf;"],"mappings":"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"},"metadata":{},"sourceType":"script"}