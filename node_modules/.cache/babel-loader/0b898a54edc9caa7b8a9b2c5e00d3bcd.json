{"ast":null,"code":"'use strict';\n\nmodule.exports = java;\njava.displayName = 'java';\njava.aliases = [];\n\nfunction java(Prism) {\n  ;\n\n  (function (Prism) {\n    var keywords = /\\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|non-sealed|null|open|opens|package|permits|private|protected|provides|public|record|requires|return|sealed|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\\b/; // full package (optional) + parent classes (optional)\n\n    var classNamePrefix = /(^|[^\\w.])(?:[a-z]\\w*\\s*\\.\\s*)*(?:[A-Z]\\w*\\s*\\.\\s*)*/.source; // based on the java naming conventions\n\n    var className = {\n      pattern: RegExp(classNamePrefix + /[A-Z](?:[\\d_A-Z]*[a-z]\\w*)?\\b/.source),\n      lookbehind: true,\n      inside: {\n        namespace: {\n          pattern: /^[a-z]\\w*(?:\\s*\\.\\s*[a-z]\\w*)*(?:\\s*\\.)?/,\n          inside: {\n            punctuation: /\\./\n          }\n        },\n        punctuation: /\\./\n      }\n    };\n    Prism.languages.java = Prism.languages.extend('clike', {\n      string: {\n        pattern: /(^|[^\\\\])\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n        lookbehind: true,\n        greedy: true\n      },\n      'class-name': [className, {\n        // variables and parameters\n        // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n        pattern: RegExp(classNamePrefix + /[A-Z]\\w*(?=\\s+\\w+\\s*[;,=()])/.source),\n        lookbehind: true,\n        inside: className.inside\n      }],\n      keyword: keywords,\n      function: [Prism.languages.clike.function, {\n        pattern: /(::\\s*)[a-z_]\\w*/,\n        lookbehind: true\n      }],\n      number: /\\b0b[01][01_]*L?\\b|\\b0x(?:\\.[\\da-f_p+-]+|[\\da-f_]+(?:\\.[\\da-f_p+-]+)?)\\b|(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfl]?/i,\n      operator: {\n        pattern: /(^|[^.])(?:<<=?|>>>?=?|->|--|\\+\\+|&&|\\|\\||::|[?:~]|[-+*/%&|^!=<>]=?)/m,\n        lookbehind: true\n      }\n    });\n    Prism.languages.insertBefore('java', 'string', {\n      'triple-quoted-string': {\n        // http://openjdk.java.net/jeps/355#Description\n        pattern: /\"\"\"[ \\t]*[\\r\\n](?:(?:\"|\"\")?(?:\\\\.|[^\"\\\\]))*\"\"\"/,\n        greedy: true,\n        alias: 'string'\n      },\n      char: {\n        pattern: /'(?:\\\\.|[^'\\\\\\r\\n]){1,6}'/,\n        greedy: true\n      }\n    });\n    Prism.languages.insertBefore('java', 'class-name', {\n      annotation: {\n        pattern: /(^|[^.])@\\w+(?:\\s*\\.\\s*\\w+)*/,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      generics: {\n        pattern: /<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&))*>)*>)*>)*>/,\n        inside: {\n          'class-name': className,\n          keyword: keywords,\n          punctuation: /[<>(),.:]/,\n          operator: /[?&|]/\n        }\n      },\n      namespace: {\n        pattern: RegExp(/(\\b(?:exports|import(?:\\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\\s+)(?!<keyword>)[a-z]\\w*(?:\\.[a-z]\\w*)*\\.?/.source.replace(/<keyword>/g, function () {\n          return keywords.source;\n        })),\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      }\n    });\n  })(Prism);\n}","map":{"version":3,"names":["module","exports","java","displayName","aliases","Prism","keywords","classNamePrefix","source","className","pattern","RegExp","lookbehind","inside","namespace","punctuation","languages","extend","string","greedy","keyword","function","clike","number","operator","insertBefore","alias","char","annotation","generics","replace"],"sources":["/Users/aaronyeh/Downloads/Plant Buddy/node_modules/refractor/lang/java.js"],"sourcesContent":["'use strict'\n\nmodule.exports = java\njava.displayName = 'java'\njava.aliases = []\nfunction java(Prism) {\n  ;(function (Prism) {\n    var keywords =\n      /\\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|non-sealed|null|open|opens|package|permits|private|protected|provides|public|record|requires|return|sealed|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\\b/ // full package (optional) + parent classes (optional)\n    var classNamePrefix = /(^|[^\\w.])(?:[a-z]\\w*\\s*\\.\\s*)*(?:[A-Z]\\w*\\s*\\.\\s*)*/\n      .source // based on the java naming conventions\n    var className = {\n      pattern: RegExp(classNamePrefix + /[A-Z](?:[\\d_A-Z]*[a-z]\\w*)?\\b/.source),\n      lookbehind: true,\n      inside: {\n        namespace: {\n          pattern: /^[a-z]\\w*(?:\\s*\\.\\s*[a-z]\\w*)*(?:\\s*\\.)?/,\n          inside: {\n            punctuation: /\\./\n          }\n        },\n        punctuation: /\\./\n      }\n    }\n    Prism.languages.java = Prism.languages.extend('clike', {\n      string: {\n        pattern: /(^|[^\\\\])\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n        lookbehind: true,\n        greedy: true\n      },\n      'class-name': [\n        className,\n        {\n          // variables and parameters\n          // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n          pattern: RegExp(\n            classNamePrefix + /[A-Z]\\w*(?=\\s+\\w+\\s*[;,=()])/.source\n          ),\n          lookbehind: true,\n          inside: className.inside\n        }\n      ],\n      keyword: keywords,\n      function: [\n        Prism.languages.clike.function,\n        {\n          pattern: /(::\\s*)[a-z_]\\w*/,\n          lookbehind: true\n        }\n      ],\n      number:\n        /\\b0b[01][01_]*L?\\b|\\b0x(?:\\.[\\da-f_p+-]+|[\\da-f_]+(?:\\.[\\da-f_p+-]+)?)\\b|(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfl]?/i,\n      operator: {\n        pattern:\n          /(^|[^.])(?:<<=?|>>>?=?|->|--|\\+\\+|&&|\\|\\||::|[?:~]|[-+*/%&|^!=<>]=?)/m,\n        lookbehind: true\n      }\n    })\n    Prism.languages.insertBefore('java', 'string', {\n      'triple-quoted-string': {\n        // http://openjdk.java.net/jeps/355#Description\n        pattern: /\"\"\"[ \\t]*[\\r\\n](?:(?:\"|\"\")?(?:\\\\.|[^\"\\\\]))*\"\"\"/,\n        greedy: true,\n        alias: 'string'\n      },\n      char: {\n        pattern: /'(?:\\\\.|[^'\\\\\\r\\n]){1,6}'/,\n        greedy: true\n      }\n    })\n    Prism.languages.insertBefore('java', 'class-name', {\n      annotation: {\n        pattern: /(^|[^.])@\\w+(?:\\s*\\.\\s*\\w+)*/,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      generics: {\n        pattern:\n          /<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&))*>)*>)*>)*>/,\n        inside: {\n          'class-name': className,\n          keyword: keywords,\n          punctuation: /[<>(),.:]/,\n          operator: /[?&|]/\n        }\n      },\n      namespace: {\n        pattern: RegExp(\n          /(\\b(?:exports|import(?:\\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\\s+)(?!<keyword>)[a-z]\\w*(?:\\.[a-z]\\w*)*\\.?/.source.replace(\n            /<keyword>/g,\n            function () {\n              return keywords.source\n            }\n          )\n        ),\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      }\n    })\n  })(Prism)\n}\n"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,IAAjB;AACAA,IAAI,CAACC,WAAL,GAAmB,MAAnB;AACAD,IAAI,CAACE,OAAL,GAAe,EAAf;;AACA,SAASF,IAAT,CAAcG,KAAd,EAAqB;EACnB;;EAAC,CAAC,UAAUA,KAAV,EAAiB;IACjB,IAAIC,QAAQ,GACV,gdADF,CADiB,CAEkc;;IACnd,IAAIC,eAAe,GAAG,uDACnBC,MADH,CAHiB,CAIP;;IACV,IAAIC,SAAS,GAAG;MACdC,OAAO,EAAEC,MAAM,CAACJ,eAAe,GAAG,gCAAgCC,MAAnD,CADD;MAEdI,UAAU,EAAE,IAFE;MAGdC,MAAM,EAAE;QACNC,SAAS,EAAE;UACTJ,OAAO,EAAE,0CADA;UAETG,MAAM,EAAE;YACNE,WAAW,EAAE;UADP;QAFC,CADL;QAONA,WAAW,EAAE;MAPP;IAHM,CAAhB;IAaAV,KAAK,CAACW,SAAN,CAAgBd,IAAhB,GAAuBG,KAAK,CAACW,SAAN,CAAgBC,MAAhB,CAAuB,OAAvB,EAAgC;MACrDC,MAAM,EAAE;QACNR,OAAO,EAAE,gCADH;QAENE,UAAU,EAAE,IAFN;QAGNO,MAAM,EAAE;MAHF,CAD6C;MAMrD,cAAc,CACZV,SADY,EAEZ;QACE;QACA;QACAC,OAAO,EAAEC,MAAM,CACbJ,eAAe,GAAG,+BAA+BC,MADpC,CAHjB;QAMEI,UAAU,EAAE,IANd;QAOEC,MAAM,EAAEJ,SAAS,CAACI;MAPpB,CAFY,CANuC;MAkBrDO,OAAO,EAAEd,QAlB4C;MAmBrDe,QAAQ,EAAE,CACRhB,KAAK,CAACW,SAAN,CAAgBM,KAAhB,CAAsBD,QADd,EAER;QACEX,OAAO,EAAE,kBADX;QAEEE,UAAU,EAAE;MAFd,CAFQ,CAnB2C;MA0BrDW,MAAM,EACJ,6IA3BmD;MA4BrDC,QAAQ,EAAE;QACRd,OAAO,EACL,uEAFM;QAGRE,UAAU,EAAE;MAHJ;IA5B2C,CAAhC,CAAvB;IAkCAP,KAAK,CAACW,SAAN,CAAgBS,YAAhB,CAA6B,MAA7B,EAAqC,QAArC,EAA+C;MAC7C,wBAAwB;QACtB;QACAf,OAAO,EAAE,gDAFa;QAGtBS,MAAM,EAAE,IAHc;QAItBO,KAAK,EAAE;MAJe,CADqB;MAO7CC,IAAI,EAAE;QACJjB,OAAO,EAAE,2BADL;QAEJS,MAAM,EAAE;MAFJ;IAPuC,CAA/C;IAYAd,KAAK,CAACW,SAAN,CAAgBS,YAAhB,CAA6B,MAA7B,EAAqC,YAArC,EAAmD;MACjDG,UAAU,EAAE;QACVlB,OAAO,EAAE,8BADC;QAEVE,UAAU,EAAE,IAFF;QAGVc,KAAK,EAAE;MAHG,CADqC;MAMjDG,QAAQ,EAAE;QACRnB,OAAO,EACL,iGAFM;QAGRG,MAAM,EAAE;UACN,cAAcJ,SADR;UAENW,OAAO,EAAEd,QAFH;UAGNS,WAAW,EAAE,WAHP;UAINS,QAAQ,EAAE;QAJJ;MAHA,CANuC;MAgBjDV,SAAS,EAAE;QACTJ,OAAO,EAAEC,MAAM,CACb,qJAAqJH,MAArJ,CAA4JsB,OAA5J,CACE,YADF,EAEE,YAAY;UACV,OAAOxB,QAAQ,CAACE,MAAhB;QACD,CAJH,CADa,CADN;QASTI,UAAU,EAAE,IATH;QAUTC,MAAM,EAAE;UACNE,WAAW,EAAE;QADP;MAVC;IAhBsC,CAAnD;EA+BD,CA/FA,EA+FEV,KA/FF;AAgGF"},"metadata":{},"sourceType":"script"}