{"ast":null,"code":"'use strict';\n\nmodule.exports = factor;\nfactor.displayName = 'factor';\nfactor.aliases = [];\n\nfunction factor(Prism) {\n  ;\n\n  (function (Prism) {\n    var comment_inside = {\n      function: /\\b(?:BUGS?|FIX(?:MES?)?|NOTES?|TODOS?|XX+|HACKS?|WARN(?:ING)?|\\?{2,}|!{2,})\\b/\n    };\n    var string_inside = {\n      number: /\\\\[^\\s']|%\\w/\n    };\n    var factor = {\n      comment: [{\n        // ! single-line exclamation point comments with whitespace after/around the !\n        pattern: /(^|\\s)(?:! .*|!$)/,\n        lookbehind: true,\n        inside: comment_inside\n      },\n      /* from basis/multiline: */\n      {\n        // /* comment */, /* comment*/\n        pattern: /(^|\\s)\\/\\*\\s[\\s\\S]*?\\*\\/(?=\\s|$)/,\n        lookbehind: true,\n        greedy: true,\n        inside: comment_inside\n      }, {\n        // ![[ comment ]] , ![===[ comment]===]\n        pattern: /(^|\\s)!\\[(={0,6})\\[\\s[\\s\\S]*?\\]\\2\\](?=\\s|$)/,\n        lookbehind: true,\n        greedy: true,\n        inside: comment_inside\n      }],\n      number: [{\n        // basic base 10 integers 9, -9\n        pattern: /(^|\\s)[+-]?\\d+(?=\\s|$)/,\n        lookbehind: true\n      }, {\n        // base prefix integers 0b010 0o70 0xad 0d10 0XAD -0xa9\n        pattern: /(^|\\s)[+-]?0(?:b[01]+|o[0-7]+|d\\d+|x[\\dA-F]+)(?=\\s|$)/i,\n        lookbehind: true\n      }, {\n        // fractional ratios 1/5 -1/5 and the literal float approximations 1/5. -1/5.\n        pattern: /(^|\\s)[+-]?\\d+\\/\\d+\\.?(?=\\s|$)/,\n        lookbehind: true\n      }, {\n        // positive mixed numbers 23+1/5 +23+1/5\n        pattern: /(^|\\s)\\+?\\d+\\+\\d+\\/\\d+(?=\\s|$)/,\n        lookbehind: true\n      }, {\n        // negative mixed numbers -23-1/5\n        pattern: /(^|\\s)-\\d+-\\d+\\/\\d+(?=\\s|$)/,\n        lookbehind: true\n      }, {\n        // basic decimal floats -0.01 0. .0 .1 -.1 -1. -12.13 +12.13\n        // and scientific notation with base 10 exponents 3e4 3e-4 .3e-4\n        pattern: /(^|\\s)[+-]?(?:\\d*\\.\\d+|\\d+\\.\\d*|\\d+)(?:e[+-]?\\d+)?(?=\\s|$)/i,\n        lookbehind: true\n      }, {\n        // NAN literal syntax NAN: 80000deadbeef, NAN: a\n        pattern: /(^|\\s)NAN:\\s+[\\da-fA-F]+(?=\\s|$)/,\n        lookbehind: true\n      }, {\n        /*\r\n        base prefix floats 0x1.0p3 (8.0) 0b1.010p2 (5.0) 0x1.p1 0b1.11111111p11111...\r\n        \"The normalized hex form ±0x1.MMMMMMMMMMMMM[pP]±EEEE allows any floating-point number to be specified precisely.\r\n        The values of MMMMMMMMMMMMM and EEEE map directly to the mantissa and exponent fields of the binary IEEE 754 representation.\"\r\n        <https://docs.factorcode.org/content/article-syntax-floats.html>\r\n        */\n        pattern: /(^|\\s)[+-]?0(?:b1\\.[01]*|o1\\.[0-7]*|d1\\.\\d*|x1\\.[\\dA-F]*)p\\d+(?=\\s|$)/i,\n        lookbehind: true\n      }],\n      // R/ regexp?\\/\\\\/\n      regexp: {\n        pattern: /(^|\\s)R\\/\\s(?:\\\\\\S|[^\\\\/])*\\/(?:[idmsr]*|[idmsr]+-[idmsr]+)(?=\\s|$)/,\n        lookbehind: true,\n        alias: 'number',\n        inside: {\n          variable: /\\\\\\S/,\n          keyword: /[+?*\\[\\]^$(){}.|]/,\n          operator: {\n            pattern: /(\\/)[idmsr]+(?:-[idmsr]+)?/,\n            lookbehind: true\n          }\n        }\n      },\n      boolean: {\n        pattern: /(^|\\s)[tf](?=\\s|$)/,\n        lookbehind: true\n      },\n      // SBUF\" asd\", URL\" ://...\", P\" /etc/\"\n      'custom-string': {\n        pattern: /(^|\\s)[A-Z0-9\\-]+\"\\s(?:\\\\\\S|[^\"\\\\])*\"/,\n        lookbehind: true,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          number: /\\\\\\S|%\\w|\\//\n        }\n      },\n      'multiline-string': [{\n        // STRING: name \\n content \\n ; -> CONSTANT: name \"content\" (symbol)\n        pattern: /(^|\\s)STRING:\\s+\\S+(?:\\n|\\r\\n).*(?:\\n|\\r\\n)\\s*;(?=\\s|$)/,\n        lookbehind: true,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          number: string_inside.number,\n          // trailing semicolon on its own line\n          'semicolon-or-setlocal': {\n            pattern: /([\\r\\n][ \\t]*);(?=\\s|$)/,\n            lookbehind: true,\n            alias: 'function'\n          }\n        }\n      }, {\n        // HEREDOC: marker \\n content \\n marker ; -> \"content\" (immediate)\n        pattern: /(^|\\s)HEREDOC:\\s+\\S+(?:\\n|\\r\\n).*(?:\\n|\\r\\n)\\s*\\S+(?=\\s|$)/,\n        lookbehind: true,\n        greedy: true,\n        alias: 'string',\n        inside: string_inside\n      }, {\n        // [[ string ]], [==[ string]==]\n        pattern: /(^|\\s)\\[(={0,6})\\[\\s[\\s\\S]*?\\]\\2\\](?=\\s|$)/,\n        lookbehind: true,\n        greedy: true,\n        alias: 'string',\n        inside: string_inside\n      }],\n      'special-using': {\n        pattern: /(^|\\s)USING:(?:\\s\\S+)*(?=\\s+;(?:\\s|$))/,\n        lookbehind: true,\n        alias: 'function',\n        inside: {\n          // this is essentially a regex for vocab names, which i don't want to specify\n          // but the USING: gets picked up as a vocab name\n          string: {\n            pattern: /(\\s)[^:\\s]+/,\n            lookbehind: true\n          }\n        }\n      },\n\n      /* this description of stack effect literal syntax is not complete and not as specific as theoretically possible\r\n      trying to do better is more work and regex-computation-time than it's worth though.\r\n      - we'd like to have the \"delimiter\" parts of the stack effect [ (, --, and ) ] be a different (less-important or comment-like) colour to the stack effect contents\r\n      - we'd like if nested stack effects were treated as such rather than just appearing flat (with `inside`)\r\n      - we'd like if the following variable name conventions were recognised specifically:\r\n      special row variables = ..a b..\r\n      type and stack effect annotations end with a colon = ( quot: ( a: ( -- ) -- b ) -- x ), ( x: number -- )\r\n      word throws unconditional error = *\r\n      any other word-like variable name = a ? q' etc\r\n      https://docs.factorcode.org/content/article-effects.html\r\n      these are pretty complicated to highlight properly without a real parser, and therefore out of scope\r\n      the old pattern, which may be later useful, was: (^|\\s)(?:call|execute|eval)?\\((?:\\s+[^\"\\r\\n\\t ]\\S*)*?\\s+--(?:\\s+[^\"\\n\\t ]\\S*)*?\\s+\\)(?=\\s|$)\r\n      */\n      // current solution is not great\n      'stack-effect-delimiter': [{\n        // opening parenthesis\n        pattern: /(^|\\s)(?:call|eval|execute)?\\((?=\\s)/,\n        lookbehind: true,\n        alias: 'operator'\n      }, {\n        // middle --\n        pattern: /(\\s)--(?=\\s)/,\n        lookbehind: true,\n        alias: 'operator'\n      }, {\n        // closing parenthesis\n        pattern: /(\\s)\\)(?=\\s|$)/,\n        lookbehind: true,\n        alias: 'operator'\n      }],\n      combinators: {\n        pattern: null,\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      'kernel-builtin': {\n        pattern: null,\n        lookbehind: true,\n        alias: 'variable'\n      },\n      'sequences-builtin': {\n        pattern: null,\n        lookbehind: true,\n        alias: 'variable'\n      },\n      'math-builtin': {\n        pattern: null,\n        lookbehind: true,\n        alias: 'variable'\n      },\n      'constructor-word': {\n        // <array> but not <=>\n        pattern: /(^|\\s)<(?!=+>|-+>)\\S+>(?=\\s|$)/,\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      'other-builtin-syntax': {\n        pattern: null,\n        lookbehind: true,\n        alias: 'operator'\n      },\n\n      /*\r\n      full list of supported word naming conventions: (the convention appears outside of the [brackets])\r\n      set-[x]\r\n      change-[x]\r\n      with-[x]\r\n      new-[x]\r\n      >[string]\r\n      [base]>\r\n      [string]>[number]\r\n      +[symbol]+\r\n      [boolean-word]?\r\n      ?[of]\r\n      [slot-reader]>>\r\n      >>[slot-setter]\r\n      [slot-writer]<<\r\n      ([implementation-detail])\r\n      [mutater]!\r\n      [variant]*\r\n      [prettyprint].\r\n      $[help-markup]\r\n      <constructors>, SYNTAX:, etc are supported by their own patterns.\r\n      `with` and `new` from `kernel` are their own builtins.\r\n      see <https://docs.factorcode.org/content/article-conventions.html>\r\n      */\n      'conventionally-named-word': {\n        pattern: /(^|\\s)(?!\")(?:(?:change|new|set|with)-\\S+|\\$\\S+|>[^>\\s]+|[^:>\\s]+>|[^>\\s]+>[^>\\s]+|\\+[^+\\s]+\\+|[^?\\s]+\\?|\\?[^?\\s]+|[^>\\s]+>>|>>[^>\\s]+|[^<\\s]+<<|\\([^()\\s]+\\)|[^!\\s]+!|[^*\\s]\\S*\\*|[^.\\s]\\S*\\.)(?=\\s|$)/,\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      'colon-syntax': {\n        pattern: /(^|\\s)(?:[A-Z0-9\\-]+#?)?:{1,2}\\s+(?:;\\S+|(?!;)\\S+)(?=\\s|$)/,\n        lookbehind: true,\n        greedy: true,\n        alias: 'function'\n      },\n      'semicolon-or-setlocal': {\n        pattern: /(\\s)(?:;|:>)(?=\\s|$)/,\n        lookbehind: true,\n        alias: 'function'\n      },\n      // do not highlight leading } or trailing X{ at the begin/end of the file as it's invalid syntax\n      'curly-brace-literal-delimiter': [{\n        // opening\n        pattern: /(^|\\s)[a-z]*\\{(?=\\s)/i,\n        lookbehind: true,\n        alias: 'operator'\n      }, {\n        // closing\n        pattern: /(\\s)\\}(?=\\s|$)/,\n        lookbehind: true,\n        alias: 'operator'\n      }],\n      // do not highlight leading ] or trailing [ at the begin/end of the file as it's invalid syntax\n      'quotation-delimiter': [{\n        // opening\n        pattern: /(^|\\s)\\[(?=\\s)/,\n        lookbehind: true,\n        alias: 'operator'\n      }, {\n        // closing\n        pattern: /(\\s)\\](?=\\s|$)/,\n        lookbehind: true,\n        alias: 'operator'\n      }],\n      'normal-word': {\n        pattern: /(^|\\s)[^\"\\s]\\S*(?=\\s|$)/,\n        lookbehind: true\n      },\n\n      /*\r\n      basic first-class string \"a\"\r\n      with escaped double-quote \"a\\\"\"\r\n      escaped backslash \"\\\\\"\r\n      and general escapes since Factor has so many \"\\N\"\r\n      syntax that works in the reference implementation that isn't fully\r\n      supported because it's an implementation detail:\r\n      \"string 1\"\"string 2\" -> 2 strings (works anyway)\r\n      \"string\"5 -> string, 5\r\n      \"string\"[ ] -> string, quotation\r\n      { \"a\"} -> array<string>\r\n      the rest of those examples all properly recognise the string, but not\r\n      the other object (number, quotation, etc)\r\n      this is fine for a regex-only implementation.\r\n      */\n      string: {\n        pattern: /\"(?:\\\\\\S|[^\"\\\\])*\"/,\n        greedy: true,\n        inside: string_inside\n      }\n    };\n\n    var escape = function (str) {\n      return (str + '').replace(/([.?*+\\^$\\[\\]\\\\(){}|\\-])/g, '\\\\$1');\n    };\n\n    var arrToWordsRegExp = function (arr) {\n      return new RegExp('(^|\\\\s)(?:' + arr.map(escape).join('|') + ')(?=\\\\s|$)');\n    };\n\n    var builtins = {\n      'kernel-builtin': ['or', '2nipd', '4drop', 'tuck', 'wrapper', 'nip', 'wrapper?', 'callstack>array', 'die', 'dupd', 'callstack', 'callstack?', '3dup', 'hashcode', 'pick', '4nip', 'build', '>boolean', 'nipd', 'clone', '5nip', 'eq?', '?', '=', 'swapd', '2over', 'clear', '2dup', 'get-retainstack', 'not', 'tuple?', 'dup', '3nipd', 'call', '-rotd', 'object', 'drop', 'assert=', 'assert?', '-rot', 'execute', 'boa', 'get-callstack', 'curried?', '3drop', 'pickd', 'overd', 'over', 'roll', '3nip', 'swap', 'and', '2nip', 'rotd', 'throw', '(clone)', 'hashcode*', 'spin', 'reach', '4dup', 'equal?', 'get-datastack', 'assert', '2drop', '<wrapper>', 'boolean?', 'identity-hashcode', 'identity-tuple?', 'null', 'composed?', 'new', '5drop', 'rot', '-roll', 'xor', 'identity-tuple', 'boolean'],\n      'other-builtin-syntax': [// syntax\n      '=======', 'recursive', 'flushable', '>>', '<<<<<<', 'M\\\\', 'B', 'PRIVATE>', '\\\\', '======', 'final', 'inline', 'delimiter', 'deprecated', '<PRIVATE', '>>>>>>', '<<<<<<<', 'parse-complex', 'malformed-complex', 'read-only', '>>>>>>>', 'call-next-method', '<<', 'foldable', // literals\n      '$', '$[', '${'],\n      'sequences-builtin': ['member-eq?', 'mismatch', 'append', 'assert-sequence=', 'longer', 'repetition', 'clone-like', '3sequence', 'assert-sequence?', 'last-index-from', 'reversed', 'index-from', 'cut*', 'pad-tail', 'join-as', 'remove-eq!', 'concat-as', 'but-last', 'snip', 'nths', 'nth', 'sequence', 'longest', 'slice?', '<slice>', 'remove-nth', 'tail-slice', 'empty?', 'tail*', 'member?', 'virtual-sequence?', 'set-length', 'drop-prefix', 'iota', 'unclip', 'bounds-error?', 'unclip-last-slice', 'non-negative-integer-expected', 'non-negative-integer-expected?', 'midpoint@', 'longer?', '?set-nth', '?first', 'rest-slice', 'prepend-as', 'prepend', 'fourth', 'sift', 'subseq-start', 'new-sequence', '?last', 'like', 'first4', '1sequence', 'reverse', 'slice', 'virtual@', 'repetition?', 'set-last', 'index', '4sequence', 'max-length', 'set-second', 'immutable-sequence', 'first2', 'first3', 'supremum', 'unclip-slice', 'suffix!', 'insert-nth', 'tail', '3append', 'short', 'suffix', 'concat', 'flip', 'immutable?', 'reverse!', '2sequence', 'sum', 'delete-all', 'indices', 'snip-slice', '<iota>', 'check-slice', 'sequence?', 'head', 'append-as', 'halves', 'sequence=', 'collapse-slice', '?second', 'slice-error?', 'product', 'bounds-check?', 'bounds-check', 'immutable', 'virtual-exemplar', 'harvest', 'remove', 'pad-head', 'last', 'set-fourth', 'cartesian-product', 'remove-eq', 'shorten', 'shorter', 'reversed?', 'shorter?', 'shortest', 'head-slice', 'pop*', 'tail-slice*', 'but-last-slice', 'iota?', 'append!', 'cut-slice', 'new-resizable', 'head-slice*', 'sequence-hashcode', 'pop', 'set-nth', '?nth', 'second', 'join', 'immutable-sequence?', '<reversed>', '3append-as', 'virtual-sequence', 'subseq?', 'remove-nth!', 'length', 'last-index', 'lengthen', 'assert-sequence', 'copy', 'move', 'third', 'first', 'tail?', 'set-first', 'prefix', 'bounds-error', '<repetition>', 'exchange', 'surround', 'cut', 'min-length', 'set-third', 'push-all', 'head?', 'subseq-start-from', 'delete-slice', 'rest', 'sum-lengths', 'head*', 'infimum', 'remove!', 'glue', 'slice-error', 'subseq', 'push', 'replace-slice', 'subseq-as', 'unclip-last'],\n      'math-builtin': ['number=', 'next-power-of-2', '?1+', 'fp-special?', 'imaginary-part', 'float>bits', 'number?', 'fp-infinity?', 'bignum?', 'fp-snan?', 'denominator', 'gcd', '*', '+', 'fp-bitwise=', '-', 'u>=', '/', '>=', 'bitand', 'power-of-2?', 'log2-expects-positive', 'neg?', '<', 'log2', '>', 'integer?', 'number', 'bits>double', '2/', 'zero?', 'bits>float', 'float?', 'shift', 'ratio?', 'rect>', 'even?', 'ratio', 'fp-sign', 'bitnot', '>fixnum', 'complex?', '/i', 'integer>fixnum', '/f', 'sgn', '>bignum', 'next-float', 'u<', 'u>', 'mod', 'recip', 'rational', '>float', '2^', 'integer', 'fixnum?', 'neg', 'fixnum', 'sq', 'bignum', '>rect', 'bit?', 'fp-qnan?', 'simple-gcd', 'complex', '<fp-nan>', 'real', '>fraction', 'double>bits', 'bitor', 'rem', 'fp-nan-payload', 'real-part', 'log2-expects-positive?', 'prev-float', 'align', 'unordered?', 'float', 'fp-nan?', 'abs', 'bitxor', 'integer>fixnum-strict', 'u<=', 'odd?', '<=', '/mod', '>integer', 'real?', 'rational?', 'numerator'] // that's all for now\n\n    };\n    Object.keys(builtins).forEach(function (k) {\n      factor[k].pattern = arrToWordsRegExp(builtins[k]);\n    });\n    var combinators = [// kernel\n    '2bi', 'while', '2tri', 'bi*', '4dip', 'both?', 'same?', 'tri@', 'curry', 'prepose', '3bi', '?if', 'tri*', '2keep', '3keep', 'curried', '2keepd', 'when', '2bi*', '2tri*', '4keep', 'bi@', 'keepdd', 'do', 'unless*', 'tri-curry', 'if*', 'loop', 'bi-curry*', 'when*', '2bi@', '2tri@', 'with', '2with', 'either?', 'bi', 'until', '3dip', '3curry', 'tri-curry*', 'tri-curry@', 'bi-curry', 'keepd', 'compose', '2dip', 'if', '3tri', 'unless', 'tuple', 'keep', '2curry', 'tri', 'most', 'while*', 'dip', 'composed', 'bi-curry@', // sequences\n    'find-last-from', 'trim-head-slice', 'map-as', 'each-from', 'none?', 'trim-tail', 'partition', 'if-empty', 'accumulate*', 'reject!', 'find-from', 'accumulate-as', 'collector-for-as', 'reject', 'map', 'map-sum', 'accumulate!', '2each-from', 'follow', 'supremum-by', 'map!', 'unless-empty', 'collector', 'padding', 'reduce-index', 'replicate-as', 'infimum-by', 'trim-tail-slice', 'count', 'find-index', 'filter', 'accumulate*!', 'reject-as', 'map-integers', 'map-find', 'reduce', 'selector', 'interleave', '2map', 'filter-as', 'binary-reduce', 'map-index-as', 'find', 'produce', 'filter!', 'replicate', 'cartesian-map', 'cartesian-each', 'find-index-from', 'map-find-last', '3map-as', '3map', 'find-last', 'selector-as', '2map-as', '2map-reduce', 'accumulate', 'each', 'each-index', 'accumulate*-as', 'when-empty', 'all?', 'collector-as', 'push-either', 'new-like', 'collector-for', '2selector', 'push-if', '2all?', 'map-reduce', '3each', 'any?', 'trim-slice', '2reduce', 'change-nth', 'produce-as', '2each', 'trim', 'trim-head', 'cartesian-find', 'map-index', // math\n    'if-zero', 'each-integer', 'unless-zero', '(find-integer)', 'when-zero', 'find-last-integer', '(all-integers?)', 'times', '(each-integer)', 'find-integer', 'all-integers?', // math.combinators\n    'unless-negative', 'if-positive', 'when-positive', 'when-negative', 'unless-positive', 'if-negative', // combinators\n    'case', '2cleave', 'cond>quot', 'case>quot', '3cleave', 'wrong-values', 'to-fixed-point', 'alist>quot', 'cond', 'cleave', 'call-effect', 'recursive-hashcode', 'spread', 'deep-spread>quot', // combinators.short-circuit\n    '2||', '0||', 'n||', '0&&', '2&&', '3||', '1||', '1&&', 'n&&', '3&&', // combinators.smart\n    'smart-unless*', 'keep-inputs', 'reduce-outputs', 'smart-when*', 'cleave>array', 'smart-with', 'smart-apply', 'smart-if', 'inputs/outputs', 'output>sequence-n', 'map-outputs', 'map-reduce-outputs', 'dropping', 'output>array', 'smart-map-reduce', 'smart-2map-reduce', 'output>array-n', 'nullary', 'input<sequence', 'append-outputs', 'drop-inputs', 'inputs', 'smart-2reduce', 'drop-outputs', 'smart-reduce', 'preserving', 'smart-when', 'outputs', 'append-outputs-as', 'smart-unless', 'smart-if*', 'sum-outputs', 'input<sequence-unsafe', 'output>sequence' // tafn\n    ];\n    factor.combinators.pattern = arrToWordsRegExp(combinators);\n    Prism.languages.factor = factor;\n  })(Prism);\n}","map":{"version":3,"names":["module","exports","factor","displayName","aliases","Prism","comment_inside","function","string_inside","number","comment","pattern","lookbehind","inside","greedy","regexp","alias","variable","keyword","operator","boolean","string","combinators","escape","str","replace","arrToWordsRegExp","arr","RegExp","map","join","builtins","Object","keys","forEach","k","languages"],"sources":["C:/Users/ayeh8/Documents/Plant-Buddy/node_modules/refractor/lang/factor.js"],"sourcesContent":["'use strict'\r\n\r\nmodule.exports = factor\r\nfactor.displayName = 'factor'\r\nfactor.aliases = []\r\nfunction factor(Prism) {\r\n  ;(function (Prism) {\r\n    var comment_inside = {\r\n      function:\r\n        /\\b(?:BUGS?|FIX(?:MES?)?|NOTES?|TODOS?|XX+|HACKS?|WARN(?:ING)?|\\?{2,}|!{2,})\\b/\r\n    }\r\n    var string_inside = {\r\n      number: /\\\\[^\\s']|%\\w/\r\n    }\r\n    var factor = {\r\n      comment: [\r\n        {\r\n          // ! single-line exclamation point comments with whitespace after/around the !\r\n          pattern: /(^|\\s)(?:! .*|!$)/,\r\n          lookbehind: true,\r\n          inside: comment_inside\r\n        },\r\n        /* from basis/multiline: */\r\n        {\r\n          // /* comment */, /* comment*/\r\n          pattern: /(^|\\s)\\/\\*\\s[\\s\\S]*?\\*\\/(?=\\s|$)/,\r\n          lookbehind: true,\r\n          greedy: true,\r\n          inside: comment_inside\r\n        },\r\n        {\r\n          // ![[ comment ]] , ![===[ comment]===]\r\n          pattern: /(^|\\s)!\\[(={0,6})\\[\\s[\\s\\S]*?\\]\\2\\](?=\\s|$)/,\r\n          lookbehind: true,\r\n          greedy: true,\r\n          inside: comment_inside\r\n        }\r\n      ],\r\n      number: [\r\n        {\r\n          // basic base 10 integers 9, -9\r\n          pattern: /(^|\\s)[+-]?\\d+(?=\\s|$)/,\r\n          lookbehind: true\r\n        },\r\n        {\r\n          // base prefix integers 0b010 0o70 0xad 0d10 0XAD -0xa9\r\n          pattern: /(^|\\s)[+-]?0(?:b[01]+|o[0-7]+|d\\d+|x[\\dA-F]+)(?=\\s|$)/i,\r\n          lookbehind: true\r\n        },\r\n        {\r\n          // fractional ratios 1/5 -1/5 and the literal float approximations 1/5. -1/5.\r\n          pattern: /(^|\\s)[+-]?\\d+\\/\\d+\\.?(?=\\s|$)/,\r\n          lookbehind: true\r\n        },\r\n        {\r\n          // positive mixed numbers 23+1/5 +23+1/5\r\n          pattern: /(^|\\s)\\+?\\d+\\+\\d+\\/\\d+(?=\\s|$)/,\r\n          lookbehind: true\r\n        },\r\n        {\r\n          // negative mixed numbers -23-1/5\r\n          pattern: /(^|\\s)-\\d+-\\d+\\/\\d+(?=\\s|$)/,\r\n          lookbehind: true\r\n        },\r\n        {\r\n          // basic decimal floats -0.01 0. .0 .1 -.1 -1. -12.13 +12.13\r\n          // and scientific notation with base 10 exponents 3e4 3e-4 .3e-4\r\n          pattern:\r\n            /(^|\\s)[+-]?(?:\\d*\\.\\d+|\\d+\\.\\d*|\\d+)(?:e[+-]?\\d+)?(?=\\s|$)/i,\r\n          lookbehind: true\r\n        },\r\n        {\r\n          // NAN literal syntax NAN: 80000deadbeef, NAN: a\r\n          pattern: /(^|\\s)NAN:\\s+[\\da-fA-F]+(?=\\s|$)/,\r\n          lookbehind: true\r\n        },\r\n        {\r\n          /*\r\nbase prefix floats 0x1.0p3 (8.0) 0b1.010p2 (5.0) 0x1.p1 0b1.11111111p11111...\r\n\"The normalized hex form ±0x1.MMMMMMMMMMMMM[pP]±EEEE allows any floating-point number to be specified precisely.\r\nThe values of MMMMMMMMMMMMM and EEEE map directly to the mantissa and exponent fields of the binary IEEE 754 representation.\"\r\n<https://docs.factorcode.org/content/article-syntax-floats.html>\r\n*/\r\n          pattern:\r\n            /(^|\\s)[+-]?0(?:b1\\.[01]*|o1\\.[0-7]*|d1\\.\\d*|x1\\.[\\dA-F]*)p\\d+(?=\\s|$)/i,\r\n          lookbehind: true\r\n        }\r\n      ],\r\n      // R/ regexp?\\/\\\\/\r\n      regexp: {\r\n        pattern:\r\n          /(^|\\s)R\\/\\s(?:\\\\\\S|[^\\\\/])*\\/(?:[idmsr]*|[idmsr]+-[idmsr]+)(?=\\s|$)/,\r\n        lookbehind: true,\r\n        alias: 'number',\r\n        inside: {\r\n          variable: /\\\\\\S/,\r\n          keyword: /[+?*\\[\\]^$(){}.|]/,\r\n          operator: {\r\n            pattern: /(\\/)[idmsr]+(?:-[idmsr]+)?/,\r\n            lookbehind: true\r\n          }\r\n        }\r\n      },\r\n      boolean: {\r\n        pattern: /(^|\\s)[tf](?=\\s|$)/,\r\n        lookbehind: true\r\n      },\r\n      // SBUF\" asd\", URL\" ://...\", P\" /etc/\"\r\n      'custom-string': {\r\n        pattern: /(^|\\s)[A-Z0-9\\-]+\"\\s(?:\\\\\\S|[^\"\\\\])*\"/,\r\n        lookbehind: true,\r\n        greedy: true,\r\n        alias: 'string',\r\n        inside: {\r\n          number: /\\\\\\S|%\\w|\\//\r\n        }\r\n      },\r\n      'multiline-string': [\r\n        {\r\n          // STRING: name \\n content \\n ; -> CONSTANT: name \"content\" (symbol)\r\n          pattern: /(^|\\s)STRING:\\s+\\S+(?:\\n|\\r\\n).*(?:\\n|\\r\\n)\\s*;(?=\\s|$)/,\r\n          lookbehind: true,\r\n          greedy: true,\r\n          alias: 'string',\r\n          inside: {\r\n            number: string_inside.number,\r\n            // trailing semicolon on its own line\r\n            'semicolon-or-setlocal': {\r\n              pattern: /([\\r\\n][ \\t]*);(?=\\s|$)/,\r\n              lookbehind: true,\r\n              alias: 'function'\r\n            }\r\n          }\r\n        },\r\n        {\r\n          // HEREDOC: marker \\n content \\n marker ; -> \"content\" (immediate)\r\n          pattern: /(^|\\s)HEREDOC:\\s+\\S+(?:\\n|\\r\\n).*(?:\\n|\\r\\n)\\s*\\S+(?=\\s|$)/,\r\n          lookbehind: true,\r\n          greedy: true,\r\n          alias: 'string',\r\n          inside: string_inside\r\n        },\r\n        {\r\n          // [[ string ]], [==[ string]==]\r\n          pattern: /(^|\\s)\\[(={0,6})\\[\\s[\\s\\S]*?\\]\\2\\](?=\\s|$)/,\r\n          lookbehind: true,\r\n          greedy: true,\r\n          alias: 'string',\r\n          inside: string_inside\r\n        }\r\n      ],\r\n      'special-using': {\r\n        pattern: /(^|\\s)USING:(?:\\s\\S+)*(?=\\s+;(?:\\s|$))/,\r\n        lookbehind: true,\r\n        alias: 'function',\r\n        inside: {\r\n          // this is essentially a regex for vocab names, which i don't want to specify\r\n          // but the USING: gets picked up as a vocab name\r\n          string: {\r\n            pattern: /(\\s)[^:\\s]+/,\r\n            lookbehind: true\r\n          }\r\n        }\r\n      },\r\n      /* this description of stack effect literal syntax is not complete and not as specific as theoretically possible\r\ntrying to do better is more work and regex-computation-time than it's worth though.\r\n- we'd like to have the \"delimiter\" parts of the stack effect [ (, --, and ) ] be a different (less-important or comment-like) colour to the stack effect contents\r\n- we'd like if nested stack effects were treated as such rather than just appearing flat (with `inside`)\r\n- we'd like if the following variable name conventions were recognised specifically:\r\nspecial row variables = ..a b..\r\ntype and stack effect annotations end with a colon = ( quot: ( a: ( -- ) -- b ) -- x ), ( x: number -- )\r\nword throws unconditional error = *\r\nany other word-like variable name = a ? q' etc\r\nhttps://docs.factorcode.org/content/article-effects.html\r\nthese are pretty complicated to highlight properly without a real parser, and therefore out of scope\r\nthe old pattern, which may be later useful, was: (^|\\s)(?:call|execute|eval)?\\((?:\\s+[^\"\\r\\n\\t ]\\S*)*?\\s+--(?:\\s+[^\"\\n\\t ]\\S*)*?\\s+\\)(?=\\s|$)\r\n*/\r\n      // current solution is not great\r\n      'stack-effect-delimiter': [\r\n        {\r\n          // opening parenthesis\r\n          pattern: /(^|\\s)(?:call|eval|execute)?\\((?=\\s)/,\r\n          lookbehind: true,\r\n          alias: 'operator'\r\n        },\r\n        {\r\n          // middle --\r\n          pattern: /(\\s)--(?=\\s)/,\r\n          lookbehind: true,\r\n          alias: 'operator'\r\n        },\r\n        {\r\n          // closing parenthesis\r\n          pattern: /(\\s)\\)(?=\\s|$)/,\r\n          lookbehind: true,\r\n          alias: 'operator'\r\n        }\r\n      ],\r\n      combinators: {\r\n        pattern: null,\r\n        lookbehind: true,\r\n        alias: 'keyword'\r\n      },\r\n      'kernel-builtin': {\r\n        pattern: null,\r\n        lookbehind: true,\r\n        alias: 'variable'\r\n      },\r\n      'sequences-builtin': {\r\n        pattern: null,\r\n        lookbehind: true,\r\n        alias: 'variable'\r\n      },\r\n      'math-builtin': {\r\n        pattern: null,\r\n        lookbehind: true,\r\n        alias: 'variable'\r\n      },\r\n      'constructor-word': {\r\n        // <array> but not <=>\r\n        pattern: /(^|\\s)<(?!=+>|-+>)\\S+>(?=\\s|$)/,\r\n        lookbehind: true,\r\n        alias: 'keyword'\r\n      },\r\n      'other-builtin-syntax': {\r\n        pattern: null,\r\n        lookbehind: true,\r\n        alias: 'operator'\r\n      },\r\n      /*\r\nfull list of supported word naming conventions: (the convention appears outside of the [brackets])\r\nset-[x]\r\nchange-[x]\r\nwith-[x]\r\nnew-[x]\r\n>[string]\r\n[base]>\r\n[string]>[number]\r\n+[symbol]+\r\n[boolean-word]?\r\n?[of]\r\n[slot-reader]>>\r\n>>[slot-setter]\r\n[slot-writer]<<\r\n([implementation-detail])\r\n[mutater]!\r\n[variant]*\r\n[prettyprint].\r\n$[help-markup]\r\n<constructors>, SYNTAX:, etc are supported by their own patterns.\r\n`with` and `new` from `kernel` are their own builtins.\r\nsee <https://docs.factorcode.org/content/article-conventions.html>\r\n*/\r\n      'conventionally-named-word': {\r\n        pattern:\r\n          /(^|\\s)(?!\")(?:(?:change|new|set|with)-\\S+|\\$\\S+|>[^>\\s]+|[^:>\\s]+>|[^>\\s]+>[^>\\s]+|\\+[^+\\s]+\\+|[^?\\s]+\\?|\\?[^?\\s]+|[^>\\s]+>>|>>[^>\\s]+|[^<\\s]+<<|\\([^()\\s]+\\)|[^!\\s]+!|[^*\\s]\\S*\\*|[^.\\s]\\S*\\.)(?=\\s|$)/,\r\n        lookbehind: true,\r\n        alias: 'keyword'\r\n      },\r\n      'colon-syntax': {\r\n        pattern: /(^|\\s)(?:[A-Z0-9\\-]+#?)?:{1,2}\\s+(?:;\\S+|(?!;)\\S+)(?=\\s|$)/,\r\n        lookbehind: true,\r\n        greedy: true,\r\n        alias: 'function'\r\n      },\r\n      'semicolon-or-setlocal': {\r\n        pattern: /(\\s)(?:;|:>)(?=\\s|$)/,\r\n        lookbehind: true,\r\n        alias: 'function'\r\n      },\r\n      // do not highlight leading } or trailing X{ at the begin/end of the file as it's invalid syntax\r\n      'curly-brace-literal-delimiter': [\r\n        {\r\n          // opening\r\n          pattern: /(^|\\s)[a-z]*\\{(?=\\s)/i,\r\n          lookbehind: true,\r\n          alias: 'operator'\r\n        },\r\n        {\r\n          // closing\r\n          pattern: /(\\s)\\}(?=\\s|$)/,\r\n          lookbehind: true,\r\n          alias: 'operator'\r\n        }\r\n      ],\r\n      // do not highlight leading ] or trailing [ at the begin/end of the file as it's invalid syntax\r\n      'quotation-delimiter': [\r\n        {\r\n          // opening\r\n          pattern: /(^|\\s)\\[(?=\\s)/,\r\n          lookbehind: true,\r\n          alias: 'operator'\r\n        },\r\n        {\r\n          // closing\r\n          pattern: /(\\s)\\](?=\\s|$)/,\r\n          lookbehind: true,\r\n          alias: 'operator'\r\n        }\r\n      ],\r\n      'normal-word': {\r\n        pattern: /(^|\\s)[^\"\\s]\\S*(?=\\s|$)/,\r\n        lookbehind: true\r\n      },\r\n      /*\r\nbasic first-class string \"a\"\r\nwith escaped double-quote \"a\\\"\"\r\nescaped backslash \"\\\\\"\r\nand general escapes since Factor has so many \"\\N\"\r\nsyntax that works in the reference implementation that isn't fully\r\nsupported because it's an implementation detail:\r\n\"string 1\"\"string 2\" -> 2 strings (works anyway)\r\n\"string\"5 -> string, 5\r\n\"string\"[ ] -> string, quotation\r\n{ \"a\"} -> array<string>\r\nthe rest of those examples all properly recognise the string, but not\r\nthe other object (number, quotation, etc)\r\nthis is fine for a regex-only implementation.\r\n*/\r\n      string: {\r\n        pattern: /\"(?:\\\\\\S|[^\"\\\\])*\"/,\r\n        greedy: true,\r\n        inside: string_inside\r\n      }\r\n    }\r\n    var escape = function (str) {\r\n      return (str + '').replace(/([.?*+\\^$\\[\\]\\\\(){}|\\-])/g, '\\\\$1')\r\n    }\r\n    var arrToWordsRegExp = function (arr) {\r\n      return new RegExp('(^|\\\\s)(?:' + arr.map(escape).join('|') + ')(?=\\\\s|$)')\r\n    }\r\n    var builtins = {\r\n      'kernel-builtin': [\r\n        'or',\r\n        '2nipd',\r\n        '4drop',\r\n        'tuck',\r\n        'wrapper',\r\n        'nip',\r\n        'wrapper?',\r\n        'callstack>array',\r\n        'die',\r\n        'dupd',\r\n        'callstack',\r\n        'callstack?',\r\n        '3dup',\r\n        'hashcode',\r\n        'pick',\r\n        '4nip',\r\n        'build',\r\n        '>boolean',\r\n        'nipd',\r\n        'clone',\r\n        '5nip',\r\n        'eq?',\r\n        '?',\r\n        '=',\r\n        'swapd',\r\n        '2over',\r\n        'clear',\r\n        '2dup',\r\n        'get-retainstack',\r\n        'not',\r\n        'tuple?',\r\n        'dup',\r\n        '3nipd',\r\n        'call',\r\n        '-rotd',\r\n        'object',\r\n        'drop',\r\n        'assert=',\r\n        'assert?',\r\n        '-rot',\r\n        'execute',\r\n        'boa',\r\n        'get-callstack',\r\n        'curried?',\r\n        '3drop',\r\n        'pickd',\r\n        'overd',\r\n        'over',\r\n        'roll',\r\n        '3nip',\r\n        'swap',\r\n        'and',\r\n        '2nip',\r\n        'rotd',\r\n        'throw',\r\n        '(clone)',\r\n        'hashcode*',\r\n        'spin',\r\n        'reach',\r\n        '4dup',\r\n        'equal?',\r\n        'get-datastack',\r\n        'assert',\r\n        '2drop',\r\n        '<wrapper>',\r\n        'boolean?',\r\n        'identity-hashcode',\r\n        'identity-tuple?',\r\n        'null',\r\n        'composed?',\r\n        'new',\r\n        '5drop',\r\n        'rot',\r\n        '-roll',\r\n        'xor',\r\n        'identity-tuple',\r\n        'boolean'\r\n      ],\r\n      'other-builtin-syntax': [\r\n        // syntax\r\n        '=======',\r\n        'recursive',\r\n        'flushable',\r\n        '>>',\r\n        '<<<<<<',\r\n        'M\\\\',\r\n        'B',\r\n        'PRIVATE>',\r\n        '\\\\',\r\n        '======',\r\n        'final',\r\n        'inline',\r\n        'delimiter',\r\n        'deprecated',\r\n        '<PRIVATE',\r\n        '>>>>>>',\r\n        '<<<<<<<',\r\n        'parse-complex',\r\n        'malformed-complex',\r\n        'read-only',\r\n        '>>>>>>>',\r\n        'call-next-method',\r\n        '<<',\r\n        'foldable', // literals\r\n        '$',\r\n        '$[',\r\n        '${'\r\n      ],\r\n      'sequences-builtin': [\r\n        'member-eq?',\r\n        'mismatch',\r\n        'append',\r\n        'assert-sequence=',\r\n        'longer',\r\n        'repetition',\r\n        'clone-like',\r\n        '3sequence',\r\n        'assert-sequence?',\r\n        'last-index-from',\r\n        'reversed',\r\n        'index-from',\r\n        'cut*',\r\n        'pad-tail',\r\n        'join-as',\r\n        'remove-eq!',\r\n        'concat-as',\r\n        'but-last',\r\n        'snip',\r\n        'nths',\r\n        'nth',\r\n        'sequence',\r\n        'longest',\r\n        'slice?',\r\n        '<slice>',\r\n        'remove-nth',\r\n        'tail-slice',\r\n        'empty?',\r\n        'tail*',\r\n        'member?',\r\n        'virtual-sequence?',\r\n        'set-length',\r\n        'drop-prefix',\r\n        'iota',\r\n        'unclip',\r\n        'bounds-error?',\r\n        'unclip-last-slice',\r\n        'non-negative-integer-expected',\r\n        'non-negative-integer-expected?',\r\n        'midpoint@',\r\n        'longer?',\r\n        '?set-nth',\r\n        '?first',\r\n        'rest-slice',\r\n        'prepend-as',\r\n        'prepend',\r\n        'fourth',\r\n        'sift',\r\n        'subseq-start',\r\n        'new-sequence',\r\n        '?last',\r\n        'like',\r\n        'first4',\r\n        '1sequence',\r\n        'reverse',\r\n        'slice',\r\n        'virtual@',\r\n        'repetition?',\r\n        'set-last',\r\n        'index',\r\n        '4sequence',\r\n        'max-length',\r\n        'set-second',\r\n        'immutable-sequence',\r\n        'first2',\r\n        'first3',\r\n        'supremum',\r\n        'unclip-slice',\r\n        'suffix!',\r\n        'insert-nth',\r\n        'tail',\r\n        '3append',\r\n        'short',\r\n        'suffix',\r\n        'concat',\r\n        'flip',\r\n        'immutable?',\r\n        'reverse!',\r\n        '2sequence',\r\n        'sum',\r\n        'delete-all',\r\n        'indices',\r\n        'snip-slice',\r\n        '<iota>',\r\n        'check-slice',\r\n        'sequence?',\r\n        'head',\r\n        'append-as',\r\n        'halves',\r\n        'sequence=',\r\n        'collapse-slice',\r\n        '?second',\r\n        'slice-error?',\r\n        'product',\r\n        'bounds-check?',\r\n        'bounds-check',\r\n        'immutable',\r\n        'virtual-exemplar',\r\n        'harvest',\r\n        'remove',\r\n        'pad-head',\r\n        'last',\r\n        'set-fourth',\r\n        'cartesian-product',\r\n        'remove-eq',\r\n        'shorten',\r\n        'shorter',\r\n        'reversed?',\r\n        'shorter?',\r\n        'shortest',\r\n        'head-slice',\r\n        'pop*',\r\n        'tail-slice*',\r\n        'but-last-slice',\r\n        'iota?',\r\n        'append!',\r\n        'cut-slice',\r\n        'new-resizable',\r\n        'head-slice*',\r\n        'sequence-hashcode',\r\n        'pop',\r\n        'set-nth',\r\n        '?nth',\r\n        'second',\r\n        'join',\r\n        'immutable-sequence?',\r\n        '<reversed>',\r\n        '3append-as',\r\n        'virtual-sequence',\r\n        'subseq?',\r\n        'remove-nth!',\r\n        'length',\r\n        'last-index',\r\n        'lengthen',\r\n        'assert-sequence',\r\n        'copy',\r\n        'move',\r\n        'third',\r\n        'first',\r\n        'tail?',\r\n        'set-first',\r\n        'prefix',\r\n        'bounds-error',\r\n        '<repetition>',\r\n        'exchange',\r\n        'surround',\r\n        'cut',\r\n        'min-length',\r\n        'set-third',\r\n        'push-all',\r\n        'head?',\r\n        'subseq-start-from',\r\n        'delete-slice',\r\n        'rest',\r\n        'sum-lengths',\r\n        'head*',\r\n        'infimum',\r\n        'remove!',\r\n        'glue',\r\n        'slice-error',\r\n        'subseq',\r\n        'push',\r\n        'replace-slice',\r\n        'subseq-as',\r\n        'unclip-last'\r\n      ],\r\n      'math-builtin': [\r\n        'number=',\r\n        'next-power-of-2',\r\n        '?1+',\r\n        'fp-special?',\r\n        'imaginary-part',\r\n        'float>bits',\r\n        'number?',\r\n        'fp-infinity?',\r\n        'bignum?',\r\n        'fp-snan?',\r\n        'denominator',\r\n        'gcd',\r\n        '*',\r\n        '+',\r\n        'fp-bitwise=',\r\n        '-',\r\n        'u>=',\r\n        '/',\r\n        '>=',\r\n        'bitand',\r\n        'power-of-2?',\r\n        'log2-expects-positive',\r\n        'neg?',\r\n        '<',\r\n        'log2',\r\n        '>',\r\n        'integer?',\r\n        'number',\r\n        'bits>double',\r\n        '2/',\r\n        'zero?',\r\n        'bits>float',\r\n        'float?',\r\n        'shift',\r\n        'ratio?',\r\n        'rect>',\r\n        'even?',\r\n        'ratio',\r\n        'fp-sign',\r\n        'bitnot',\r\n        '>fixnum',\r\n        'complex?',\r\n        '/i',\r\n        'integer>fixnum',\r\n        '/f',\r\n        'sgn',\r\n        '>bignum',\r\n        'next-float',\r\n        'u<',\r\n        'u>',\r\n        'mod',\r\n        'recip',\r\n        'rational',\r\n        '>float',\r\n        '2^',\r\n        'integer',\r\n        'fixnum?',\r\n        'neg',\r\n        'fixnum',\r\n        'sq',\r\n        'bignum',\r\n        '>rect',\r\n        'bit?',\r\n        'fp-qnan?',\r\n        'simple-gcd',\r\n        'complex',\r\n        '<fp-nan>',\r\n        'real',\r\n        '>fraction',\r\n        'double>bits',\r\n        'bitor',\r\n        'rem',\r\n        'fp-nan-payload',\r\n        'real-part',\r\n        'log2-expects-positive?',\r\n        'prev-float',\r\n        'align',\r\n        'unordered?',\r\n        'float',\r\n        'fp-nan?',\r\n        'abs',\r\n        'bitxor',\r\n        'integer>fixnum-strict',\r\n        'u<=',\r\n        'odd?',\r\n        '<=',\r\n        '/mod',\r\n        '>integer',\r\n        'real?',\r\n        'rational?',\r\n        'numerator'\r\n      ] // that's all for now\r\n    }\r\n    Object.keys(builtins).forEach(function (k) {\r\n      factor[k].pattern = arrToWordsRegExp(builtins[k])\r\n    })\r\n    var combinators = [\r\n      // kernel\r\n      '2bi',\r\n      'while',\r\n      '2tri',\r\n      'bi*',\r\n      '4dip',\r\n      'both?',\r\n      'same?',\r\n      'tri@',\r\n      'curry',\r\n      'prepose',\r\n      '3bi',\r\n      '?if',\r\n      'tri*',\r\n      '2keep',\r\n      '3keep',\r\n      'curried',\r\n      '2keepd',\r\n      'when',\r\n      '2bi*',\r\n      '2tri*',\r\n      '4keep',\r\n      'bi@',\r\n      'keepdd',\r\n      'do',\r\n      'unless*',\r\n      'tri-curry',\r\n      'if*',\r\n      'loop',\r\n      'bi-curry*',\r\n      'when*',\r\n      '2bi@',\r\n      '2tri@',\r\n      'with',\r\n      '2with',\r\n      'either?',\r\n      'bi',\r\n      'until',\r\n      '3dip',\r\n      '3curry',\r\n      'tri-curry*',\r\n      'tri-curry@',\r\n      'bi-curry',\r\n      'keepd',\r\n      'compose',\r\n      '2dip',\r\n      'if',\r\n      '3tri',\r\n      'unless',\r\n      'tuple',\r\n      'keep',\r\n      '2curry',\r\n      'tri',\r\n      'most',\r\n      'while*',\r\n      'dip',\r\n      'composed',\r\n      'bi-curry@', // sequences\r\n      'find-last-from',\r\n      'trim-head-slice',\r\n      'map-as',\r\n      'each-from',\r\n      'none?',\r\n      'trim-tail',\r\n      'partition',\r\n      'if-empty',\r\n      'accumulate*',\r\n      'reject!',\r\n      'find-from',\r\n      'accumulate-as',\r\n      'collector-for-as',\r\n      'reject',\r\n      'map',\r\n      'map-sum',\r\n      'accumulate!',\r\n      '2each-from',\r\n      'follow',\r\n      'supremum-by',\r\n      'map!',\r\n      'unless-empty',\r\n      'collector',\r\n      'padding',\r\n      'reduce-index',\r\n      'replicate-as',\r\n      'infimum-by',\r\n      'trim-tail-slice',\r\n      'count',\r\n      'find-index',\r\n      'filter',\r\n      'accumulate*!',\r\n      'reject-as',\r\n      'map-integers',\r\n      'map-find',\r\n      'reduce',\r\n      'selector',\r\n      'interleave',\r\n      '2map',\r\n      'filter-as',\r\n      'binary-reduce',\r\n      'map-index-as',\r\n      'find',\r\n      'produce',\r\n      'filter!',\r\n      'replicate',\r\n      'cartesian-map',\r\n      'cartesian-each',\r\n      'find-index-from',\r\n      'map-find-last',\r\n      '3map-as',\r\n      '3map',\r\n      'find-last',\r\n      'selector-as',\r\n      '2map-as',\r\n      '2map-reduce',\r\n      'accumulate',\r\n      'each',\r\n      'each-index',\r\n      'accumulate*-as',\r\n      'when-empty',\r\n      'all?',\r\n      'collector-as',\r\n      'push-either',\r\n      'new-like',\r\n      'collector-for',\r\n      '2selector',\r\n      'push-if',\r\n      '2all?',\r\n      'map-reduce',\r\n      '3each',\r\n      'any?',\r\n      'trim-slice',\r\n      '2reduce',\r\n      'change-nth',\r\n      'produce-as',\r\n      '2each',\r\n      'trim',\r\n      'trim-head',\r\n      'cartesian-find',\r\n      'map-index', // math\r\n      'if-zero',\r\n      'each-integer',\r\n      'unless-zero',\r\n      '(find-integer)',\r\n      'when-zero',\r\n      'find-last-integer',\r\n      '(all-integers?)',\r\n      'times',\r\n      '(each-integer)',\r\n      'find-integer',\r\n      'all-integers?', // math.combinators\r\n      'unless-negative',\r\n      'if-positive',\r\n      'when-positive',\r\n      'when-negative',\r\n      'unless-positive',\r\n      'if-negative', // combinators\r\n      'case',\r\n      '2cleave',\r\n      'cond>quot',\r\n      'case>quot',\r\n      '3cleave',\r\n      'wrong-values',\r\n      'to-fixed-point',\r\n      'alist>quot',\r\n      'cond',\r\n      'cleave',\r\n      'call-effect',\r\n      'recursive-hashcode',\r\n      'spread',\r\n      'deep-spread>quot', // combinators.short-circuit\r\n      '2||',\r\n      '0||',\r\n      'n||',\r\n      '0&&',\r\n      '2&&',\r\n      '3||',\r\n      '1||',\r\n      '1&&',\r\n      'n&&',\r\n      '3&&', // combinators.smart\r\n      'smart-unless*',\r\n      'keep-inputs',\r\n      'reduce-outputs',\r\n      'smart-when*',\r\n      'cleave>array',\r\n      'smart-with',\r\n      'smart-apply',\r\n      'smart-if',\r\n      'inputs/outputs',\r\n      'output>sequence-n',\r\n      'map-outputs',\r\n      'map-reduce-outputs',\r\n      'dropping',\r\n      'output>array',\r\n      'smart-map-reduce',\r\n      'smart-2map-reduce',\r\n      'output>array-n',\r\n      'nullary',\r\n      'input<sequence',\r\n      'append-outputs',\r\n      'drop-inputs',\r\n      'inputs',\r\n      'smart-2reduce',\r\n      'drop-outputs',\r\n      'smart-reduce',\r\n      'preserving',\r\n      'smart-when',\r\n      'outputs',\r\n      'append-outputs-as',\r\n      'smart-unless',\r\n      'smart-if*',\r\n      'sum-outputs',\r\n      'input<sequence-unsafe',\r\n      'output>sequence' // tafn\r\n    ]\r\n    factor.combinators.pattern = arrToWordsRegExp(combinators)\r\n    Prism.languages.factor = factor\r\n  })(Prism)\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}