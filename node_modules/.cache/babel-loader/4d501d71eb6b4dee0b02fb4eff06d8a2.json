{"ast":null,"code":"'use strict';\n\nmodule.exports = naniscript;\nnaniscript.displayName = 'naniscript';\nnaniscript.aliases = [];\n\nfunction naniscript(Prism) {\n  ;\n\n  (function (Prism) {\n    var expressionDef = /\\{[^\\r\\n\\[\\]{}]*\\}/;\n    var params = {\n      'quoted-string': {\n        pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n        alias: 'operator'\n      },\n      'command-param-id': {\n        pattern: /(\\s)\\w+:/,\n        lookbehind: true,\n        alias: 'property'\n      },\n      'command-param-value': [{\n        pattern: expressionDef,\n        alias: 'selector'\n      }, {\n        pattern: /([\\t ])\\S+/,\n        lookbehind: true,\n        greedy: true,\n        alias: 'operator'\n      }, {\n        pattern: /\\S(?:.*\\S)?/,\n        alias: 'operator'\n      }]\n    };\n    Prism.languages.naniscript = {\n      // ; ...\n      comment: {\n        pattern: /^([\\t ]*);.*/m,\n        lookbehind: true\n      },\n      // > ...\n      // Define is a control line starting with '>' followed by a word, a space and a text.\n      define: {\n        pattern: /^>.+/m,\n        alias: 'tag',\n        inside: {\n          value: {\n            pattern: /(^>\\w+[\\t ]+)(?!\\s)[^{}\\r\\n]+/,\n            lookbehind: true,\n            alias: 'operator'\n          },\n          key: {\n            pattern: /(^>)\\w+/,\n            lookbehind: true\n          }\n        }\n      },\n      // # ...\n      label: {\n        pattern: /^([\\t ]*)#[\\t ]*\\w+[\\t ]*$/m,\n        lookbehind: true,\n        alias: 'regex'\n      },\n      command: {\n        pattern: /^([\\t ]*)@\\w+(?=[\\t ]|$).*/m,\n        lookbehind: true,\n        alias: 'function',\n        inside: {\n          'command-name': /^@\\w+/,\n          expression: {\n            pattern: expressionDef,\n            greedy: true,\n            alias: 'selector'\n          },\n          'command-params': {\n            pattern: /\\s*\\S[\\s\\S]*/,\n            inside: params\n          }\n        }\n      },\n      // Generic is any line that doesn't start with operators: ;>#@\n      'generic-text': {\n        pattern: /(^[ \\t]*)[^#@>;\\s].*/m,\n        lookbehind: true,\n        alias: 'punctuation',\n        inside: {\n          // \\{ ... \\} ... \\[ ... \\] ... \\\"\n          'escaped-char': /\\\\[{}\\[\\]\"]/,\n          expression: {\n            pattern: expressionDef,\n            greedy: true,\n            alias: 'selector'\n          },\n          'inline-command': {\n            pattern: /\\[[\\t ]*\\w[^\\r\\n\\[\\]]*\\]/,\n            greedy: true,\n            alias: 'function',\n            inside: {\n              'command-params': {\n                pattern: /(^\\[[\\t ]*\\w+\\b)[\\s\\S]+(?=\\]$)/,\n                lookbehind: true,\n                inside: params\n              },\n              'command-param-name': {\n                pattern: /^(\\[[\\t ]*)\\w+/,\n                lookbehind: true,\n                alias: 'name'\n              },\n              'start-stop-char': /[\\[\\]]/\n            }\n          }\n        }\n      }\n    };\n    Prism.languages.nani = Prism.languages['naniscript'];\n    /** @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token */\n\n    /**\r\n     * This hook is used to validate generic-text tokens for balanced brackets.\r\n     * Mark token as bad-line when contains not balanced brackets: {},[]\r\n     */\n\n    Prism.hooks.add('after-tokenize', function (env) {\n      /** @type {(Token | string)[]} */\n      var tokens = env.tokens;\n      tokens.forEach(function (token) {\n        if (typeof token !== 'string' && token.type === 'generic-text') {\n          var content = getTextContent(token);\n\n          if (!isBracketsBalanced(content)) {\n            token.type = 'bad-line';\n            token.content = content;\n          }\n        }\n      });\n    });\n    /**\r\n     * @param {string} input\r\n     * @returns {boolean}\r\n     */\n\n    function isBracketsBalanced(input) {\n      var brackets = '[]{}';\n      var stack = [];\n\n      for (var i = 0; i < input.length; i++) {\n        var bracket = input[i];\n        var bracketsIndex = brackets.indexOf(bracket);\n\n        if (bracketsIndex !== -1) {\n          if (bracketsIndex % 2 === 0) {\n            stack.push(bracketsIndex + 1);\n          } else if (stack.pop() !== bracketsIndex) {\n            return false;\n          }\n        }\n      }\n\n      return stack.length === 0;\n    }\n    /**\r\n     * @param {string | Token | (string | Token)[]} token\r\n     * @returns {string}\r\n     */\n\n\n    function getTextContent(token) {\n      if (typeof token === 'string') {\n        return token;\n      } else if (Array.isArray(token)) {\n        return token.map(getTextContent).join('');\n      } else {\n        return getTextContent(token.content);\n      }\n    }\n  })(Prism);\n}","map":{"version":3,"names":["module","exports","naniscript","displayName","aliases","Prism","expressionDef","params","pattern","alias","lookbehind","greedy","languages","comment","define","inside","value","key","label","command","expression","nani","hooks","add","env","tokens","forEach","token","type","content","getTextContent","isBracketsBalanced","input","brackets","stack","i","length","bracket","bracketsIndex","indexOf","push","pop","Array","isArray","map","join"],"sources":["C:/Users/ayeh8/Documents/Plant-Buddy/node_modules/refractor/lang/naniscript.js"],"sourcesContent":["'use strict'\r\n\r\nmodule.exports = naniscript\r\nnaniscript.displayName = 'naniscript'\r\nnaniscript.aliases = []\r\nfunction naniscript(Prism) {\r\n  ;(function (Prism) {\r\n    var expressionDef = /\\{[^\\r\\n\\[\\]{}]*\\}/\r\n    var params = {\r\n      'quoted-string': {\r\n        pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\r\n        alias: 'operator'\r\n      },\r\n      'command-param-id': {\r\n        pattern: /(\\s)\\w+:/,\r\n        lookbehind: true,\r\n        alias: 'property'\r\n      },\r\n      'command-param-value': [\r\n        {\r\n          pattern: expressionDef,\r\n          alias: 'selector'\r\n        },\r\n        {\r\n          pattern: /([\\t ])\\S+/,\r\n          lookbehind: true,\r\n          greedy: true,\r\n          alias: 'operator'\r\n        },\r\n        {\r\n          pattern: /\\S(?:.*\\S)?/,\r\n          alias: 'operator'\r\n        }\r\n      ]\r\n    }\r\n    Prism.languages.naniscript = {\r\n      // ; ...\r\n      comment: {\r\n        pattern: /^([\\t ]*);.*/m,\r\n        lookbehind: true\r\n      },\r\n      // > ...\r\n      // Define is a control line starting with '>' followed by a word, a space and a text.\r\n      define: {\r\n        pattern: /^>.+/m,\r\n        alias: 'tag',\r\n        inside: {\r\n          value: {\r\n            pattern: /(^>\\w+[\\t ]+)(?!\\s)[^{}\\r\\n]+/,\r\n            lookbehind: true,\r\n            alias: 'operator'\r\n          },\r\n          key: {\r\n            pattern: /(^>)\\w+/,\r\n            lookbehind: true\r\n          }\r\n        }\r\n      },\r\n      // # ...\r\n      label: {\r\n        pattern: /^([\\t ]*)#[\\t ]*\\w+[\\t ]*$/m,\r\n        lookbehind: true,\r\n        alias: 'regex'\r\n      },\r\n      command: {\r\n        pattern: /^([\\t ]*)@\\w+(?=[\\t ]|$).*/m,\r\n        lookbehind: true,\r\n        alias: 'function',\r\n        inside: {\r\n          'command-name': /^@\\w+/,\r\n          expression: {\r\n            pattern: expressionDef,\r\n            greedy: true,\r\n            alias: 'selector'\r\n          },\r\n          'command-params': {\r\n            pattern: /\\s*\\S[\\s\\S]*/,\r\n            inside: params\r\n          }\r\n        }\r\n      },\r\n      // Generic is any line that doesn't start with operators: ;>#@\r\n      'generic-text': {\r\n        pattern: /(^[ \\t]*)[^#@>;\\s].*/m,\r\n        lookbehind: true,\r\n        alias: 'punctuation',\r\n        inside: {\r\n          // \\{ ... \\} ... \\[ ... \\] ... \\\"\r\n          'escaped-char': /\\\\[{}\\[\\]\"]/,\r\n          expression: {\r\n            pattern: expressionDef,\r\n            greedy: true,\r\n            alias: 'selector'\r\n          },\r\n          'inline-command': {\r\n            pattern: /\\[[\\t ]*\\w[^\\r\\n\\[\\]]*\\]/,\r\n            greedy: true,\r\n            alias: 'function',\r\n            inside: {\r\n              'command-params': {\r\n                pattern: /(^\\[[\\t ]*\\w+\\b)[\\s\\S]+(?=\\]$)/,\r\n                lookbehind: true,\r\n                inside: params\r\n              },\r\n              'command-param-name': {\r\n                pattern: /^(\\[[\\t ]*)\\w+/,\r\n                lookbehind: true,\r\n                alias: 'name'\r\n              },\r\n              'start-stop-char': /[\\[\\]]/\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    Prism.languages.nani = Prism.languages['naniscript']\r\n    /** @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token */\r\n    /**\r\n     * This hook is used to validate generic-text tokens for balanced brackets.\r\n     * Mark token as bad-line when contains not balanced brackets: {},[]\r\n     */\r\n    Prism.hooks.add('after-tokenize', function (env) {\r\n      /** @type {(Token | string)[]} */\r\n      var tokens = env.tokens\r\n      tokens.forEach(function (token) {\r\n        if (typeof token !== 'string' && token.type === 'generic-text') {\r\n          var content = getTextContent(token)\r\n          if (!isBracketsBalanced(content)) {\r\n            token.type = 'bad-line'\r\n            token.content = content\r\n          }\r\n        }\r\n      })\r\n    })\r\n    /**\r\n     * @param {string} input\r\n     * @returns {boolean}\r\n     */\r\n    function isBracketsBalanced(input) {\r\n      var brackets = '[]{}'\r\n      var stack = []\r\n      for (var i = 0; i < input.length; i++) {\r\n        var bracket = input[i]\r\n        var bracketsIndex = brackets.indexOf(bracket)\r\n        if (bracketsIndex !== -1) {\r\n          if (bracketsIndex % 2 === 0) {\r\n            stack.push(bracketsIndex + 1)\r\n          } else if (stack.pop() !== bracketsIndex) {\r\n            return false\r\n          }\r\n        }\r\n      }\r\n      return stack.length === 0\r\n    }\r\n    /**\r\n     * @param {string | Token | (string | Token)[]} token\r\n     * @returns {string}\r\n     */\r\n    function getTextContent(token) {\r\n      if (typeof token === 'string') {\r\n        return token\r\n      } else if (Array.isArray(token)) {\r\n        return token.map(getTextContent).join('')\r\n      } else {\r\n        return getTextContent(token.content)\r\n      }\r\n    }\r\n  })(Prism)\r\n}\r\n"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,UAAjB;AACAA,UAAU,CAACC,WAAX,GAAyB,YAAzB;AACAD,UAAU,CAACE,OAAX,GAAqB,EAArB;;AACA,SAASF,UAAT,CAAoBG,KAApB,EAA2B;EACzB;;EAAC,CAAC,UAAUA,KAAV,EAAiB;IACjB,IAAIC,aAAa,GAAG,oBAApB;IACA,IAAIC,MAAM,GAAG;MACX,iBAAiB;QACfC,OAAO,EAAE,mBADM;QAEfC,KAAK,EAAE;MAFQ,CADN;MAKX,oBAAoB;QAClBD,OAAO,EAAE,UADS;QAElBE,UAAU,EAAE,IAFM;QAGlBD,KAAK,EAAE;MAHW,CALT;MAUX,uBAAuB,CACrB;QACED,OAAO,EAAEF,aADX;QAEEG,KAAK,EAAE;MAFT,CADqB,EAKrB;QACED,OAAO,EAAE,YADX;QAEEE,UAAU,EAAE,IAFd;QAGEC,MAAM,EAAE,IAHV;QAIEF,KAAK,EAAE;MAJT,CALqB,EAWrB;QACED,OAAO,EAAE,aADX;QAEEC,KAAK,EAAE;MAFT,CAXqB;IAVZ,CAAb;IA2BAJ,KAAK,CAACO,SAAN,CAAgBV,UAAhB,GAA6B;MAC3B;MACAW,OAAO,EAAE;QACPL,OAAO,EAAE,eADF;QAEPE,UAAU,EAAE;MAFL,CAFkB;MAM3B;MACA;MACAI,MAAM,EAAE;QACNN,OAAO,EAAE,OADH;QAENC,KAAK,EAAE,KAFD;QAGNM,MAAM,EAAE;UACNC,KAAK,EAAE;YACLR,OAAO,EAAE,+BADJ;YAELE,UAAU,EAAE,IAFP;YAGLD,KAAK,EAAE;UAHF,CADD;UAMNQ,GAAG,EAAE;YACHT,OAAO,EAAE,SADN;YAEHE,UAAU,EAAE;UAFT;QANC;MAHF,CARmB;MAuB3B;MACAQ,KAAK,EAAE;QACLV,OAAO,EAAE,6BADJ;QAELE,UAAU,EAAE,IAFP;QAGLD,KAAK,EAAE;MAHF,CAxBoB;MA6B3BU,OAAO,EAAE;QACPX,OAAO,EAAE,6BADF;QAEPE,UAAU,EAAE,IAFL;QAGPD,KAAK,EAAE,UAHA;QAIPM,MAAM,EAAE;UACN,gBAAgB,OADV;UAENK,UAAU,EAAE;YACVZ,OAAO,EAAEF,aADC;YAEVK,MAAM,EAAE,IAFE;YAGVF,KAAK,EAAE;UAHG,CAFN;UAON,kBAAkB;YAChBD,OAAO,EAAE,cADO;YAEhBO,MAAM,EAAER;UAFQ;QAPZ;MAJD,CA7BkB;MA8C3B;MACA,gBAAgB;QACdC,OAAO,EAAE,uBADK;QAEdE,UAAU,EAAE,IAFE;QAGdD,KAAK,EAAE,aAHO;QAIdM,MAAM,EAAE;UACN;UACA,gBAAgB,aAFV;UAGNK,UAAU,EAAE;YACVZ,OAAO,EAAEF,aADC;YAEVK,MAAM,EAAE,IAFE;YAGVF,KAAK,EAAE;UAHG,CAHN;UAQN,kBAAkB;YAChBD,OAAO,EAAE,0BADO;YAEhBG,MAAM,EAAE,IAFQ;YAGhBF,KAAK,EAAE,UAHS;YAIhBM,MAAM,EAAE;cACN,kBAAkB;gBAChBP,OAAO,EAAE,gCADO;gBAEhBE,UAAU,EAAE,IAFI;gBAGhBK,MAAM,EAAER;cAHQ,CADZ;cAMN,sBAAsB;gBACpBC,OAAO,EAAE,gBADW;gBAEpBE,UAAU,EAAE,IAFQ;gBAGpBD,KAAK,EAAE;cAHa,CANhB;cAWN,mBAAmB;YAXb;UAJQ;QARZ;MAJM;IA/CW,CAA7B;IAgFAJ,KAAK,CAACO,SAAN,CAAgBS,IAAhB,GAAuBhB,KAAK,CAACO,SAAN,CAAgB,YAAhB,CAAvB;IACA;;IACA;AACJ;AACA;AACA;;IACIP,KAAK,CAACiB,KAAN,CAAYC,GAAZ,CAAgB,gBAAhB,EAAkC,UAAUC,GAAV,EAAe;MAC/C;MACA,IAAIC,MAAM,GAAGD,GAAG,CAACC,MAAjB;MACAA,MAAM,CAACC,OAAP,CAAe,UAAUC,KAAV,EAAiB;QAC9B,IAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAACC,IAAN,KAAe,cAAhD,EAAgE;UAC9D,IAAIC,OAAO,GAAGC,cAAc,CAACH,KAAD,CAA5B;;UACA,IAAI,CAACI,kBAAkB,CAACF,OAAD,CAAvB,EAAkC;YAChCF,KAAK,CAACC,IAAN,GAAa,UAAb;YACAD,KAAK,CAACE,OAAN,GAAgBA,OAAhB;UACD;QACF;MACF,CARD;IASD,CAZD;IAaA;AACJ;AACA;AACA;;IACI,SAASE,kBAAT,CAA4BC,KAA5B,EAAmC;MACjC,IAAIC,QAAQ,GAAG,MAAf;MACA,IAAIC,KAAK,GAAG,EAAZ;;MACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACI,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;QACrC,IAAIE,OAAO,GAAGL,KAAK,CAACG,CAAD,CAAnB;QACA,IAAIG,aAAa,GAAGL,QAAQ,CAACM,OAAT,CAAiBF,OAAjB,CAApB;;QACA,IAAIC,aAAa,KAAK,CAAC,CAAvB,EAA0B;UACxB,IAAIA,aAAa,GAAG,CAAhB,KAAsB,CAA1B,EAA6B;YAC3BJ,KAAK,CAACM,IAAN,CAAWF,aAAa,GAAG,CAA3B;UACD,CAFD,MAEO,IAAIJ,KAAK,CAACO,GAAN,OAAgBH,aAApB,EAAmC;YACxC,OAAO,KAAP;UACD;QACF;MACF;;MACD,OAAOJ,KAAK,CAACE,MAAN,KAAiB,CAAxB;IACD;IACD;AACJ;AACA;AACA;;;IACI,SAASN,cAAT,CAAwBH,KAAxB,EAA+B;MAC7B,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;QAC7B,OAAOA,KAAP;MACD,CAFD,MAEO,IAAIe,KAAK,CAACC,OAAN,CAAchB,KAAd,CAAJ,EAA0B;QAC/B,OAAOA,KAAK,CAACiB,GAAN,CAAUd,cAAV,EAA0Be,IAA1B,CAA+B,EAA/B,CAAP;MACD,CAFM,MAEA;QACL,OAAOf,cAAc,CAACH,KAAK,CAACE,OAAP,CAArB;MACD;IACF;EACF,CAjKA,EAiKExB,KAjKF;AAkKF"},"metadata":{},"sourceType":"script"}