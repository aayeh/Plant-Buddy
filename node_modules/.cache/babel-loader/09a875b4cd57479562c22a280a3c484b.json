{"ast":null,"code":"/**\r\n * @param {string} value\r\n * @returns {RegExp}\r\n * */\n\n/**\r\n * @param {RegExp | string } re\r\n * @returns {string}\r\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n  return re.source;\n}\n/**\r\n * @param {RegExp | string } re\r\n * @returns {string}\r\n */\n\n\nfunction lookahead(re) {\n  return concat('(?=', re, ')');\n}\n/**\r\n * @param {...(RegExp | string) } args\r\n * @returns {string}\r\n */\n\n\nfunction concat() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  const joined = args.map(x => source(x)).join(\"\");\n  return joined;\n}\n/**\r\n * Any of the passed expresssions may match\r\n *\r\n * Creates a huge this | this | that | that match\r\n * @param {(RegExp | string)[] } args\r\n * @returns {string}\r\n */\n\n\nfunction either() {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  const joined = '(' + args.map(x => source(x)).join(\"|\") + \")\";\n  return joined;\n}\n\nconst keywordWrapper = keyword => concat(/\\b/, keyword, /\\w$/.test(keyword) ? /\\b/ : /\\B/); // Keywords that require a leading dot.\n\n\nconst dotKeywords = ['Protocol', // contextual\n'Type' // contextual\n].map(keywordWrapper); // Keywords that may have a leading dot.\n\nconst optionalDotKeywords = ['init', 'self'].map(keywordWrapper); // should register as keyword, not type\n\nconst keywordTypes = ['Any', 'Self']; // Regular keywords and literals.\n\nconst keywords = [// strings below will be fed into the regular `keywords` engine while regex\n// will result in additional modes being created to scan for those keywords to\n// avoid conflicts with other rules\n'associatedtype', 'async', 'await', /as\\?/, // operator\n/as!/, // operator\n'as', // operator\n'break', 'case', 'catch', 'class', 'continue', 'convenience', // contextual\n'default', 'defer', 'deinit', 'didSet', // contextual\n'do', 'dynamic', // contextual\n'else', 'enum', 'extension', 'fallthrough', /fileprivate\\(set\\)/, 'fileprivate', 'final', // contextual\n'for', 'func', 'get', // contextual\n'guard', 'if', 'import', 'indirect', // contextual\n'infix', // contextual\n/init\\?/, /init!/, 'inout', /internal\\(set\\)/, 'internal', 'in', 'is', // operator\n'lazy', // contextual\n'let', 'mutating', // contextual\n'nonmutating', // contextual\n/open\\(set\\)/, // contextual\n'open', // contextual\n'operator', 'optional', // contextual\n'override', // contextual\n'postfix', // contextual\n'precedencegroup', 'prefix', // contextual\n/private\\(set\\)/, 'private', 'protocol', /public\\(set\\)/, 'public', 'repeat', 'required', // contextual\n'rethrows', 'return', 'set', // contextual\n'some', // contextual\n'static', 'struct', 'subscript', 'super', 'switch', 'throws', 'throw', /try\\?/, // operator\n/try!/, // operator\n'try', // operator\n'typealias', /unowned\\(safe\\)/, // contextual\n/unowned\\(unsafe\\)/, // contextual\n'unowned', // contextual\n'var', 'weak', // contextual\n'where', 'while', 'willSet' // contextual\n]; // NOTE: Contextual keywords are reserved only in specific contexts.\n// Ideally, these should be matched using modes to avoid false positives.\n// Literals.\n\nconst literals = ['false', 'nil', 'true']; // Keywords used in precedence groups.\n\nconst precedencegroupKeywords = ['assignment', 'associativity', 'higherThan', 'left', 'lowerThan', 'none', 'right']; // Keywords that start with a number sign (#).\n// #available is handled separately.\n\nconst numberSignKeywords = ['#colorLiteral', '#column', '#dsohandle', '#else', '#elseif', '#endif', '#error', '#file', '#fileID', '#fileLiteral', '#filePath', '#function', '#if', '#imageLiteral', '#keyPath', '#line', '#selector', '#sourceLocation', '#warn_unqualified_access', '#warning']; // Global functions in the Standard Library.\n\nconst builtIns = ['abs', 'all', 'any', 'assert', 'assertionFailure', 'debugPrint', 'dump', 'fatalError', 'getVaList', 'isKnownUniquelyReferenced', 'max', 'min', 'numericCast', 'pointwiseMax', 'pointwiseMin', 'precondition', 'preconditionFailure', 'print', 'readLine', 'repeatElement', 'sequence', 'stride', 'swap', 'swift_unboxFromSwiftValueWithType', 'transcode', 'type', 'unsafeBitCast', 'unsafeDowncast', 'withExtendedLifetime', 'withUnsafeMutablePointer', 'withUnsafePointer', 'withVaList', 'withoutActuallyEscaping', 'zip']; // Valid first characters for operators.\n\nconst operatorHead = either(/[/=\\-+!*%<>&|^~?]/, /[\\u00A1-\\u00A7]/, /[\\u00A9\\u00AB]/, /[\\u00AC\\u00AE]/, /[\\u00B0\\u00B1]/, /[\\u00B6\\u00BB\\u00BF\\u00D7\\u00F7]/, /[\\u2016-\\u2017]/, /[\\u2020-\\u2027]/, /[\\u2030-\\u203E]/, /[\\u2041-\\u2053]/, /[\\u2055-\\u205E]/, /[\\u2190-\\u23FF]/, /[\\u2500-\\u2775]/, /[\\u2794-\\u2BFF]/, /[\\u2E00-\\u2E7F]/, /[\\u3001-\\u3003]/, /[\\u3008-\\u3020]/, /[\\u3030]/); // Valid characters for operators.\n\nconst operatorCharacter = either(operatorHead, /[\\u0300-\\u036F]/, /[\\u1DC0-\\u1DFF]/, /[\\u20D0-\\u20FF]/, /[\\uFE00-\\uFE0F]/, /[\\uFE20-\\uFE2F]/ // TODO: The following characters are also allowed, but the regex isn't supported yet.\n// /[\\u{E0100}-\\u{E01EF}]/u\n); // Valid operator.\n\nconst operator = concat(operatorHead, operatorCharacter, '*'); // Valid first characters for identifiers.\n\nconst identifierHead = either(/[a-zA-Z_]/, /[\\u00A8\\u00AA\\u00AD\\u00AF\\u00B2-\\u00B5\\u00B7-\\u00BA]/, /[\\u00BC-\\u00BE\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u00FF]/, /[\\u0100-\\u02FF\\u0370-\\u167F\\u1681-\\u180D\\u180F-\\u1DBF]/, /[\\u1E00-\\u1FFF]/, /[\\u200B-\\u200D\\u202A-\\u202E\\u203F-\\u2040\\u2054\\u2060-\\u206F]/, /[\\u2070-\\u20CF\\u2100-\\u218F\\u2460-\\u24FF\\u2776-\\u2793]/, /[\\u2C00-\\u2DFF\\u2E80-\\u2FFF]/, /[\\u3004-\\u3007\\u3021-\\u302F\\u3031-\\u303F\\u3040-\\uD7FF]/, /[\\uF900-\\uFD3D\\uFD40-\\uFDCF\\uFDF0-\\uFE1F\\uFE30-\\uFE44]/, /[\\uFE47-\\uFEFE\\uFF00-\\uFFFD]/ // Should be /[\\uFE47-\\uFFFD]/, but we have to exclude FEFF.\n// The following characters are also allowed, but the regexes aren't supported yet.\n// /[\\u{10000}-\\u{1FFFD}\\u{20000-\\u{2FFFD}\\u{30000}-\\u{3FFFD}\\u{40000}-\\u{4FFFD}]/u,\n// /[\\u{50000}-\\u{5FFFD}\\u{60000-\\u{6FFFD}\\u{70000}-\\u{7FFFD}\\u{80000}-\\u{8FFFD}]/u,\n// /[\\u{90000}-\\u{9FFFD}\\u{A0000-\\u{AFFFD}\\u{B0000}-\\u{BFFFD}\\u{C0000}-\\u{CFFFD}]/u,\n// /[\\u{D0000}-\\u{DFFFD}\\u{E0000-\\u{EFFFD}]/u\n); // Valid characters for identifiers.\n\nconst identifierCharacter = either(identifierHead, /\\d/, /[\\u0300-\\u036F\\u1DC0-\\u1DFF\\u20D0-\\u20FF\\uFE20-\\uFE2F]/); // Valid identifier.\n\nconst identifier = concat(identifierHead, identifierCharacter, '*'); // Valid type identifier.\n\nconst typeIdentifier = concat(/[A-Z]/, identifierCharacter, '*'); // Built-in attributes, which are highlighted as keywords.\n// @available is handled separately.\n\nconst keywordAttributes = ['autoclosure', concat(/convention\\(/, either('swift', 'block', 'c'), /\\)/), 'discardableResult', 'dynamicCallable', 'dynamicMemberLookup', 'escaping', 'frozen', 'GKInspectable', 'IBAction', 'IBDesignable', 'IBInspectable', 'IBOutlet', 'IBSegueAction', 'inlinable', 'main', 'nonobjc', 'NSApplicationMain', 'NSCopying', 'NSManaged', concat(/objc\\(/, identifier, /\\)/), 'objc', 'objcMembers', 'propertyWrapper', 'requires_stored_property_inits', 'testable', 'UIApplicationMain', 'unknown', 'usableFromInline']; // Contextual keywords used in @available and #available.\n\nconst availabilityKeywords = ['iOS', 'iOSApplicationExtension', 'macOS', 'macOSApplicationExtension', 'macCatalyst', 'macCatalystApplicationExtension', 'watchOS', 'watchOSApplicationExtension', 'tvOS', 'tvOSApplicationExtension', 'swift'];\n/*\r\nLanguage: Swift\r\nDescription: Swift is a general-purpose programming language built using a modern approach to safety, performance, and software design patterns.\r\nAuthor: Steven Van Impe <steven.vanimpe@icloud.com>\r\nContributors: Chris Eidhof <chris@eidhof.nl>, Nate Cook <natecook@gmail.com>, Alexander Lichter <manniL@gmx.net>, Richard Gibson <gibson042@github>\r\nWebsite: https://swift.org\r\nCategory: common, system\r\n*/\n\n/** @type LanguageFn */\n\nfunction swift(hljs) {\n  const WHITESPACE = {\n    match: /\\s+/,\n    relevance: 0\n  }; // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID411\n\n  const BLOCK_COMMENT = hljs.COMMENT('/\\\\*', '\\\\*/', {\n    contains: ['self']\n  });\n  const COMMENTS = [hljs.C_LINE_COMMENT_MODE, BLOCK_COMMENT]; // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID413\n  // https://docs.swift.org/swift-book/ReferenceManual/zzSummaryOfTheGrammar.html\n\n  const DOT_KEYWORD = {\n    className: 'keyword',\n    begin: concat(/\\./, lookahead(either(...dotKeywords, ...optionalDotKeywords))),\n    end: either(...dotKeywords, ...optionalDotKeywords),\n    excludeBegin: true\n  };\n  const KEYWORD_GUARD = {\n    // Consume .keyword to prevent highlighting properties and methods as keywords.\n    match: concat(/\\./, either(...keywords)),\n    relevance: 0\n  };\n  const PLAIN_KEYWORDS = keywords.filter(kw => typeof kw === 'string').concat([\"_|0\"]); // seems common, so 0 relevance\n\n  const REGEX_KEYWORDS = keywords.filter(kw => typeof kw !== 'string') // find regex\n  .concat(keywordTypes).map(keywordWrapper);\n  const KEYWORD = {\n    variants: [{\n      className: 'keyword',\n      match: either(...REGEX_KEYWORDS, ...optionalDotKeywords)\n    }]\n  }; // find all the regular keywords\n\n  const KEYWORDS = {\n    $pattern: either(/\\b\\w+/, // regular keywords\n    /#\\w+/ // number keywords\n    ),\n    keyword: PLAIN_KEYWORDS.concat(numberSignKeywords),\n    literal: literals\n  };\n  const KEYWORD_MODES = [DOT_KEYWORD, KEYWORD_GUARD, KEYWORD]; // https://github.com/apple/swift/tree/main/stdlib/public/core\n\n  const BUILT_IN_GUARD = {\n    // Consume .built_in to prevent highlighting properties and methods.\n    match: concat(/\\./, either(...builtIns)),\n    relevance: 0\n  };\n  const BUILT_IN = {\n    className: 'built_in',\n    match: concat(/\\b/, either(...builtIns), /(?=\\()/)\n  };\n  const BUILT_INS = [BUILT_IN_GUARD, BUILT_IN]; // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID418\n\n  const OPERATOR_GUARD = {\n    // Prevent -> from being highlighting as an operator.\n    match: /->/,\n    relevance: 0\n  };\n  const OPERATOR = {\n    className: 'operator',\n    relevance: 0,\n    variants: [{\n      match: operator\n    }, {\n      // dot-operator: only operators that start with a dot are allowed to use dots as\n      // characters (..., ...<, .*, etc). So there rule here is: a dot followed by one or more\n      // characters that may also include dots.\n      match: `\\\\.(\\\\.|${operatorCharacter})+`\n    }]\n  };\n  const OPERATORS = [OPERATOR_GUARD, OPERATOR]; // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_numeric-literal\n  // TODO: Update for leading `-` after lookbehind is supported everywhere\n\n  const decimalDigits = '([0-9]_*)+';\n  const hexDigits = '([0-9a-fA-F]_*)+';\n  const NUMBER = {\n    className: 'number',\n    relevance: 0,\n    variants: [// decimal floating-point-literal (subsumes decimal-literal)\n    {\n      match: `\\\\b(${decimalDigits})(\\\\.(${decimalDigits}))?` + `([eE][+-]?(${decimalDigits}))?\\\\b`\n    }, // hexadecimal floating-point-literal (subsumes hexadecimal-literal)\n    {\n      match: `\\\\b0x(${hexDigits})(\\\\.(${hexDigits}))?` + `([pP][+-]?(${decimalDigits}))?\\\\b`\n    }, // octal-literal\n    {\n      match: /\\b0o([0-7]_*)+\\b/\n    }, // binary-literal\n    {\n      match: /\\b0b([01]_*)+\\b/\n    }]\n  }; // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_string-literal\n\n  const ESCAPED_CHARACTER = function () {\n    let rawDelimiter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return {\n      className: 'subst',\n      variants: [{\n        match: concat(/\\\\/, rawDelimiter, /[0\\\\tnr\"']/)\n      }, {\n        match: concat(/\\\\/, rawDelimiter, /u\\{[0-9a-fA-F]{1,8}\\}/)\n      }]\n    };\n  };\n\n  const ESCAPED_NEWLINE = function () {\n    let rawDelimiter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return {\n      className: 'subst',\n      match: concat(/\\\\/, rawDelimiter, /[\\t ]*(?:[\\r\\n]|\\r\\n)/)\n    };\n  };\n\n  const INTERPOLATION = function () {\n    let rawDelimiter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return {\n      className: 'subst',\n      label: \"interpol\",\n      begin: concat(/\\\\/, rawDelimiter, /\\(/),\n      end: /\\)/\n    };\n  };\n\n  const MULTILINE_STRING = function () {\n    let rawDelimiter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return {\n      begin: concat(rawDelimiter, /\"\"\"/),\n      end: concat(/\"\"\"/, rawDelimiter),\n      contains: [ESCAPED_CHARACTER(rawDelimiter), ESCAPED_NEWLINE(rawDelimiter), INTERPOLATION(rawDelimiter)]\n    };\n  };\n\n  const SINGLE_LINE_STRING = function () {\n    let rawDelimiter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return {\n      begin: concat(rawDelimiter, /\"/),\n      end: concat(/\"/, rawDelimiter),\n      contains: [ESCAPED_CHARACTER(rawDelimiter), INTERPOLATION(rawDelimiter)]\n    };\n  };\n\n  const STRING = {\n    className: 'string',\n    variants: [MULTILINE_STRING(), MULTILINE_STRING(\"#\"), MULTILINE_STRING(\"##\"), MULTILINE_STRING(\"###\"), SINGLE_LINE_STRING(), SINGLE_LINE_STRING(\"#\"), SINGLE_LINE_STRING(\"##\"), SINGLE_LINE_STRING(\"###\")]\n  }; // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID412\n\n  const QUOTED_IDENTIFIER = {\n    match: concat(/`/, identifier, /`/)\n  };\n  const IMPLICIT_PARAMETER = {\n    className: 'variable',\n    match: /\\$\\d+/\n  };\n  const PROPERTY_WRAPPER_PROJECTION = {\n    className: 'variable',\n    match: `\\\\$${identifierCharacter}+`\n  };\n  const IDENTIFIERS = [QUOTED_IDENTIFIER, IMPLICIT_PARAMETER, PROPERTY_WRAPPER_PROJECTION]; // https://docs.swift.org/swift-book/ReferenceManual/Attributes.html\n\n  const AVAILABLE_ATTRIBUTE = {\n    match: /(@|#)available/,\n    className: \"keyword\",\n    starts: {\n      contains: [{\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: availabilityKeywords,\n        contains: [...OPERATORS, NUMBER, STRING]\n      }]\n    }\n  };\n  const KEYWORD_ATTRIBUTE = {\n    className: 'keyword',\n    match: concat(/@/, either(...keywordAttributes))\n  };\n  const USER_DEFINED_ATTRIBUTE = {\n    className: 'meta',\n    match: concat(/@/, identifier)\n  };\n  const ATTRIBUTES = [AVAILABLE_ATTRIBUTE, KEYWORD_ATTRIBUTE, USER_DEFINED_ATTRIBUTE]; // https://docs.swift.org/swift-book/ReferenceManual/Types.html\n\n  const TYPE = {\n    match: lookahead(/\\b[A-Z]/),\n    relevance: 0,\n    contains: [{\n      // Common Apple frameworks, for relevance boost\n      className: 'type',\n      match: concat(/(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)/, identifierCharacter, '+')\n    }, {\n      // Type identifier\n      className: 'type',\n      match: typeIdentifier,\n      relevance: 0\n    }, {\n      // Optional type\n      match: /[?!]+/,\n      relevance: 0\n    }, {\n      // Variadic parameter\n      match: /\\.\\.\\./,\n      relevance: 0\n    }, {\n      // Protocol composition\n      match: concat(/\\s+&\\s+/, lookahead(typeIdentifier)),\n      relevance: 0\n    }]\n  };\n  const GENERIC_ARGUMENTS = {\n    begin: /</,\n    end: />/,\n    keywords: KEYWORDS,\n    contains: [...COMMENTS, ...KEYWORD_MODES, ...ATTRIBUTES, OPERATOR_GUARD, TYPE]\n  };\n  TYPE.contains.push(GENERIC_ARGUMENTS); // https://docs.swift.org/swift-book/ReferenceManual/Expressions.html#ID552\n  // Prevents element names from being highlighted as keywords.\n\n  const TUPLE_ELEMENT_NAME = {\n    match: concat(identifier, /\\s*:/),\n    keywords: \"_|0\",\n    relevance: 0\n  }; // Matches tuples as well as the parameter list of a function type.\n\n  const TUPLE = {\n    begin: /\\(/,\n    end: /\\)/,\n    relevance: 0,\n    keywords: KEYWORDS,\n    contains: ['self', TUPLE_ELEMENT_NAME, ...COMMENTS, ...KEYWORD_MODES, ...BUILT_INS, ...OPERATORS, NUMBER, STRING, ...IDENTIFIERS, ...ATTRIBUTES, TYPE]\n  }; // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID362\n  // Matches both the keyword func and the function title.\n  // Grouping these lets us differentiate between the operator function <\n  // and the start of the generic parameter clause (also <).\n\n  const FUNC_PLUS_TITLE = {\n    beginKeywords: 'func',\n    contains: [{\n      className: 'title',\n      match: either(QUOTED_IDENTIFIER.match, identifier, operator),\n      // Required to make sure the opening < of the generic parameter clause\n      // isn't parsed as a second title.\n      endsParent: true,\n      relevance: 0\n    }, WHITESPACE]\n  };\n  const GENERIC_PARAMETERS = {\n    begin: /</,\n    end: />/,\n    contains: [...COMMENTS, TYPE]\n  };\n  const FUNCTION_PARAMETER_NAME = {\n    begin: either(lookahead(concat(identifier, /\\s*:/)), lookahead(concat(identifier, /\\s+/, identifier, /\\s*:/))),\n    end: /:/,\n    relevance: 0,\n    contains: [{\n      className: 'keyword',\n      match: /\\b_\\b/\n    }, {\n      className: 'params',\n      match: identifier\n    }]\n  };\n  const FUNCTION_PARAMETERS = {\n    begin: /\\(/,\n    end: /\\)/,\n    keywords: KEYWORDS,\n    contains: [FUNCTION_PARAMETER_NAME, ...COMMENTS, ...KEYWORD_MODES, ...OPERATORS, NUMBER, STRING, ...ATTRIBUTES, TYPE, TUPLE],\n    endsParent: true,\n    illegal: /[\"']/\n  };\n  const FUNCTION = {\n    className: 'function',\n    match: lookahead(/\\bfunc\\b/),\n    contains: [FUNC_PLUS_TITLE, GENERIC_PARAMETERS, FUNCTION_PARAMETERS, WHITESPACE],\n    illegal: [/\\[/, /%/]\n  }; // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID375\n  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID379\n\n  const INIT_SUBSCRIPT = {\n    className: 'function',\n    match: /\\b(subscript|init[?!]?)\\s*(?=[<(])/,\n    keywords: {\n      keyword: \"subscript init init? init!\",\n      $pattern: /\\w+[?!]?/\n    },\n    contains: [GENERIC_PARAMETERS, FUNCTION_PARAMETERS, WHITESPACE],\n    illegal: /\\[|%/\n  }; // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID380\n\n  const OPERATOR_DECLARATION = {\n    beginKeywords: 'operator',\n    end: hljs.MATCH_NOTHING_RE,\n    contains: [{\n      className: 'title',\n      match: operator,\n      endsParent: true,\n      relevance: 0\n    }]\n  }; // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID550\n\n  const PRECEDENCEGROUP = {\n    beginKeywords: 'precedencegroup',\n    end: hljs.MATCH_NOTHING_RE,\n    contains: [{\n      className: 'title',\n      match: typeIdentifier,\n      relevance: 0\n    }, {\n      begin: /{/,\n      end: /}/,\n      relevance: 0,\n      endsParent: true,\n      keywords: [...precedencegroupKeywords, ...literals],\n      contains: [TYPE]\n    }]\n  }; // Add supported submodes to string interpolation.\n\n  for (const variant of STRING.variants) {\n    const interpolation = variant.contains.find(mode => mode.label === \"interpol\"); // TODO: Interpolation can contain any expression, so there's room for improvement here.\n\n    interpolation.keywords = KEYWORDS;\n    const submodes = [...KEYWORD_MODES, ...BUILT_INS, ...OPERATORS, NUMBER, STRING, ...IDENTIFIERS];\n    interpolation.contains = [...submodes, {\n      begin: /\\(/,\n      end: /\\)/,\n      contains: ['self', ...submodes]\n    }];\n  }\n\n  return {\n    name: 'Swift',\n    keywords: KEYWORDS,\n    contains: [...COMMENTS, FUNCTION, INIT_SUBSCRIPT, {\n      className: 'class',\n      beginKeywords: 'struct protocol class extension enum',\n      end: '\\\\{',\n      excludeEnd: true,\n      keywords: KEYWORDS,\n      contains: [hljs.inherit(hljs.TITLE_MODE, {\n        begin: /[A-Za-z$_][\\u00C0-\\u02B80-9A-Za-z$_]*/\n      }), ...KEYWORD_MODES]\n    }, OPERATOR_DECLARATION, PRECEDENCEGROUP, {\n      beginKeywords: 'import',\n      end: /$/,\n      contains: [...COMMENTS],\n      relevance: 0\n    }, ...KEYWORD_MODES, ...BUILT_INS, ...OPERATORS, NUMBER, STRING, ...IDENTIFIERS, ...ATTRIBUTES, TYPE, TUPLE]\n  };\n}\n\nmodule.exports = swift;","map":{"version":3,"names":["source","re","lookahead","concat","args","joined","map","x","join","either","keywordWrapper","keyword","test","dotKeywords","optionalDotKeywords","keywordTypes","keywords","literals","precedencegroupKeywords","numberSignKeywords","builtIns","operatorHead","operatorCharacter","operator","identifierHead","identifierCharacter","identifier","typeIdentifier","keywordAttributes","availabilityKeywords","swift","hljs","WHITESPACE","match","relevance","BLOCK_COMMENT","COMMENT","contains","COMMENTS","C_LINE_COMMENT_MODE","DOT_KEYWORD","className","begin","end","excludeBegin","KEYWORD_GUARD","PLAIN_KEYWORDS","filter","kw","REGEX_KEYWORDS","KEYWORD","variants","KEYWORDS","$pattern","literal","KEYWORD_MODES","BUILT_IN_GUARD","BUILT_IN","BUILT_INS","OPERATOR_GUARD","OPERATOR","OPERATORS","decimalDigits","hexDigits","NUMBER","ESCAPED_CHARACTER","rawDelimiter","ESCAPED_NEWLINE","INTERPOLATION","label","MULTILINE_STRING","SINGLE_LINE_STRING","STRING","QUOTED_IDENTIFIER","IMPLICIT_PARAMETER","PROPERTY_WRAPPER_PROJECTION","IDENTIFIERS","AVAILABLE_ATTRIBUTE","starts","KEYWORD_ATTRIBUTE","USER_DEFINED_ATTRIBUTE","ATTRIBUTES","TYPE","GENERIC_ARGUMENTS","push","TUPLE_ELEMENT_NAME","TUPLE","FUNC_PLUS_TITLE","beginKeywords","endsParent","GENERIC_PARAMETERS","FUNCTION_PARAMETER_NAME","FUNCTION_PARAMETERS","illegal","FUNCTION","INIT_SUBSCRIPT","OPERATOR_DECLARATION","MATCH_NOTHING_RE","PRECEDENCEGROUP","variant","interpolation","find","mode","submodes","name","excludeEnd","inherit","TITLE_MODE","module","exports"],"sources":["C:/Users/ayeh8/Documents/Plant-Buddy/node_modules/highlight.js/lib/languages/swift.js"],"sourcesContent":["/**\r\n * @param {string} value\r\n * @returns {RegExp}\r\n * */\r\n\r\n/**\r\n * @param {RegExp | string } re\r\n * @returns {string}\r\n */\r\nfunction source(re) {\r\n  if (!re) return null;\r\n  if (typeof re === \"string\") return re;\r\n\r\n  return re.source;\r\n}\r\n\r\n/**\r\n * @param {RegExp | string } re\r\n * @returns {string}\r\n */\r\nfunction lookahead(re) {\r\n  return concat('(?=', re, ')');\r\n}\r\n\r\n/**\r\n * @param {...(RegExp | string) } args\r\n * @returns {string}\r\n */\r\nfunction concat(...args) {\r\n  const joined = args.map((x) => source(x)).join(\"\");\r\n  return joined;\r\n}\r\n\r\n/**\r\n * Any of the passed expresssions may match\r\n *\r\n * Creates a huge this | this | that | that match\r\n * @param {(RegExp | string)[] } args\r\n * @returns {string}\r\n */\r\nfunction either(...args) {\r\n  const joined = '(' + args.map((x) => source(x)).join(\"|\") + \")\";\r\n  return joined;\r\n}\r\n\r\nconst keywordWrapper = keyword => concat(\r\n  /\\b/,\r\n  keyword,\r\n  /\\w$/.test(keyword) ? /\\b/ : /\\B/\r\n);\r\n\r\n// Keywords that require a leading dot.\r\nconst dotKeywords = [\r\n  'Protocol', // contextual\r\n  'Type' // contextual\r\n].map(keywordWrapper);\r\n\r\n// Keywords that may have a leading dot.\r\nconst optionalDotKeywords = [\r\n  'init',\r\n  'self'\r\n].map(keywordWrapper);\r\n\r\n// should register as keyword, not type\r\nconst keywordTypes = [\r\n  'Any',\r\n  'Self'\r\n];\r\n\r\n// Regular keywords and literals.\r\nconst keywords = [\r\n  // strings below will be fed into the regular `keywords` engine while regex\r\n  // will result in additional modes being created to scan for those keywords to\r\n  // avoid conflicts with other rules\r\n  'associatedtype',\r\n  'async',\r\n  'await',\r\n  /as\\?/, // operator\r\n  /as!/, // operator\r\n  'as', // operator\r\n  'break',\r\n  'case',\r\n  'catch',\r\n  'class',\r\n  'continue',\r\n  'convenience', // contextual\r\n  'default',\r\n  'defer',\r\n  'deinit',\r\n  'didSet', // contextual\r\n  'do',\r\n  'dynamic', // contextual\r\n  'else',\r\n  'enum',\r\n  'extension',\r\n  'fallthrough',\r\n  /fileprivate\\(set\\)/,\r\n  'fileprivate',\r\n  'final', // contextual\r\n  'for',\r\n  'func',\r\n  'get', // contextual\r\n  'guard',\r\n  'if',\r\n  'import',\r\n  'indirect', // contextual\r\n  'infix', // contextual\r\n  /init\\?/,\r\n  /init!/,\r\n  'inout',\r\n  /internal\\(set\\)/,\r\n  'internal',\r\n  'in',\r\n  'is', // operator\r\n  'lazy', // contextual\r\n  'let',\r\n  'mutating', // contextual\r\n  'nonmutating', // contextual\r\n  /open\\(set\\)/, // contextual\r\n  'open', // contextual\r\n  'operator',\r\n  'optional', // contextual\r\n  'override', // contextual\r\n  'postfix', // contextual\r\n  'precedencegroup',\r\n  'prefix', // contextual\r\n  /private\\(set\\)/,\r\n  'private',\r\n  'protocol',\r\n  /public\\(set\\)/,\r\n  'public',\r\n  'repeat',\r\n  'required', // contextual\r\n  'rethrows',\r\n  'return',\r\n  'set', // contextual\r\n  'some', // contextual\r\n  'static',\r\n  'struct',\r\n  'subscript',\r\n  'super',\r\n  'switch',\r\n  'throws',\r\n  'throw',\r\n  /try\\?/, // operator\r\n  /try!/, // operator\r\n  'try', // operator\r\n  'typealias',\r\n  /unowned\\(safe\\)/, // contextual\r\n  /unowned\\(unsafe\\)/, // contextual\r\n  'unowned', // contextual\r\n  'var',\r\n  'weak', // contextual\r\n  'where',\r\n  'while',\r\n  'willSet' // contextual\r\n];\r\n\r\n// NOTE: Contextual keywords are reserved only in specific contexts.\r\n// Ideally, these should be matched using modes to avoid false positives.\r\n\r\n// Literals.\r\nconst literals = [\r\n  'false',\r\n  'nil',\r\n  'true'\r\n];\r\n\r\n// Keywords used in precedence groups.\r\nconst precedencegroupKeywords = [\r\n  'assignment',\r\n  'associativity',\r\n  'higherThan',\r\n  'left',\r\n  'lowerThan',\r\n  'none',\r\n  'right'\r\n];\r\n\r\n// Keywords that start with a number sign (#).\r\n// #available is handled separately.\r\nconst numberSignKeywords = [\r\n  '#colorLiteral',\r\n  '#column',\r\n  '#dsohandle',\r\n  '#else',\r\n  '#elseif',\r\n  '#endif',\r\n  '#error',\r\n  '#file',\r\n  '#fileID',\r\n  '#fileLiteral',\r\n  '#filePath',\r\n  '#function',\r\n  '#if',\r\n  '#imageLiteral',\r\n  '#keyPath',\r\n  '#line',\r\n  '#selector',\r\n  '#sourceLocation',\r\n  '#warn_unqualified_access',\r\n  '#warning'\r\n];\r\n\r\n// Global functions in the Standard Library.\r\nconst builtIns = [\r\n  'abs',\r\n  'all',\r\n  'any',\r\n  'assert',\r\n  'assertionFailure',\r\n  'debugPrint',\r\n  'dump',\r\n  'fatalError',\r\n  'getVaList',\r\n  'isKnownUniquelyReferenced',\r\n  'max',\r\n  'min',\r\n  'numericCast',\r\n  'pointwiseMax',\r\n  'pointwiseMin',\r\n  'precondition',\r\n  'preconditionFailure',\r\n  'print',\r\n  'readLine',\r\n  'repeatElement',\r\n  'sequence',\r\n  'stride',\r\n  'swap',\r\n  'swift_unboxFromSwiftValueWithType',\r\n  'transcode',\r\n  'type',\r\n  'unsafeBitCast',\r\n  'unsafeDowncast',\r\n  'withExtendedLifetime',\r\n  'withUnsafeMutablePointer',\r\n  'withUnsafePointer',\r\n  'withVaList',\r\n  'withoutActuallyEscaping',\r\n  'zip'\r\n];\r\n\r\n// Valid first characters for operators.\r\nconst operatorHead = either(\r\n  /[/=\\-+!*%<>&|^~?]/,\r\n  /[\\u00A1-\\u00A7]/,\r\n  /[\\u00A9\\u00AB]/,\r\n  /[\\u00AC\\u00AE]/,\r\n  /[\\u00B0\\u00B1]/,\r\n  /[\\u00B6\\u00BB\\u00BF\\u00D7\\u00F7]/,\r\n  /[\\u2016-\\u2017]/,\r\n  /[\\u2020-\\u2027]/,\r\n  /[\\u2030-\\u203E]/,\r\n  /[\\u2041-\\u2053]/,\r\n  /[\\u2055-\\u205E]/,\r\n  /[\\u2190-\\u23FF]/,\r\n  /[\\u2500-\\u2775]/,\r\n  /[\\u2794-\\u2BFF]/,\r\n  /[\\u2E00-\\u2E7F]/,\r\n  /[\\u3001-\\u3003]/,\r\n  /[\\u3008-\\u3020]/,\r\n  /[\\u3030]/\r\n);\r\n\r\n// Valid characters for operators.\r\nconst operatorCharacter = either(\r\n  operatorHead,\r\n  /[\\u0300-\\u036F]/,\r\n  /[\\u1DC0-\\u1DFF]/,\r\n  /[\\u20D0-\\u20FF]/,\r\n  /[\\uFE00-\\uFE0F]/,\r\n  /[\\uFE20-\\uFE2F]/\r\n  // TODO: The following characters are also allowed, but the regex isn't supported yet.\r\n  // /[\\u{E0100}-\\u{E01EF}]/u\r\n);\r\n\r\n// Valid operator.\r\nconst operator = concat(operatorHead, operatorCharacter, '*');\r\n\r\n// Valid first characters for identifiers.\r\nconst identifierHead = either(\r\n  /[a-zA-Z_]/,\r\n  /[\\u00A8\\u00AA\\u00AD\\u00AF\\u00B2-\\u00B5\\u00B7-\\u00BA]/,\r\n  /[\\u00BC-\\u00BE\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u00FF]/,\r\n  /[\\u0100-\\u02FF\\u0370-\\u167F\\u1681-\\u180D\\u180F-\\u1DBF]/,\r\n  /[\\u1E00-\\u1FFF]/,\r\n  /[\\u200B-\\u200D\\u202A-\\u202E\\u203F-\\u2040\\u2054\\u2060-\\u206F]/,\r\n  /[\\u2070-\\u20CF\\u2100-\\u218F\\u2460-\\u24FF\\u2776-\\u2793]/,\r\n  /[\\u2C00-\\u2DFF\\u2E80-\\u2FFF]/,\r\n  /[\\u3004-\\u3007\\u3021-\\u302F\\u3031-\\u303F\\u3040-\\uD7FF]/,\r\n  /[\\uF900-\\uFD3D\\uFD40-\\uFDCF\\uFDF0-\\uFE1F\\uFE30-\\uFE44]/,\r\n  /[\\uFE47-\\uFEFE\\uFF00-\\uFFFD]/ // Should be /[\\uFE47-\\uFFFD]/, but we have to exclude FEFF.\r\n  // The following characters are also allowed, but the regexes aren't supported yet.\r\n  // /[\\u{10000}-\\u{1FFFD}\\u{20000-\\u{2FFFD}\\u{30000}-\\u{3FFFD}\\u{40000}-\\u{4FFFD}]/u,\r\n  // /[\\u{50000}-\\u{5FFFD}\\u{60000-\\u{6FFFD}\\u{70000}-\\u{7FFFD}\\u{80000}-\\u{8FFFD}]/u,\r\n  // /[\\u{90000}-\\u{9FFFD}\\u{A0000-\\u{AFFFD}\\u{B0000}-\\u{BFFFD}\\u{C0000}-\\u{CFFFD}]/u,\r\n  // /[\\u{D0000}-\\u{DFFFD}\\u{E0000-\\u{EFFFD}]/u\r\n);\r\n\r\n// Valid characters for identifiers.\r\nconst identifierCharacter = either(\r\n  identifierHead,\r\n  /\\d/,\r\n  /[\\u0300-\\u036F\\u1DC0-\\u1DFF\\u20D0-\\u20FF\\uFE20-\\uFE2F]/\r\n);\r\n\r\n// Valid identifier.\r\nconst identifier = concat(identifierHead, identifierCharacter, '*');\r\n\r\n// Valid type identifier.\r\nconst typeIdentifier = concat(/[A-Z]/, identifierCharacter, '*');\r\n\r\n// Built-in attributes, which are highlighted as keywords.\r\n// @available is handled separately.\r\nconst keywordAttributes = [\r\n  'autoclosure',\r\n  concat(/convention\\(/, either('swift', 'block', 'c'), /\\)/),\r\n  'discardableResult',\r\n  'dynamicCallable',\r\n  'dynamicMemberLookup',\r\n  'escaping',\r\n  'frozen',\r\n  'GKInspectable',\r\n  'IBAction',\r\n  'IBDesignable',\r\n  'IBInspectable',\r\n  'IBOutlet',\r\n  'IBSegueAction',\r\n  'inlinable',\r\n  'main',\r\n  'nonobjc',\r\n  'NSApplicationMain',\r\n  'NSCopying',\r\n  'NSManaged',\r\n  concat(/objc\\(/, identifier, /\\)/),\r\n  'objc',\r\n  'objcMembers',\r\n  'propertyWrapper',\r\n  'requires_stored_property_inits',\r\n  'testable',\r\n  'UIApplicationMain',\r\n  'unknown',\r\n  'usableFromInline'\r\n];\r\n\r\n// Contextual keywords used in @available and #available.\r\nconst availabilityKeywords = [\r\n  'iOS',\r\n  'iOSApplicationExtension',\r\n  'macOS',\r\n  'macOSApplicationExtension',\r\n  'macCatalyst',\r\n  'macCatalystApplicationExtension',\r\n  'watchOS',\r\n  'watchOSApplicationExtension',\r\n  'tvOS',\r\n  'tvOSApplicationExtension',\r\n  'swift'\r\n];\r\n\r\n/*\r\nLanguage: Swift\r\nDescription: Swift is a general-purpose programming language built using a modern approach to safety, performance, and software design patterns.\r\nAuthor: Steven Van Impe <steven.vanimpe@icloud.com>\r\nContributors: Chris Eidhof <chris@eidhof.nl>, Nate Cook <natecook@gmail.com>, Alexander Lichter <manniL@gmx.net>, Richard Gibson <gibson042@github>\r\nWebsite: https://swift.org\r\nCategory: common, system\r\n*/\r\n\r\n/** @type LanguageFn */\r\nfunction swift(hljs) {\r\n  const WHITESPACE = {\r\n    match: /\\s+/,\r\n    relevance: 0\r\n  };\r\n  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID411\r\n  const BLOCK_COMMENT = hljs.COMMENT(\r\n    '/\\\\*',\r\n    '\\\\*/',\r\n    {\r\n      contains: [ 'self' ]\r\n    }\r\n  );\r\n  const COMMENTS = [\r\n    hljs.C_LINE_COMMENT_MODE,\r\n    BLOCK_COMMENT\r\n  ];\r\n\r\n  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID413\r\n  // https://docs.swift.org/swift-book/ReferenceManual/zzSummaryOfTheGrammar.html\r\n  const DOT_KEYWORD = {\r\n    className: 'keyword',\r\n    begin: concat(/\\./, lookahead(either(...dotKeywords, ...optionalDotKeywords))),\r\n    end: either(...dotKeywords, ...optionalDotKeywords),\r\n    excludeBegin: true\r\n  };\r\n  const KEYWORD_GUARD = {\r\n    // Consume .keyword to prevent highlighting properties and methods as keywords.\r\n    match: concat(/\\./, either(...keywords)),\r\n    relevance: 0\r\n  };\r\n  const PLAIN_KEYWORDS = keywords\r\n    .filter(kw => typeof kw === 'string')\r\n    .concat([ \"_|0\" ]); // seems common, so 0 relevance\r\n  const REGEX_KEYWORDS = keywords\r\n    .filter(kw => typeof kw !== 'string') // find regex\r\n    .concat(keywordTypes)\r\n    .map(keywordWrapper);\r\n  const KEYWORD = {\r\n    variants: [\r\n      {\r\n        className: 'keyword',\r\n        match: either(...REGEX_KEYWORDS, ...optionalDotKeywords)\r\n      }\r\n    ]\r\n  };\r\n  // find all the regular keywords\r\n  const KEYWORDS = {\r\n    $pattern: either(\r\n      /\\b\\w+/, // regular keywords\r\n      /#\\w+/ // number keywords\r\n    ),\r\n    keyword: PLAIN_KEYWORDS\r\n      .concat(numberSignKeywords),\r\n    literal: literals\r\n  };\r\n  const KEYWORD_MODES = [\r\n    DOT_KEYWORD,\r\n    KEYWORD_GUARD,\r\n    KEYWORD\r\n  ];\r\n\r\n  // https://github.com/apple/swift/tree/main/stdlib/public/core\r\n  const BUILT_IN_GUARD = {\r\n    // Consume .built_in to prevent highlighting properties and methods.\r\n    match: concat(/\\./, either(...builtIns)),\r\n    relevance: 0\r\n  };\r\n  const BUILT_IN = {\r\n    className: 'built_in',\r\n    match: concat(/\\b/, either(...builtIns), /(?=\\()/)\r\n  };\r\n  const BUILT_INS = [\r\n    BUILT_IN_GUARD,\r\n    BUILT_IN\r\n  ];\r\n\r\n  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID418\r\n  const OPERATOR_GUARD = {\r\n    // Prevent -> from being highlighting as an operator.\r\n    match: /->/,\r\n    relevance: 0\r\n  };\r\n  const OPERATOR = {\r\n    className: 'operator',\r\n    relevance: 0,\r\n    variants: [\r\n      {\r\n        match: operator\r\n      },\r\n      {\r\n        // dot-operator: only operators that start with a dot are allowed to use dots as\r\n        // characters (..., ...<, .*, etc). So there rule here is: a dot followed by one or more\r\n        // characters that may also include dots.\r\n        match: `\\\\.(\\\\.|${operatorCharacter})+`\r\n      }\r\n    ]\r\n  };\r\n  const OPERATORS = [\r\n    OPERATOR_GUARD,\r\n    OPERATOR\r\n  ];\r\n\r\n  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_numeric-literal\r\n  // TODO: Update for leading `-` after lookbehind is supported everywhere\r\n  const decimalDigits = '([0-9]_*)+';\r\n  const hexDigits = '([0-9a-fA-F]_*)+';\r\n  const NUMBER = {\r\n    className: 'number',\r\n    relevance: 0,\r\n    variants: [\r\n      // decimal floating-point-literal (subsumes decimal-literal)\r\n      {\r\n        match: `\\\\b(${decimalDigits})(\\\\.(${decimalDigits}))?` + `([eE][+-]?(${decimalDigits}))?\\\\b`\r\n      },\r\n      // hexadecimal floating-point-literal (subsumes hexadecimal-literal)\r\n      {\r\n        match: `\\\\b0x(${hexDigits})(\\\\.(${hexDigits}))?` + `([pP][+-]?(${decimalDigits}))?\\\\b`\r\n      },\r\n      // octal-literal\r\n      {\r\n        match: /\\b0o([0-7]_*)+\\b/\r\n      },\r\n      // binary-literal\r\n      {\r\n        match: /\\b0b([01]_*)+\\b/\r\n      }\r\n    ]\r\n  };\r\n\r\n  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_string-literal\r\n  const ESCAPED_CHARACTER = (rawDelimiter = \"\") => ({\r\n    className: 'subst',\r\n    variants: [\r\n      {\r\n        match: concat(/\\\\/, rawDelimiter, /[0\\\\tnr\"']/)\r\n      },\r\n      {\r\n        match: concat(/\\\\/, rawDelimiter, /u\\{[0-9a-fA-F]{1,8}\\}/)\r\n      }\r\n    ]\r\n  });\r\n  const ESCAPED_NEWLINE = (rawDelimiter = \"\") => ({\r\n    className: 'subst',\r\n    match: concat(/\\\\/, rawDelimiter, /[\\t ]*(?:[\\r\\n]|\\r\\n)/)\r\n  });\r\n  const INTERPOLATION = (rawDelimiter = \"\") => ({\r\n    className: 'subst',\r\n    label: \"interpol\",\r\n    begin: concat(/\\\\/, rawDelimiter, /\\(/),\r\n    end: /\\)/\r\n  });\r\n  const MULTILINE_STRING = (rawDelimiter = \"\") => ({\r\n    begin: concat(rawDelimiter, /\"\"\"/),\r\n    end: concat(/\"\"\"/, rawDelimiter),\r\n    contains: [\r\n      ESCAPED_CHARACTER(rawDelimiter),\r\n      ESCAPED_NEWLINE(rawDelimiter),\r\n      INTERPOLATION(rawDelimiter)\r\n    ]\r\n  });\r\n  const SINGLE_LINE_STRING = (rawDelimiter = \"\") => ({\r\n    begin: concat(rawDelimiter, /\"/),\r\n    end: concat(/\"/, rawDelimiter),\r\n    contains: [\r\n      ESCAPED_CHARACTER(rawDelimiter),\r\n      INTERPOLATION(rawDelimiter)\r\n    ]\r\n  });\r\n  const STRING = {\r\n    className: 'string',\r\n    variants: [\r\n      MULTILINE_STRING(),\r\n      MULTILINE_STRING(\"#\"),\r\n      MULTILINE_STRING(\"##\"),\r\n      MULTILINE_STRING(\"###\"),\r\n      SINGLE_LINE_STRING(),\r\n      SINGLE_LINE_STRING(\"#\"),\r\n      SINGLE_LINE_STRING(\"##\"),\r\n      SINGLE_LINE_STRING(\"###\")\r\n    ]\r\n  };\r\n\r\n  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID412\r\n  const QUOTED_IDENTIFIER = {\r\n    match: concat(/`/, identifier, /`/)\r\n  };\r\n  const IMPLICIT_PARAMETER = {\r\n    className: 'variable',\r\n    match: /\\$\\d+/\r\n  };\r\n  const PROPERTY_WRAPPER_PROJECTION = {\r\n    className: 'variable',\r\n    match: `\\\\$${identifierCharacter}+`\r\n  };\r\n  const IDENTIFIERS = [\r\n    QUOTED_IDENTIFIER,\r\n    IMPLICIT_PARAMETER,\r\n    PROPERTY_WRAPPER_PROJECTION\r\n  ];\r\n\r\n  // https://docs.swift.org/swift-book/ReferenceManual/Attributes.html\r\n  const AVAILABLE_ATTRIBUTE = {\r\n    match: /(@|#)available/,\r\n    className: \"keyword\",\r\n    starts: {\r\n      contains: [\r\n        {\r\n          begin: /\\(/,\r\n          end: /\\)/,\r\n          keywords: availabilityKeywords,\r\n          contains: [\r\n            ...OPERATORS,\r\n            NUMBER,\r\n            STRING\r\n          ]\r\n        }\r\n      ]\r\n    }\r\n  };\r\n  const KEYWORD_ATTRIBUTE = {\r\n    className: 'keyword',\r\n    match: concat(/@/, either(...keywordAttributes))\r\n  };\r\n  const USER_DEFINED_ATTRIBUTE = {\r\n    className: 'meta',\r\n    match: concat(/@/, identifier)\r\n  };\r\n  const ATTRIBUTES = [\r\n    AVAILABLE_ATTRIBUTE,\r\n    KEYWORD_ATTRIBUTE,\r\n    USER_DEFINED_ATTRIBUTE\r\n  ];\r\n\r\n  // https://docs.swift.org/swift-book/ReferenceManual/Types.html\r\n  const TYPE = {\r\n    match: lookahead(/\\b[A-Z]/),\r\n    relevance: 0,\r\n    contains: [\r\n      { // Common Apple frameworks, for relevance boost\r\n        className: 'type',\r\n        match: concat(/(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)/, identifierCharacter, '+')\r\n      },\r\n      { // Type identifier\r\n        className: 'type',\r\n        match: typeIdentifier,\r\n        relevance: 0\r\n      },\r\n      { // Optional type\r\n        match: /[?!]+/,\r\n        relevance: 0\r\n      },\r\n      { // Variadic parameter\r\n        match: /\\.\\.\\./,\r\n        relevance: 0\r\n      },\r\n      { // Protocol composition\r\n        match: concat(/\\s+&\\s+/, lookahead(typeIdentifier)),\r\n        relevance: 0\r\n      }\r\n    ]\r\n  };\r\n  const GENERIC_ARGUMENTS = {\r\n    begin: /</,\r\n    end: />/,\r\n    keywords: KEYWORDS,\r\n    contains: [\r\n      ...COMMENTS,\r\n      ...KEYWORD_MODES,\r\n      ...ATTRIBUTES,\r\n      OPERATOR_GUARD,\r\n      TYPE\r\n    ]\r\n  };\r\n  TYPE.contains.push(GENERIC_ARGUMENTS);\r\n\r\n  // https://docs.swift.org/swift-book/ReferenceManual/Expressions.html#ID552\r\n  // Prevents element names from being highlighted as keywords.\r\n  const TUPLE_ELEMENT_NAME = {\r\n    match: concat(identifier, /\\s*:/),\r\n    keywords: \"_|0\",\r\n    relevance: 0\r\n  };\r\n  // Matches tuples as well as the parameter list of a function type.\r\n  const TUPLE = {\r\n    begin: /\\(/,\r\n    end: /\\)/,\r\n    relevance: 0,\r\n    keywords: KEYWORDS,\r\n    contains: [\r\n      'self',\r\n      TUPLE_ELEMENT_NAME,\r\n      ...COMMENTS,\r\n      ...KEYWORD_MODES,\r\n      ...BUILT_INS,\r\n      ...OPERATORS,\r\n      NUMBER,\r\n      STRING,\r\n      ...IDENTIFIERS,\r\n      ...ATTRIBUTES,\r\n      TYPE\r\n    ]\r\n  };\r\n\r\n  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID362\r\n  // Matches both the keyword func and the function title.\r\n  // Grouping these lets us differentiate between the operator function <\r\n  // and the start of the generic parameter clause (also <).\r\n  const FUNC_PLUS_TITLE = {\r\n    beginKeywords: 'func',\r\n    contains: [\r\n      {\r\n        className: 'title',\r\n        match: either(QUOTED_IDENTIFIER.match, identifier, operator),\r\n        // Required to make sure the opening < of the generic parameter clause\r\n        // isn't parsed as a second title.\r\n        endsParent: true,\r\n        relevance: 0\r\n      },\r\n      WHITESPACE\r\n    ]\r\n  };\r\n  const GENERIC_PARAMETERS = {\r\n    begin: /</,\r\n    end: />/,\r\n    contains: [\r\n      ...COMMENTS,\r\n      TYPE\r\n    ]\r\n  };\r\n  const FUNCTION_PARAMETER_NAME = {\r\n    begin: either(\r\n      lookahead(concat(identifier, /\\s*:/)),\r\n      lookahead(concat(identifier, /\\s+/, identifier, /\\s*:/))\r\n    ),\r\n    end: /:/,\r\n    relevance: 0,\r\n    contains: [\r\n      {\r\n        className: 'keyword',\r\n        match: /\\b_\\b/\r\n      },\r\n      {\r\n        className: 'params',\r\n        match: identifier\r\n      }\r\n    ]\r\n  };\r\n  const FUNCTION_PARAMETERS = {\r\n    begin: /\\(/,\r\n    end: /\\)/,\r\n    keywords: KEYWORDS,\r\n    contains: [\r\n      FUNCTION_PARAMETER_NAME,\r\n      ...COMMENTS,\r\n      ...KEYWORD_MODES,\r\n      ...OPERATORS,\r\n      NUMBER,\r\n      STRING,\r\n      ...ATTRIBUTES,\r\n      TYPE,\r\n      TUPLE\r\n    ],\r\n    endsParent: true,\r\n    illegal: /[\"']/\r\n  };\r\n  const FUNCTION = {\r\n    className: 'function',\r\n    match: lookahead(/\\bfunc\\b/),\r\n    contains: [\r\n      FUNC_PLUS_TITLE,\r\n      GENERIC_PARAMETERS,\r\n      FUNCTION_PARAMETERS,\r\n      WHITESPACE\r\n    ],\r\n    illegal: [\r\n      /\\[/,\r\n      /%/\r\n    ]\r\n  };\r\n\r\n  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID375\r\n  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID379\r\n  const INIT_SUBSCRIPT = {\r\n    className: 'function',\r\n    match: /\\b(subscript|init[?!]?)\\s*(?=[<(])/,\r\n    keywords: {\r\n      keyword: \"subscript init init? init!\",\r\n      $pattern: /\\w+[?!]?/\r\n    },\r\n    contains: [\r\n      GENERIC_PARAMETERS,\r\n      FUNCTION_PARAMETERS,\r\n      WHITESPACE\r\n    ],\r\n    illegal: /\\[|%/\r\n  };\r\n  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID380\r\n  const OPERATOR_DECLARATION = {\r\n    beginKeywords: 'operator',\r\n    end: hljs.MATCH_NOTHING_RE,\r\n    contains: [\r\n      {\r\n        className: 'title',\r\n        match: operator,\r\n        endsParent: true,\r\n        relevance: 0\r\n      }\r\n    ]\r\n  };\r\n\r\n  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID550\r\n  const PRECEDENCEGROUP = {\r\n    beginKeywords: 'precedencegroup',\r\n    end: hljs.MATCH_NOTHING_RE,\r\n    contains: [\r\n      {\r\n        className: 'title',\r\n        match: typeIdentifier,\r\n        relevance: 0\r\n      },\r\n      {\r\n        begin: /{/,\r\n        end: /}/,\r\n        relevance: 0,\r\n        endsParent: true,\r\n        keywords: [\r\n          ...precedencegroupKeywords,\r\n          ...literals\r\n        ],\r\n        contains: [ TYPE ]\r\n      }\r\n    ]\r\n  };\r\n\r\n  // Add supported submodes to string interpolation.\r\n  for (const variant of STRING.variants) {\r\n    const interpolation = variant.contains.find(mode => mode.label === \"interpol\");\r\n    // TODO: Interpolation can contain any expression, so there's room for improvement here.\r\n    interpolation.keywords = KEYWORDS;\r\n    const submodes = [\r\n      ...KEYWORD_MODES,\r\n      ...BUILT_INS,\r\n      ...OPERATORS,\r\n      NUMBER,\r\n      STRING,\r\n      ...IDENTIFIERS\r\n    ];\r\n    interpolation.contains = [\r\n      ...submodes,\r\n      {\r\n        begin: /\\(/,\r\n        end: /\\)/,\r\n        contains: [\r\n          'self',\r\n          ...submodes\r\n        ]\r\n      }\r\n    ];\r\n  }\r\n\r\n  return {\r\n    name: 'Swift',\r\n    keywords: KEYWORDS,\r\n    contains: [\r\n      ...COMMENTS,\r\n      FUNCTION,\r\n      INIT_SUBSCRIPT,\r\n      {\r\n        className: 'class',\r\n        beginKeywords: 'struct protocol class extension enum',\r\n        end: '\\\\{',\r\n        excludeEnd: true,\r\n        keywords: KEYWORDS,\r\n        contains: [\r\n          hljs.inherit(hljs.TITLE_MODE, {\r\n            begin: /[A-Za-z$_][\\u00C0-\\u02B80-9A-Za-z$_]*/\r\n          }),\r\n          ...KEYWORD_MODES\r\n        ]\r\n      },\r\n      OPERATOR_DECLARATION,\r\n      PRECEDENCEGROUP,\r\n      {\r\n        beginKeywords: 'import',\r\n        end: /$/,\r\n        contains: [ ...COMMENTS ],\r\n        relevance: 0\r\n      },\r\n      ...KEYWORD_MODES,\r\n      ...BUILT_INS,\r\n      ...OPERATORS,\r\n      NUMBER,\r\n      STRING,\r\n      ...IDENTIFIERS,\r\n      ...ATTRIBUTES,\r\n      TYPE,\r\n      TUPLE\r\n    ]\r\n  };\r\n}\r\n\r\nmodule.exports = swift;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}