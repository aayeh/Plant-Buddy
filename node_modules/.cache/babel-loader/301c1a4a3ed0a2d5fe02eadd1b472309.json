{"ast":null,"code":"'use strict';\n\nvar refractorMarkupTemplating = require('./markup-templating.js');\n\nmodule.exports = soy;\nsoy.displayName = 'soy';\nsoy.aliases = [];\n\nfunction soy(Prism) {\n  Prism.register(refractorMarkupTemplating);\n\n  (function (Prism) {\n    var stringPattern = /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;\n    var numberPattern = /\\b\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?\\b|\\b0x[\\dA-F]+\\b/;\n    Prism.languages.soy = {\n      comment: [/\\/\\*[\\s\\S]*?\\*\\//, {\n        pattern: /(\\s)\\/\\/.*/,\n        lookbehind: true,\n        greedy: true\n      }],\n      'command-arg': {\n        pattern: /(\\{+\\/?\\s*(?:alias|call|delcall|delpackage|deltemplate|namespace|template)\\s+)\\.?[\\w.]+/,\n        lookbehind: true,\n        alias: 'string',\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      parameter: {\n        pattern: /(\\{+\\/?\\s*@?param\\??\\s+)\\.?[\\w.]+/,\n        lookbehind: true,\n        alias: 'variable'\n      },\n      keyword: [{\n        pattern: /(\\{+\\/?[^\\S\\r\\n]*)(?:\\\\[nrt]|alias|call|case|css|default|delcall|delpackage|deltemplate|else(?:if)?|fallbackmsg|for(?:each)?|if(?:empty)?|lb|let|literal|msg|namespace|nil|@?param\\??|rb|sp|switch|template|xid)/,\n        lookbehind: true\n      }, /\\b(?:any|as|attributes|bool|css|float|html|in|int|js|list|map|null|number|string|uri)\\b/],\n      delimiter: {\n        pattern: /^\\{+\\/?|\\/?\\}+$/,\n        alias: 'punctuation'\n      },\n      property: /\\w+(?==)/,\n      variable: {\n        pattern: /\\$[^\\W\\d]\\w*(?:\\??(?:\\.\\w+|\\[[^\\]]+\\]))*/,\n        inside: {\n          string: {\n            pattern: stringPattern,\n            greedy: true\n          },\n          number: numberPattern,\n          punctuation: /[\\[\\].?]/\n        }\n      },\n      string: {\n        pattern: stringPattern,\n        greedy: true\n      },\n      function: [/\\w+(?=\\()/, {\n        pattern: /(\\|[^\\S\\r\\n]*)\\w+/,\n        lookbehind: true\n      }],\n      boolean: /\\b(?:false|true)\\b/,\n      number: numberPattern,\n      operator: /\\?:?|<=?|>=?|==?|!=|[+*/%-]|\\b(?:and|not|or)\\b/,\n      punctuation: /[{}()\\[\\]|.,:]/\n    }; // Tokenize all inline Soy expressions\n\n    Prism.hooks.add('before-tokenize', function (env) {\n      var soyPattern = /\\{\\{.+?\\}\\}|\\{.+?\\}|\\s\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//g;\n      var soyLitteralStart = '{literal}';\n      var soyLitteralEnd = '{/literal}';\n      var soyLitteralMode = false;\n      Prism.languages['markup-templating'].buildPlaceholders(env, 'soy', soyPattern, function (match) {\n        // Soy tags inside {literal} block are ignored\n        if (match === soyLitteralEnd) {\n          soyLitteralMode = false;\n        }\n\n        if (!soyLitteralMode) {\n          if (match === soyLitteralStart) {\n            soyLitteralMode = true;\n          }\n\n          return true;\n        }\n\n        return false;\n      });\n    }); // Re-insert the tokens after tokenizing\n\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'soy');\n    });\n  })(Prism);\n}","map":{"version":3,"names":["refractorMarkupTemplating","require","module","exports","soy","displayName","aliases","Prism","register","stringPattern","numberPattern","languages","comment","pattern","lookbehind","greedy","alias","inside","punctuation","parameter","keyword","delimiter","property","variable","string","number","function","boolean","operator","hooks","add","env","soyPattern","soyLitteralStart","soyLitteralEnd","soyLitteralMode","buildPlaceholders","match","tokenizePlaceholders"],"sources":["/Users/aaronyeh/Downloads/Plant Buddy/node_modules/refractor/lang/soy.js"],"sourcesContent":["'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = soy\nsoy.displayName = 'soy'\nsoy.aliases = []\nfunction soy(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  ;(function (Prism) {\n    var stringPattern = /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/\n    var numberPattern = /\\b\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?\\b|\\b0x[\\dA-F]+\\b/\n    Prism.languages.soy = {\n      comment: [\n        /\\/\\*[\\s\\S]*?\\*\\//,\n        {\n          pattern: /(\\s)\\/\\/.*/,\n          lookbehind: true,\n          greedy: true\n        }\n      ],\n      'command-arg': {\n        pattern:\n          /(\\{+\\/?\\s*(?:alias|call|delcall|delpackage|deltemplate|namespace|template)\\s+)\\.?[\\w.]+/,\n        lookbehind: true,\n        alias: 'string',\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      parameter: {\n        pattern: /(\\{+\\/?\\s*@?param\\??\\s+)\\.?[\\w.]+/,\n        lookbehind: true,\n        alias: 'variable'\n      },\n      keyword: [\n        {\n          pattern:\n            /(\\{+\\/?[^\\S\\r\\n]*)(?:\\\\[nrt]|alias|call|case|css|default|delcall|delpackage|deltemplate|else(?:if)?|fallbackmsg|for(?:each)?|if(?:empty)?|lb|let|literal|msg|namespace|nil|@?param\\??|rb|sp|switch|template|xid)/,\n          lookbehind: true\n        },\n        /\\b(?:any|as|attributes|bool|css|float|html|in|int|js|list|map|null|number|string|uri)\\b/\n      ],\n      delimiter: {\n        pattern: /^\\{+\\/?|\\/?\\}+$/,\n        alias: 'punctuation'\n      },\n      property: /\\w+(?==)/,\n      variable: {\n        pattern: /\\$[^\\W\\d]\\w*(?:\\??(?:\\.\\w+|\\[[^\\]]+\\]))*/,\n        inside: {\n          string: {\n            pattern: stringPattern,\n            greedy: true\n          },\n          number: numberPattern,\n          punctuation: /[\\[\\].?]/\n        }\n      },\n      string: {\n        pattern: stringPattern,\n        greedy: true\n      },\n      function: [\n        /\\w+(?=\\()/,\n        {\n          pattern: /(\\|[^\\S\\r\\n]*)\\w+/,\n          lookbehind: true\n        }\n      ],\n      boolean: /\\b(?:false|true)\\b/,\n      number: numberPattern,\n      operator: /\\?:?|<=?|>=?|==?|!=|[+*/%-]|\\b(?:and|not|or)\\b/,\n      punctuation: /[{}()\\[\\]|.,:]/\n    } // Tokenize all inline Soy expressions\n    Prism.hooks.add('before-tokenize', function (env) {\n      var soyPattern = /\\{\\{.+?\\}\\}|\\{.+?\\}|\\s\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//g\n      var soyLitteralStart = '{literal}'\n      var soyLitteralEnd = '{/literal}'\n      var soyLitteralMode = false\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'soy',\n        soyPattern,\n        function (match) {\n          // Soy tags inside {literal} block are ignored\n          if (match === soyLitteralEnd) {\n            soyLitteralMode = false\n          }\n          if (!soyLitteralMode) {\n            if (match === soyLitteralStart) {\n              soyLitteralMode = true\n            }\n            return true\n          }\n          return false\n        }\n      )\n    }) // Re-insert the tokens after tokenizing\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'soy')\n    })\n  })(Prism)\n}\n"],"mappings":"AAAA;;AACA,IAAIA,yBAAyB,GAAGC,OAAO,CAAC,wBAAD,CAAvC;;AACAC,MAAM,CAACC,OAAP,GAAiBC,GAAjB;AACAA,GAAG,CAACC,WAAJ,GAAkB,KAAlB;AACAD,GAAG,CAACE,OAAJ,GAAc,EAAd;;AACA,SAASF,GAAT,CAAaG,KAAb,EAAoB;EAClBA,KAAK,CAACC,QAAN,CAAeR,yBAAf;;EACC,CAAC,UAAUO,KAAV,EAAiB;IACjB,IAAIE,aAAa,GAAG,gDAApB;IACA,IAAIC,aAAa,GAAG,mDAApB;IACAH,KAAK,CAACI,SAAN,CAAgBP,GAAhB,GAAsB;MACpBQ,OAAO,EAAE,CACP,kBADO,EAEP;QACEC,OAAO,EAAE,YADX;QAEEC,UAAU,EAAE,IAFd;QAGEC,MAAM,EAAE;MAHV,CAFO,CADW;MASpB,eAAe;QACbF,OAAO,EACL,yFAFW;QAGbC,UAAU,EAAE,IAHC;QAIbE,KAAK,EAAE,QAJM;QAKbC,MAAM,EAAE;UACNC,WAAW,EAAE;QADP;MALK,CATK;MAkBpBC,SAAS,EAAE;QACTN,OAAO,EAAE,mCADA;QAETC,UAAU,EAAE,IAFH;QAGTE,KAAK,EAAE;MAHE,CAlBS;MAuBpBI,OAAO,EAAE,CACP;QACEP,OAAO,EACL,kNAFJ;QAGEC,UAAU,EAAE;MAHd,CADO,EAMP,yFANO,CAvBW;MA+BpBO,SAAS,EAAE;QACTR,OAAO,EAAE,iBADA;QAETG,KAAK,EAAE;MAFE,CA/BS;MAmCpBM,QAAQ,EAAE,UAnCU;MAoCpBC,QAAQ,EAAE;QACRV,OAAO,EAAE,0CADD;QAERI,MAAM,EAAE;UACNO,MAAM,EAAE;YACNX,OAAO,EAAEJ,aADH;YAENM,MAAM,EAAE;UAFF,CADF;UAKNU,MAAM,EAAEf,aALF;UAMNQ,WAAW,EAAE;QANP;MAFA,CApCU;MA+CpBM,MAAM,EAAE;QACNX,OAAO,EAAEJ,aADH;QAENM,MAAM,EAAE;MAFF,CA/CY;MAmDpBW,QAAQ,EAAE,CACR,WADQ,EAER;QACEb,OAAO,EAAE,mBADX;QAEEC,UAAU,EAAE;MAFd,CAFQ,CAnDU;MA0DpBa,OAAO,EAAE,oBA1DW;MA2DpBF,MAAM,EAAEf,aA3DY;MA4DpBkB,QAAQ,EAAE,gDA5DU;MA6DpBV,WAAW,EAAE;IA7DO,CAAtB,CAHiB,CAiEf;;IACFX,KAAK,CAACsB,KAAN,CAAYC,GAAZ,CAAgB,iBAAhB,EAAmC,UAAUC,GAAV,EAAe;MAChD,IAAIC,UAAU,GAAG,gDAAjB;MACA,IAAIC,gBAAgB,GAAG,WAAvB;MACA,IAAIC,cAAc,GAAG,YAArB;MACA,IAAIC,eAAe,GAAG,KAAtB;MACA5B,KAAK,CAACI,SAAN,CAAgB,mBAAhB,EAAqCyB,iBAArC,CACEL,GADF,EAEE,KAFF,EAGEC,UAHF,EAIE,UAAUK,KAAV,EAAiB;QACf;QACA,IAAIA,KAAK,KAAKH,cAAd,EAA8B;UAC5BC,eAAe,GAAG,KAAlB;QACD;;QACD,IAAI,CAACA,eAAL,EAAsB;UACpB,IAAIE,KAAK,KAAKJ,gBAAd,EAAgC;YAC9BE,eAAe,GAAG,IAAlB;UACD;;UACD,OAAO,IAAP;QACD;;QACD,OAAO,KAAP;MACD,CAhBH;IAkBD,CAvBD,EAlEiB,CAyFd;;IACH5B,KAAK,CAACsB,KAAN,CAAYC,GAAZ,CAAgB,gBAAhB,EAAkC,UAAUC,GAAV,EAAe;MAC/CxB,KAAK,CAACI,SAAN,CAAgB,mBAAhB,EAAqC2B,oBAArC,CAA0DP,GAA1D,EAA+D,KAA/D;IACD,CAFD;EAGD,CA7FA,EA6FExB,KA7FF;AA8FF"},"metadata":{},"sourceType":"script"}