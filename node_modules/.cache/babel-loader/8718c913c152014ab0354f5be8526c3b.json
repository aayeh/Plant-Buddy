{"ast":null,"code":"/*\r\nLanguage: Julia\r\nDescription: Julia is a high-level, high-performance, dynamic programming language.\r\nAuthor: Kenta Sato <bicycle1885@gmail.com>\r\nContributors: Alex Arslan <ararslan@comcast.net>, Fredrik Ekre <ekrefredrik@gmail.com>\r\nWebsite: https://julialang.org\r\n*/\nfunction julia(hljs) {\n  // Since there are numerous special names in Julia, it is too much trouble\n  // to maintain them by hand. Hence these names (i.e. keywords, literals and\n  // built-ins) are automatically generated from Julia 1.5.2 itself through\n  // the following scripts for each.\n  // ref: https://docs.julialang.org/en/v1/manual/variables/#Allowed-Variable-Names\n  var VARIABLE_NAME_RE = '[A-Za-z_\\\\u00A1-\\\\uFFFF][A-Za-z_0-9\\\\u00A1-\\\\uFFFF]*'; // # keyword generator, multi-word keywords handled manually below (Julia 1.5.2)\n  // import REPL.REPLCompletions\n  // res = String[\"in\", \"isa\", \"where\"]\n  // for kw in collect(x.keyword for x in REPLCompletions.complete_keyword(\"\"))\n  //     if !(contains(kw, \" \") || kw == \"struct\")\n  //         push!(res, kw)\n  //     end\n  // end\n  // sort!(unique!(res))\n  // foreach(x -> println(\"\\'\", x, \"\\',\"), res)\n\n  var KEYWORD_LIST = ['baremodule', 'begin', 'break', 'catch', 'ccall', 'const', 'continue', 'do', 'else', 'elseif', 'end', 'export', 'false', 'finally', 'for', 'function', 'global', 'if', 'import', 'in', 'isa', 'let', 'local', 'macro', 'module', 'quote', 'return', 'true', 'try', 'using', 'where', 'while']; // # literal generator (Julia 1.5.2)\n  // import REPL.REPLCompletions\n  // res = String[\"true\", \"false\"]\n  // for compl in filter!(x -> isa(x, REPLCompletions.ModuleCompletion) && (x.parent === Base || x.parent === Core),\n  //                     REPLCompletions.completions(\"\", 0)[1])\n  //     try\n  //         v = eval(Symbol(compl.mod))\n  //         if !(v isa Function || v isa Type || v isa TypeVar || v isa Module || v isa Colon)\n  //             push!(res, compl.mod)\n  //         end\n  //     catch e\n  //     end\n  // end\n  // sort!(unique!(res))\n  // foreach(x -> println(\"\\'\", x, \"\\',\"), res)\n\n  var LITERAL_LIST = ['ARGS', 'C_NULL', 'DEPOT_PATH', 'ENDIAN_BOM', 'ENV', 'Inf', 'Inf16', 'Inf32', 'Inf64', 'InsertionSort', 'LOAD_PATH', 'MergeSort', 'NaN', 'NaN16', 'NaN32', 'NaN64', 'PROGRAM_FILE', 'QuickSort', 'RoundDown', 'RoundFromZero', 'RoundNearest', 'RoundNearestTiesAway', 'RoundNearestTiesUp', 'RoundToZero', 'RoundUp', 'VERSION|0', 'devnull', 'false', 'im', 'missing', 'nothing', 'pi', 'stderr', 'stdin', 'stdout', 'true', 'undef', 'π', 'ℯ']; // # built_in generator (Julia 1.5.2)\n  // import REPL.REPLCompletions\n  // res = String[]\n  // for compl in filter!(x -> isa(x, REPLCompletions.ModuleCompletion) && (x.parent === Base || x.parent === Core),\n  //                     REPLCompletions.completions(\"\", 0)[1])\n  //     try\n  //         v = eval(Symbol(compl.mod))\n  //         if (v isa Type || v isa TypeVar) && (compl.mod != \"=>\")\n  //             push!(res, compl.mod)\n  //         end\n  //     catch e\n  //     end\n  // end\n  // sort!(unique!(res))\n  // foreach(x -> println(\"\\'\", x, \"\\',\"), res)\n\n  var BUILT_IN_LIST = ['AbstractArray', 'AbstractChannel', 'AbstractChar', 'AbstractDict', 'AbstractDisplay', 'AbstractFloat', 'AbstractIrrational', 'AbstractMatrix', 'AbstractRange', 'AbstractSet', 'AbstractString', 'AbstractUnitRange', 'AbstractVecOrMat', 'AbstractVector', 'Any', 'ArgumentError', 'Array', 'AssertionError', 'BigFloat', 'BigInt', 'BitArray', 'BitMatrix', 'BitSet', 'BitVector', 'Bool', 'BoundsError', 'CapturedException', 'CartesianIndex', 'CartesianIndices', 'Cchar', 'Cdouble', 'Cfloat', 'Channel', 'Char', 'Cint', 'Cintmax_t', 'Clong', 'Clonglong', 'Cmd', 'Colon', 'Complex', 'ComplexF16', 'ComplexF32', 'ComplexF64', 'CompositeException', 'Condition', 'Cptrdiff_t', 'Cshort', 'Csize_t', 'Cssize_t', 'Cstring', 'Cuchar', 'Cuint', 'Cuintmax_t', 'Culong', 'Culonglong', 'Cushort', 'Cvoid', 'Cwchar_t', 'Cwstring', 'DataType', 'DenseArray', 'DenseMatrix', 'DenseVecOrMat', 'DenseVector', 'Dict', 'DimensionMismatch', 'Dims', 'DivideError', 'DomainError', 'EOFError', 'Enum', 'ErrorException', 'Exception', 'ExponentialBackOff', 'Expr', 'Float16', 'Float32', 'Float64', 'Function', 'GlobalRef', 'HTML', 'IO', 'IOBuffer', 'IOContext', 'IOStream', 'IdDict', 'IndexCartesian', 'IndexLinear', 'IndexStyle', 'InexactError', 'InitError', 'Int', 'Int128', 'Int16', 'Int32', 'Int64', 'Int8', 'Integer', 'InterruptException', 'InvalidStateException', 'Irrational', 'KeyError', 'LinRange', 'LineNumberNode', 'LinearIndices', 'LoadError', 'MIME', 'Matrix', 'Method', 'MethodError', 'Missing', 'MissingException', 'Module', 'NTuple', 'NamedTuple', 'Nothing', 'Number', 'OrdinalRange', 'OutOfMemoryError', 'OverflowError', 'Pair', 'PartialQuickSort', 'PermutedDimsArray', 'Pipe', 'ProcessFailedException', 'Ptr', 'QuoteNode', 'Rational', 'RawFD', 'ReadOnlyMemoryError', 'Real', 'ReentrantLock', 'Ref', 'Regex', 'RegexMatch', 'RoundingMode', 'SegmentationFault', 'Set', 'Signed', 'Some', 'StackOverflowError', 'StepRange', 'StepRangeLen', 'StridedArray', 'StridedMatrix', 'StridedVecOrMat', 'StridedVector', 'String', 'StringIndexError', 'SubArray', 'SubString', 'SubstitutionString', 'Symbol', 'SystemError', 'Task', 'TaskFailedException', 'Text', 'TextDisplay', 'Timer', 'Tuple', 'Type', 'TypeError', 'TypeVar', 'UInt', 'UInt128', 'UInt16', 'UInt32', 'UInt64', 'UInt8', 'UndefInitializer', 'UndefKeywordError', 'UndefRefError', 'UndefVarError', 'Union', 'UnionAll', 'UnitRange', 'Unsigned', 'Val', 'Vararg', 'VecElement', 'VecOrMat', 'Vector', 'VersionNumber', 'WeakKeyDict', 'WeakRef'];\n  var KEYWORDS = {\n    $pattern: VARIABLE_NAME_RE,\n    keyword: KEYWORD_LIST,\n    literal: LITERAL_LIST,\n    built_in: BUILT_IN_LIST\n  }; // placeholder for recursive self-reference\n\n  var DEFAULT = {\n    keywords: KEYWORDS,\n    illegal: /<\\//\n  }; // ref: https://docs.julialang.org/en/v1/manual/integers-and-floating-point-numbers/\n\n  var NUMBER = {\n    className: 'number',\n    // supported numeric literals:\n    //  * binary literal (e.g. 0x10)\n    //  * octal literal (e.g. 0o76543210)\n    //  * hexadecimal literal (e.g. 0xfedcba876543210)\n    //  * hexadecimal floating point literal (e.g. 0x1p0, 0x1.2p2)\n    //  * decimal literal (e.g. 9876543210, 100_000_000)\n    //  * floating pointe literal (e.g. 1.2, 1.2f, .2, 1., 1.2e10, 1.2e-10)\n    begin: /(\\b0x[\\d_]*(\\.[\\d_]*)?|0x\\.\\d[\\d_]*)p[-+]?\\d+|\\b0[box][a-fA-F0-9][a-fA-F0-9_]*|(\\b\\d[\\d_]*(\\.[\\d_]*)?|\\.\\d[\\d_]*)([eEfF][-+]?\\d+)?/,\n    relevance: 0\n  };\n  var CHAR = {\n    className: 'string',\n    begin: /'(.|\\\\[xXuU][a-zA-Z0-9]+)'/\n  };\n  var INTERPOLATION = {\n    className: 'subst',\n    begin: /\\$\\(/,\n    end: /\\)/,\n    keywords: KEYWORDS\n  };\n  var INTERPOLATED_VARIABLE = {\n    className: 'variable',\n    begin: '\\\\$' + VARIABLE_NAME_RE\n  }; // TODO: neatly escape normal code in string literal\n\n  var STRING = {\n    className: 'string',\n    contains: [hljs.BACKSLASH_ESCAPE, INTERPOLATION, INTERPOLATED_VARIABLE],\n    variants: [{\n      begin: /\\w*\"\"\"/,\n      end: /\"\"\"\\w*/,\n      relevance: 10\n    }, {\n      begin: /\\w*\"/,\n      end: /\"\\w*/\n    }]\n  };\n  var COMMAND = {\n    className: 'string',\n    contains: [hljs.BACKSLASH_ESCAPE, INTERPOLATION, INTERPOLATED_VARIABLE],\n    begin: '`',\n    end: '`'\n  };\n  var MACROCALL = {\n    className: 'meta',\n    begin: '@' + VARIABLE_NAME_RE\n  };\n  var COMMENT = {\n    className: 'comment',\n    variants: [{\n      begin: '#=',\n      end: '=#',\n      relevance: 10\n    }, {\n      begin: '#',\n      end: '$'\n    }]\n  };\n  DEFAULT.name = 'Julia';\n  DEFAULT.contains = [NUMBER, CHAR, STRING, COMMAND, MACROCALL, COMMENT, hljs.HASH_COMMENT_MODE, {\n    className: 'keyword',\n    begin: '\\\\b(((abstract|primitive)\\\\s+)type|(mutable\\\\s+)?struct)\\\\b'\n  }, {\n    begin: /<:/\n  } // relevance booster\n  ];\n  INTERPOLATION.contains = DEFAULT.contains;\n  return DEFAULT;\n}\n\nmodule.exports = julia;","map":{"version":3,"names":["julia","hljs","VARIABLE_NAME_RE","KEYWORD_LIST","LITERAL_LIST","BUILT_IN_LIST","KEYWORDS","$pattern","keyword","literal","built_in","DEFAULT","keywords","illegal","NUMBER","className","begin","relevance","CHAR","INTERPOLATION","end","INTERPOLATED_VARIABLE","STRING","contains","BACKSLASH_ESCAPE","variants","COMMAND","MACROCALL","COMMENT","name","HASH_COMMENT_MODE","module","exports"],"sources":["C:/Users/ayeh8/Documents/Plant-Buddy/node_modules/highlight.js/lib/languages/julia.js"],"sourcesContent":["/*\r\nLanguage: Julia\r\nDescription: Julia is a high-level, high-performance, dynamic programming language.\r\nAuthor: Kenta Sato <bicycle1885@gmail.com>\r\nContributors: Alex Arslan <ararslan@comcast.net>, Fredrik Ekre <ekrefredrik@gmail.com>\r\nWebsite: https://julialang.org\r\n*/\r\n\r\nfunction julia(hljs) {\r\n  // Since there are numerous special names in Julia, it is too much trouble\r\n  // to maintain them by hand. Hence these names (i.e. keywords, literals and\r\n  // built-ins) are automatically generated from Julia 1.5.2 itself through\r\n  // the following scripts for each.\r\n\r\n  // ref: https://docs.julialang.org/en/v1/manual/variables/#Allowed-Variable-Names\r\n  var VARIABLE_NAME_RE = '[A-Za-z_\\\\u00A1-\\\\uFFFF][A-Za-z_0-9\\\\u00A1-\\\\uFFFF]*';\r\n\r\n  // # keyword generator, multi-word keywords handled manually below (Julia 1.5.2)\r\n  // import REPL.REPLCompletions\r\n  // res = String[\"in\", \"isa\", \"where\"]\r\n  // for kw in collect(x.keyword for x in REPLCompletions.complete_keyword(\"\"))\r\n  //     if !(contains(kw, \" \") || kw == \"struct\")\r\n  //         push!(res, kw)\r\n  //     end\r\n  // end\r\n  // sort!(unique!(res))\r\n  // foreach(x -> println(\"\\'\", x, \"\\',\"), res)\r\n  var KEYWORD_LIST = [\r\n    'baremodule',\r\n    'begin',\r\n    'break',\r\n    'catch',\r\n    'ccall',\r\n    'const',\r\n    'continue',\r\n    'do',\r\n    'else',\r\n    'elseif',\r\n    'end',\r\n    'export',\r\n    'false',\r\n    'finally',\r\n    'for',\r\n    'function',\r\n    'global',\r\n    'if',\r\n    'import',\r\n    'in',\r\n    'isa',\r\n    'let',\r\n    'local',\r\n    'macro',\r\n    'module',\r\n    'quote',\r\n    'return',\r\n    'true',\r\n    'try',\r\n    'using',\r\n    'where',\r\n    'while',\r\n  ];\r\n\r\n  // # literal generator (Julia 1.5.2)\r\n  // import REPL.REPLCompletions\r\n  // res = String[\"true\", \"false\"]\r\n  // for compl in filter!(x -> isa(x, REPLCompletions.ModuleCompletion) && (x.parent === Base || x.parent === Core),\r\n  //                     REPLCompletions.completions(\"\", 0)[1])\r\n  //     try\r\n  //         v = eval(Symbol(compl.mod))\r\n  //         if !(v isa Function || v isa Type || v isa TypeVar || v isa Module || v isa Colon)\r\n  //             push!(res, compl.mod)\r\n  //         end\r\n  //     catch e\r\n  //     end\r\n  // end\r\n  // sort!(unique!(res))\r\n  // foreach(x -> println(\"\\'\", x, \"\\',\"), res)\r\n  var LITERAL_LIST = [\r\n    'ARGS',\r\n    'C_NULL',\r\n    'DEPOT_PATH',\r\n    'ENDIAN_BOM',\r\n    'ENV',\r\n    'Inf',\r\n    'Inf16',\r\n    'Inf32',\r\n    'Inf64',\r\n    'InsertionSort',\r\n    'LOAD_PATH',\r\n    'MergeSort',\r\n    'NaN',\r\n    'NaN16',\r\n    'NaN32',\r\n    'NaN64',\r\n    'PROGRAM_FILE',\r\n    'QuickSort',\r\n    'RoundDown',\r\n    'RoundFromZero',\r\n    'RoundNearest',\r\n    'RoundNearestTiesAway',\r\n    'RoundNearestTiesUp',\r\n    'RoundToZero',\r\n    'RoundUp',\r\n    'VERSION|0',\r\n    'devnull',\r\n    'false',\r\n    'im',\r\n    'missing',\r\n    'nothing',\r\n    'pi',\r\n    'stderr',\r\n    'stdin',\r\n    'stdout',\r\n    'true',\r\n    'undef',\r\n    'π',\r\n    'ℯ',\r\n  ];\r\n\r\n  // # built_in generator (Julia 1.5.2)\r\n  // import REPL.REPLCompletions\r\n  // res = String[]\r\n  // for compl in filter!(x -> isa(x, REPLCompletions.ModuleCompletion) && (x.parent === Base || x.parent === Core),\r\n  //                     REPLCompletions.completions(\"\", 0)[1])\r\n  //     try\r\n  //         v = eval(Symbol(compl.mod))\r\n  //         if (v isa Type || v isa TypeVar) && (compl.mod != \"=>\")\r\n  //             push!(res, compl.mod)\r\n  //         end\r\n  //     catch e\r\n  //     end\r\n  // end\r\n  // sort!(unique!(res))\r\n  // foreach(x -> println(\"\\'\", x, \"\\',\"), res)\r\n  var BUILT_IN_LIST = [\r\n    'AbstractArray',\r\n    'AbstractChannel',\r\n    'AbstractChar',\r\n    'AbstractDict',\r\n    'AbstractDisplay',\r\n    'AbstractFloat',\r\n    'AbstractIrrational',\r\n    'AbstractMatrix',\r\n    'AbstractRange',\r\n    'AbstractSet',\r\n    'AbstractString',\r\n    'AbstractUnitRange',\r\n    'AbstractVecOrMat',\r\n    'AbstractVector',\r\n    'Any',\r\n    'ArgumentError',\r\n    'Array',\r\n    'AssertionError',\r\n    'BigFloat',\r\n    'BigInt',\r\n    'BitArray',\r\n    'BitMatrix',\r\n    'BitSet',\r\n    'BitVector',\r\n    'Bool',\r\n    'BoundsError',\r\n    'CapturedException',\r\n    'CartesianIndex',\r\n    'CartesianIndices',\r\n    'Cchar',\r\n    'Cdouble',\r\n    'Cfloat',\r\n    'Channel',\r\n    'Char',\r\n    'Cint',\r\n    'Cintmax_t',\r\n    'Clong',\r\n    'Clonglong',\r\n    'Cmd',\r\n    'Colon',\r\n    'Complex',\r\n    'ComplexF16',\r\n    'ComplexF32',\r\n    'ComplexF64',\r\n    'CompositeException',\r\n    'Condition',\r\n    'Cptrdiff_t',\r\n    'Cshort',\r\n    'Csize_t',\r\n    'Cssize_t',\r\n    'Cstring',\r\n    'Cuchar',\r\n    'Cuint',\r\n    'Cuintmax_t',\r\n    'Culong',\r\n    'Culonglong',\r\n    'Cushort',\r\n    'Cvoid',\r\n    'Cwchar_t',\r\n    'Cwstring',\r\n    'DataType',\r\n    'DenseArray',\r\n    'DenseMatrix',\r\n    'DenseVecOrMat',\r\n    'DenseVector',\r\n    'Dict',\r\n    'DimensionMismatch',\r\n    'Dims',\r\n    'DivideError',\r\n    'DomainError',\r\n    'EOFError',\r\n    'Enum',\r\n    'ErrorException',\r\n    'Exception',\r\n    'ExponentialBackOff',\r\n    'Expr',\r\n    'Float16',\r\n    'Float32',\r\n    'Float64',\r\n    'Function',\r\n    'GlobalRef',\r\n    'HTML',\r\n    'IO',\r\n    'IOBuffer',\r\n    'IOContext',\r\n    'IOStream',\r\n    'IdDict',\r\n    'IndexCartesian',\r\n    'IndexLinear',\r\n    'IndexStyle',\r\n    'InexactError',\r\n    'InitError',\r\n    'Int',\r\n    'Int128',\r\n    'Int16',\r\n    'Int32',\r\n    'Int64',\r\n    'Int8',\r\n    'Integer',\r\n    'InterruptException',\r\n    'InvalidStateException',\r\n    'Irrational',\r\n    'KeyError',\r\n    'LinRange',\r\n    'LineNumberNode',\r\n    'LinearIndices',\r\n    'LoadError',\r\n    'MIME',\r\n    'Matrix',\r\n    'Method',\r\n    'MethodError',\r\n    'Missing',\r\n    'MissingException',\r\n    'Module',\r\n    'NTuple',\r\n    'NamedTuple',\r\n    'Nothing',\r\n    'Number',\r\n    'OrdinalRange',\r\n    'OutOfMemoryError',\r\n    'OverflowError',\r\n    'Pair',\r\n    'PartialQuickSort',\r\n    'PermutedDimsArray',\r\n    'Pipe',\r\n    'ProcessFailedException',\r\n    'Ptr',\r\n    'QuoteNode',\r\n    'Rational',\r\n    'RawFD',\r\n    'ReadOnlyMemoryError',\r\n    'Real',\r\n    'ReentrantLock',\r\n    'Ref',\r\n    'Regex',\r\n    'RegexMatch',\r\n    'RoundingMode',\r\n    'SegmentationFault',\r\n    'Set',\r\n    'Signed',\r\n    'Some',\r\n    'StackOverflowError',\r\n    'StepRange',\r\n    'StepRangeLen',\r\n    'StridedArray',\r\n    'StridedMatrix',\r\n    'StridedVecOrMat',\r\n    'StridedVector',\r\n    'String',\r\n    'StringIndexError',\r\n    'SubArray',\r\n    'SubString',\r\n    'SubstitutionString',\r\n    'Symbol',\r\n    'SystemError',\r\n    'Task',\r\n    'TaskFailedException',\r\n    'Text',\r\n    'TextDisplay',\r\n    'Timer',\r\n    'Tuple',\r\n    'Type',\r\n    'TypeError',\r\n    'TypeVar',\r\n    'UInt',\r\n    'UInt128',\r\n    'UInt16',\r\n    'UInt32',\r\n    'UInt64',\r\n    'UInt8',\r\n    'UndefInitializer',\r\n    'UndefKeywordError',\r\n    'UndefRefError',\r\n    'UndefVarError',\r\n    'Union',\r\n    'UnionAll',\r\n    'UnitRange',\r\n    'Unsigned',\r\n    'Val',\r\n    'Vararg',\r\n    'VecElement',\r\n    'VecOrMat',\r\n    'Vector',\r\n    'VersionNumber',\r\n    'WeakKeyDict',\r\n    'WeakRef',\r\n  ];\r\n\r\n  var KEYWORDS = {\r\n    $pattern: VARIABLE_NAME_RE,\r\n    keyword: KEYWORD_LIST,\r\n    literal: LITERAL_LIST,\r\n    built_in: BUILT_IN_LIST,\r\n  };\r\n\r\n  // placeholder for recursive self-reference\r\n  var DEFAULT = {\r\n    keywords: KEYWORDS, illegal: /<\\//\r\n  };\r\n\r\n  // ref: https://docs.julialang.org/en/v1/manual/integers-and-floating-point-numbers/\r\n  var NUMBER = {\r\n    className: 'number',\r\n    // supported numeric literals:\r\n    //  * binary literal (e.g. 0x10)\r\n    //  * octal literal (e.g. 0o76543210)\r\n    //  * hexadecimal literal (e.g. 0xfedcba876543210)\r\n    //  * hexadecimal floating point literal (e.g. 0x1p0, 0x1.2p2)\r\n    //  * decimal literal (e.g. 9876543210, 100_000_000)\r\n    //  * floating pointe literal (e.g. 1.2, 1.2f, .2, 1., 1.2e10, 1.2e-10)\r\n    begin: /(\\b0x[\\d_]*(\\.[\\d_]*)?|0x\\.\\d[\\d_]*)p[-+]?\\d+|\\b0[box][a-fA-F0-9][a-fA-F0-9_]*|(\\b\\d[\\d_]*(\\.[\\d_]*)?|\\.\\d[\\d_]*)([eEfF][-+]?\\d+)?/,\r\n    relevance: 0\r\n  };\r\n\r\n  var CHAR = {\r\n    className: 'string',\r\n    begin: /'(.|\\\\[xXuU][a-zA-Z0-9]+)'/\r\n  };\r\n\r\n  var INTERPOLATION = {\r\n    className: 'subst',\r\n    begin: /\\$\\(/, end: /\\)/,\r\n    keywords: KEYWORDS\r\n  };\r\n\r\n  var INTERPOLATED_VARIABLE = {\r\n    className: 'variable',\r\n    begin: '\\\\$' + VARIABLE_NAME_RE\r\n  };\r\n\r\n  // TODO: neatly escape normal code in string literal\r\n  var STRING = {\r\n    className: 'string',\r\n    contains: [hljs.BACKSLASH_ESCAPE, INTERPOLATION, INTERPOLATED_VARIABLE],\r\n    variants: [\r\n      { begin: /\\w*\"\"\"/, end: /\"\"\"\\w*/, relevance: 10 },\r\n      { begin: /\\w*\"/, end: /\"\\w*/ }\r\n    ]\r\n  };\r\n\r\n  var COMMAND = {\r\n    className: 'string',\r\n    contains: [hljs.BACKSLASH_ESCAPE, INTERPOLATION, INTERPOLATED_VARIABLE],\r\n    begin: '`', end: '`'\r\n  };\r\n\r\n  var MACROCALL = {\r\n    className: 'meta',\r\n    begin: '@' + VARIABLE_NAME_RE\r\n  };\r\n\r\n  var COMMENT = {\r\n    className: 'comment',\r\n    variants: [\r\n      { begin: '#=', end: '=#', relevance: 10 },\r\n      { begin: '#', end: '$' }\r\n    ]\r\n  };\r\n\r\n  DEFAULT.name = 'Julia';\r\n  DEFAULT.contains = [\r\n    NUMBER,\r\n    CHAR,\r\n    STRING,\r\n    COMMAND,\r\n    MACROCALL,\r\n    COMMENT,\r\n    hljs.HASH_COMMENT_MODE,\r\n    {\r\n      className: 'keyword',\r\n      begin:\r\n        '\\\\b(((abstract|primitive)\\\\s+)type|(mutable\\\\s+)?struct)\\\\b'\r\n    },\r\n    {begin: /<:/}  // relevance booster\r\n  ];\r\n  INTERPOLATION.contains = DEFAULT.contains;\r\n\r\n  return DEFAULT;\r\n}\r\n\r\nmodule.exports = julia;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}