{"ast":null,"code":"'use strict';\n\nmodule.exports = nim;\nnim.displayName = 'nim';\nnim.aliases = [];\n\nfunction nim(Prism) {\n  Prism.languages.nim = {\n    comment: {\n      pattern: /#.*/,\n      greedy: true\n    },\n    string: {\n      // Double-quoted strings can be prefixed by an identifier (Generalized raw string literals)\n      pattern: /(?:\\b(?!\\d)(?:\\w|\\\\x[89a-fA-F][0-9a-fA-F])+)?(?:\"\"\"[\\s\\S]*?\"\"\"(?!\")|\"(?:\\\\[\\s\\S]|\"\"|[^\"\\\\])*\")/,\n      greedy: true\n    },\n    char: {\n      // Character literals are handled specifically to prevent issues with numeric type suffixes\n      pattern: /'(?:\\\\(?:\\d+|x[\\da-fA-F]{0,2}|.)|[^'])'/,\n      greedy: true\n    },\n    function: {\n      pattern: /(?:(?!\\d)(?:\\w|\\\\x[89a-fA-F][0-9a-fA-F])+|`[^`\\r\\n]+`)\\*?(?:\\[[^\\]]+\\])?(?=\\s*\\()/,\n      greedy: true,\n      inside: {\n        operator: /\\*$/\n      }\n    },\n    // We don't want to highlight operators (and anything really) inside backticks\n    identifier: {\n      pattern: /`[^`\\r\\n]+`/,\n      greedy: true,\n      inside: {\n        punctuation: /`/\n      }\n    },\n    // The negative look ahead prevents wrong highlighting of the .. operator\n    number: /\\b(?:0[xXoObB][\\da-fA-F_]+|\\d[\\d_]*(?:(?!\\.\\.)\\.[\\d_]*)?(?:[eE][+-]?\\d[\\d_]*)?)(?:'?[iuf]\\d*)?/,\n    keyword: /\\b(?:addr|as|asm|atomic|bind|block|break|case|cast|concept|const|continue|converter|defer|discard|distinct|do|elif|else|end|enum|except|export|finally|for|from|func|generic|if|import|include|interface|iterator|let|macro|method|mixin|nil|object|out|proc|ptr|raise|ref|return|static|template|try|tuple|type|using|var|when|while|with|without|yield)\\b/,\n    operator: {\n      // Look behind and look ahead prevent wrong highlighting of punctuations [. .] {. .} (. .)\n      // but allow the slice operator .. to take precedence over them\n      // One can define his own operators in Nim so all combination of operators might be an operator.\n      pattern: /(^|[({\\[](?=\\.\\.)|(?![({\\[]\\.).)(?:(?:[=+\\-*\\/<>@$~&%|!?^:\\\\]|\\.\\.|\\.(?![)}\\]]))+|\\b(?:and|div|in|is|isnot|mod|not|notin|of|or|shl|shr|xor)\\b)/m,\n      lookbehind: true\n    },\n    punctuation: /[({\\[]\\.|\\.[)}\\]]|[`(){}\\[\\],:]/\n  };\n}","map":{"version":3,"names":["module","exports","nim","displayName","aliases","Prism","languages","comment","pattern","greedy","string","char","function","inside","operator","identifier","punctuation","number","keyword","lookbehind"],"sources":["C:/Users/ayeh8/Documents/Plant-Buddy/node_modules/refractor/lang/nim.js"],"sourcesContent":["'use strict'\r\n\r\nmodule.exports = nim\r\nnim.displayName = 'nim'\r\nnim.aliases = []\r\nfunction nim(Prism) {\r\n  Prism.languages.nim = {\r\n    comment: {\r\n      pattern: /#.*/,\r\n      greedy: true\r\n    },\r\n    string: {\r\n      // Double-quoted strings can be prefixed by an identifier (Generalized raw string literals)\r\n      pattern:\r\n        /(?:\\b(?!\\d)(?:\\w|\\\\x[89a-fA-F][0-9a-fA-F])+)?(?:\"\"\"[\\s\\S]*?\"\"\"(?!\")|\"(?:\\\\[\\s\\S]|\"\"|[^\"\\\\])*\")/,\r\n      greedy: true\r\n    },\r\n    char: {\r\n      // Character literals are handled specifically to prevent issues with numeric type suffixes\r\n      pattern: /'(?:\\\\(?:\\d+|x[\\da-fA-F]{0,2}|.)|[^'])'/,\r\n      greedy: true\r\n    },\r\n    function: {\r\n      pattern:\r\n        /(?:(?!\\d)(?:\\w|\\\\x[89a-fA-F][0-9a-fA-F])+|`[^`\\r\\n]+`)\\*?(?:\\[[^\\]]+\\])?(?=\\s*\\()/,\r\n      greedy: true,\r\n      inside: {\r\n        operator: /\\*$/\r\n      }\r\n    },\r\n    // We don't want to highlight operators (and anything really) inside backticks\r\n    identifier: {\r\n      pattern: /`[^`\\r\\n]+`/,\r\n      greedy: true,\r\n      inside: {\r\n        punctuation: /`/\r\n      }\r\n    },\r\n    // The negative look ahead prevents wrong highlighting of the .. operator\r\n    number:\r\n      /\\b(?:0[xXoObB][\\da-fA-F_]+|\\d[\\d_]*(?:(?!\\.\\.)\\.[\\d_]*)?(?:[eE][+-]?\\d[\\d_]*)?)(?:'?[iuf]\\d*)?/,\r\n    keyword:\r\n      /\\b(?:addr|as|asm|atomic|bind|block|break|case|cast|concept|const|continue|converter|defer|discard|distinct|do|elif|else|end|enum|except|export|finally|for|from|func|generic|if|import|include|interface|iterator|let|macro|method|mixin|nil|object|out|proc|ptr|raise|ref|return|static|template|try|tuple|type|using|var|when|while|with|without|yield)\\b/,\r\n    operator: {\r\n      // Look behind and look ahead prevent wrong highlighting of punctuations [. .] {. .} (. .)\r\n      // but allow the slice operator .. to take precedence over them\r\n      // One can define his own operators in Nim so all combination of operators might be an operator.\r\n      pattern:\r\n        /(^|[({\\[](?=\\.\\.)|(?![({\\[]\\.).)(?:(?:[=+\\-*\\/<>@$~&%|!?^:\\\\]|\\.\\.|\\.(?![)}\\]]))+|\\b(?:and|div|in|is|isnot|mod|not|notin|of|or|shl|shr|xor)\\b)/m,\r\n      lookbehind: true\r\n    },\r\n    punctuation: /[({\\[]\\.|\\.[)}\\]]|[`(){}\\[\\],:]/\r\n  }\r\n}\r\n"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,GAAjB;AACAA,GAAG,CAACC,WAAJ,GAAkB,KAAlB;AACAD,GAAG,CAACE,OAAJ,GAAc,EAAd;;AACA,SAASF,GAAT,CAAaG,KAAb,EAAoB;EAClBA,KAAK,CAACC,SAAN,CAAgBJ,GAAhB,GAAsB;IACpBK,OAAO,EAAE;MACPC,OAAO,EAAE,KADF;MAEPC,MAAM,EAAE;IAFD,CADW;IAKpBC,MAAM,EAAE;MACN;MACAF,OAAO,EACL,gGAHI;MAINC,MAAM,EAAE;IAJF,CALY;IAWpBE,IAAI,EAAE;MACJ;MACAH,OAAO,EAAE,yCAFL;MAGJC,MAAM,EAAE;IAHJ,CAXc;IAgBpBG,QAAQ,EAAE;MACRJ,OAAO,EACL,mFAFM;MAGRC,MAAM,EAAE,IAHA;MAIRI,MAAM,EAAE;QACNC,QAAQ,EAAE;MADJ;IAJA,CAhBU;IAwBpB;IACAC,UAAU,EAAE;MACVP,OAAO,EAAE,aADC;MAEVC,MAAM,EAAE,IAFE;MAGVI,MAAM,EAAE;QACNG,WAAW,EAAE;MADP;IAHE,CAzBQ;IAgCpB;IACAC,MAAM,EACJ,gGAlCkB;IAmCpBC,OAAO,EACL,6VApCkB;IAqCpBJ,QAAQ,EAAE;MACR;MACA;MACA;MACAN,OAAO,EACL,iJALM;MAMRW,UAAU,EAAE;IANJ,CArCU;IA6CpBH,WAAW,EAAE;EA7CO,CAAtB;AA+CD"},"metadata":{},"sourceType":"script"}