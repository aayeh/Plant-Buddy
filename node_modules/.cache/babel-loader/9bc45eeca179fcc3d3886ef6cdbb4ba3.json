{"ast":null,"code":"'use strict';\n\nvar refractorBash = require('./bash.js');\n\nmodule.exports = shellSession;\nshellSession.displayName = 'shellSession';\nshellSession.aliases = [];\n\nfunction shellSession(Prism) {\n  Prism.register(refractorBash);\n\n  (function (Prism) {\n    // CAREFUL!\n    // The following patterns are concatenated, so the group referenced by a back reference is non-obvious!\n    var strings = [// normal string\n    /\"(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|\\$(?!\\()|`[^`]+`|[^\"\\\\`$])*\"/.source, /'[^']*'/.source, /\\$'(?:[^'\\\\]|\\\\[\\s\\S])*'/.source, // here doc\n    // 2 capturing groups\n    /<<-?\\s*([\"']?)(\\w+)\\1\\s[\\s\\S]*?[\\r\\n]\\2/.source].join('|');\n    Prism.languages['shell-session'] = {\n      command: {\n        pattern: RegExp( // user info\n        /^/.source + '(?:' + ( // <user> \":\" ( <path> )?\n        /[^\\s@:$#%*!/\\\\]+@[^\\r\\n@:$#%*!/\\\\]+(?::[^\\0-\\x1F$#%*?\"<>:;|]+)?/.source + '|' + // <path>\n        // Since the path pattern is quite general, we will require it to start with a special character to\n        // prevent false positives.\n        /[/~.][^\\0-\\x1F$#%*?\"<>@:;|]*/.source) + ')?' + // shell symbol\n        /[$#%](?=\\s)/.source + // bash command\n        /(?:[^\\\\\\r\\n \\t'\"<$]|[ \\t](?:(?!#)|#.*$)|\\\\(?:[^\\r]|\\r\\n?)|\\$(?!')|<(?!<)|<<str>>)+/.source.replace(/<<str>>/g, function () {\n          return strings;\n        }), 'm'),\n        greedy: true,\n        inside: {\n          info: {\n            // foo@bar:~/files$ exit\n            // foo@bar$ exit\n            // ~/files$ exit\n            pattern: /^[^#$%]+/,\n            alias: 'punctuation',\n            inside: {\n              user: /^[^\\s@:$#%*!/\\\\]+@[^\\r\\n@:$#%*!/\\\\]+/,\n              punctuation: /:/,\n              path: /[\\s\\S]+/\n            }\n          },\n          bash: {\n            pattern: /(^[$#%]\\s*)\\S[\\s\\S]*/,\n            lookbehind: true,\n            alias: 'language-bash',\n            inside: Prism.languages.bash\n          },\n          'shell-symbol': {\n            pattern: /^[$#%]/,\n            alias: 'important'\n          }\n        }\n      },\n      output: /.(?:.*(?:[\\r\\n]|.$))*/\n    };\n    Prism.languages['sh-session'] = Prism.languages['shellsession'] = Prism.languages['shell-session'];\n  })(Prism);\n}","map":{"version":3,"names":["refractorBash","require","module","exports","shellSession","displayName","aliases","Prism","register","strings","source","join","languages","command","pattern","RegExp","replace","greedy","inside","info","alias","user","punctuation","path","bash","lookbehind","output"],"sources":["C:/Users/ayeh8/Documents/Plant-Buddy/node_modules/refractor/lang/shell-session.js"],"sourcesContent":["'use strict'\r\nvar refractorBash = require('./bash.js')\r\nmodule.exports = shellSession\r\nshellSession.displayName = 'shellSession'\r\nshellSession.aliases = []\r\nfunction shellSession(Prism) {\r\n  Prism.register(refractorBash)\r\n  ;(function (Prism) {\r\n    // CAREFUL!\r\n    // The following patterns are concatenated, so the group referenced by a back reference is non-obvious!\r\n    var strings = [\r\n      // normal string\r\n      /\"(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|\\$(?!\\()|`[^`]+`|[^\"\\\\`$])*\"/.source,\r\n      /'[^']*'/.source,\r\n      /\\$'(?:[^'\\\\]|\\\\[\\s\\S])*'/.source, // here doc\r\n      // 2 capturing groups\r\n      /<<-?\\s*([\"']?)(\\w+)\\1\\s[\\s\\S]*?[\\r\\n]\\2/.source\r\n    ].join('|')\r\n    Prism.languages['shell-session'] = {\r\n      command: {\r\n        pattern: RegExp(\r\n          // user info\r\n          /^/.source +\r\n            '(?:' + // <user> \":\" ( <path> )?\r\n            (/[^\\s@:$#%*!/\\\\]+@[^\\r\\n@:$#%*!/\\\\]+(?::[^\\0-\\x1F$#%*?\"<>:;|]+)?/\r\n              .source +\r\n              '|' + // <path>\r\n              // Since the path pattern is quite general, we will require it to start with a special character to\r\n              // prevent false positives.\r\n              /[/~.][^\\0-\\x1F$#%*?\"<>@:;|]*/.source) +\r\n            ')?' + // shell symbol\r\n            /[$#%](?=\\s)/.source + // bash command\r\n            /(?:[^\\\\\\r\\n \\t'\"<$]|[ \\t](?:(?!#)|#.*$)|\\\\(?:[^\\r]|\\r\\n?)|\\$(?!')|<(?!<)|<<str>>)+/.source.replace(\r\n              /<<str>>/g,\r\n              function () {\r\n                return strings\r\n              }\r\n            ),\r\n          'm'\r\n        ),\r\n        greedy: true,\r\n        inside: {\r\n          info: {\r\n            // foo@bar:~/files$ exit\r\n            // foo@bar$ exit\r\n            // ~/files$ exit\r\n            pattern: /^[^#$%]+/,\r\n            alias: 'punctuation',\r\n            inside: {\r\n              user: /^[^\\s@:$#%*!/\\\\]+@[^\\r\\n@:$#%*!/\\\\]+/,\r\n              punctuation: /:/,\r\n              path: /[\\s\\S]+/\r\n            }\r\n          },\r\n          bash: {\r\n            pattern: /(^[$#%]\\s*)\\S[\\s\\S]*/,\r\n            lookbehind: true,\r\n            alias: 'language-bash',\r\n            inside: Prism.languages.bash\r\n          },\r\n          'shell-symbol': {\r\n            pattern: /^[$#%]/,\r\n            alias: 'important'\r\n          }\r\n        }\r\n      },\r\n      output: /.(?:.*(?:[\\r\\n]|.$))*/\r\n    }\r\n    Prism.languages['sh-session'] = Prism.languages['shellsession'] =\r\n      Prism.languages['shell-session']\r\n  })(Prism)\r\n}\r\n"],"mappings":"AAAA;;AACA,IAAIA,aAAa,GAAGC,OAAO,CAAC,WAAD,CAA3B;;AACAC,MAAM,CAACC,OAAP,GAAiBC,YAAjB;AACAA,YAAY,CAACC,WAAb,GAA2B,cAA3B;AACAD,YAAY,CAACE,OAAb,GAAuB,EAAvB;;AACA,SAASF,YAAT,CAAsBG,KAAtB,EAA6B;EAC3BA,KAAK,CAACC,QAAN,CAAeR,aAAf;;EACC,CAAC,UAAUO,KAAV,EAAiB;IACjB;IACA;IACA,IAAIE,OAAO,GAAG,CACZ;IACA,wDAAwDC,MAF5C,EAGZ,UAAUA,MAHE,EAIZ,2BAA2BA,MAJf,EAIuB;IACnC;IACA,0CAA0CA,MAN9B,EAOZC,IAPY,CAOP,GAPO,CAAd;IAQAJ,KAAK,CAACK,SAAN,CAAgB,eAAhB,IAAmC;MACjCC,OAAO,EAAE;QACPC,OAAO,EAAEC,MAAM,EACb;QACA,IAAIL,MAAJ,GACE,KADF,KACU;QACP,kEACEA,MADF,GAEC,GAFD,GAEO;QACN;QACA;QACA,+BAA+BA,MAPnC,IAQE,IARF,GAQS;QACP,cAAcA,MAThB,GASyB;QACvB,qFAAqFA,MAArF,CAA4FM,OAA5F,CACE,UADF,EAEE,YAAY;UACV,OAAOP,OAAP;QACD,CAJH,CAZW,EAkBb,GAlBa,CADR;QAqBPQ,MAAM,EAAE,IArBD;QAsBPC,MAAM,EAAE;UACNC,IAAI,EAAE;YACJ;YACA;YACA;YACAL,OAAO,EAAE,UAJL;YAKJM,KAAK,EAAE,aALH;YAMJF,MAAM,EAAE;cACNG,IAAI,EAAE,sCADA;cAENC,WAAW,EAAE,GAFP;cAGNC,IAAI,EAAE;YAHA;UANJ,CADA;UAaNC,IAAI,EAAE;YACJV,OAAO,EAAE,sBADL;YAEJW,UAAU,EAAE,IAFR;YAGJL,KAAK,EAAE,eAHH;YAIJF,MAAM,EAAEX,KAAK,CAACK,SAAN,CAAgBY;UAJpB,CAbA;UAmBN,gBAAgB;YACdV,OAAO,EAAE,QADK;YAEdM,KAAK,EAAE;UAFO;QAnBV;MAtBD,CADwB;MAgDjCM,MAAM,EAAE;IAhDyB,CAAnC;IAkDAnB,KAAK,CAACK,SAAN,CAAgB,YAAhB,IAAgCL,KAAK,CAACK,SAAN,CAAgB,cAAhB,IAC9BL,KAAK,CAACK,SAAN,CAAgB,eAAhB,CADF;EAED,CA/DA,EA+DEL,KA/DF;AAgEF"},"metadata":{},"sourceType":"script"}